	comment	comment_date	is_merged	merged_at	request_changes
0	@chef/maintainers 	2017-05-29 10:54:23	0.0		0
1	omnibus builds are already in pain so merging to fix those	2017-05-25 20:34:45	1.0	2017-05-25 20:34:27	0
2	@chef/client-core reviewage (lets not think too hard about the breakpoint resource itself, i just picked it because its the shortest bit of provider code out there)	2017-05-25 17:21:56	1.0	2017-05-25 19:05:10	0
3	This blows up 14.04 because allow-downgrades is not supported there, so you'll need to figure out the first versions of ubuntu and debian that can safely support this and conditionally add the flag	2017-05-25 19:15:14	0.0		1
4	I know @lamont-granquist and @thommay  are going to be unhappy about this one. This is absolutely a short term fix until we get choco on the windows jenkins nodes like it was before our system failure.	2017-05-23 22:58:13	1.0	2017-05-24 04:40:42	0
5	no, that's absolutely the right thing to do.	2017-05-24 13:48:17	1.0	2017-05-24 04:40:42	0
6	^ trailing comma is trolling you	2017-05-23 23:08:46	1.0	2017-05-24 04:40:42	0
7	Yolo link fixing	2017-05-23 22:01:46	1.0	2017-05-23 22:01:40	0
8	Should https://github.com/chef/chef/pull/6156 get added too? i missed adding it to the release notes in my PR	2017-05-23 21:19:08	1.0	2017-05-23 21:42:14	0
9	Might also be cool to do this for `node['platform_version']`, in the Ohai loading we could do something like `automatic['platform_version'] = VersionString.new(automatic['platform_version'])`.	2017-05-23 16:00:35	1.0	2017-05-31 01:32:43	0
10	The `===` hack might be too much, would be cool if everyone else wants to just do the fancy `=~` operator and skip the `case` magic.	2017-05-23 16:09:09	1.0	2017-05-31 01:32:43	0
11	yeah probably not the monkeypatching of `===`	2017-05-25 21:09:01	1.0	2017-05-31 01:32:43	0
12	Okay, the `===` trickery is gone and chef-config is no longer wrecked :)	2017-05-26 05:04:25	1.0	2017-05-31 01:32:43	0
13	chefstyle needs care and feeding	2017-05-30 15:35:14	1.0	2017-05-31 01:32:43	0
14	And now fingers crossed that this doesn't some how jam the bumpbot :)	2017-05-31 02:53:30	1.0	2017-05-31 01:32:43	0
15	I would rather we just leave it as invalid and surface the bundler error to the user. It's just like you've requested an invalid cookbook dependency, should be a fatal error not a warning.	2017-05-22 13:38:21	0.0		1
16	"Unfortunately, it would be totally valid that two cookbooks want to install the same gem with the same options (e.g. install from the same git repo), but currently it would produce an invalid Gemfile in that case. 

EDIT: Ah, nvm you mean replacing the warning with a fatal error. Yes that makes sense."	2017-05-22 13:41:13	0.0		0
17	"We should check that the values are ""compatible"" then, i.e. make sure it's still an error if two cookbooks do actually request differing versions of the same gem and whatnot."	2017-05-22 13:45:46	0.0		0
18	"I changed the request to fail directly whenever we would have directly conflicting requirements. Further checking if values are ""compatible"" might be quite complicated and is probably better done by Bundler."	2017-05-22 15:04:20	0.0		0
19	I think we need to get to a point where running these tests on a FIPSified system actually ensures FIPSiness, so let's pass through the read. I want to get a FIPS windows node and a FIPS linux node in to the test matrix soon.	2017-05-19 15:55:54	0.0		0
20	"makes me a bit twitchy.  should really be `allow(::File).to recieve(:read).and_call_original` (which is much clearer that the problem is that you're working around the stub on the next line blocking other arguments).

and it feels like it should a bit more explicitly test this.  setup the non-fips case and explicitly mock it out to run non-fips even on a fips box, and then mock it to fips and make sure the behavior is correct even on a non-fips box."	2017-05-19 22:52:17	0.0		1
21	Closes: #6161	2017-05-17 15:44:28	0.0		0
22	We'll want to put the Ohai 6 plugin deprecation note in there for this release though	2017-05-17 16:27:50	0.0		0
23	looks correct.  it looks like we were testing the broken behavior so existing tests just need to be changed to return Systemd correctly, and the use cases for systemd+everything else at the same time all look right with everything defaulting to systemd except in the case where only an upstart script exists (which is probably not going to work anyways, but its certainly the best we could ever do and we can let the OS fail in that case...)	2017-05-15 21:43:43	1.0	2017-05-16 08:59:50	0
24	This is a super frustrating bug that I'd love to have fixed.	2017-05-15 21:53:38	1.0	2017-05-16 08:59:50	1
25	i could have sworn that the fixed behavior was the way it worked all along...	2017-05-15 22:03:18	1.0	2017-05-16 08:59:50	0
26	"yeah in 12.4.0 we had this test:

```ruby
    shared_examples_for ""an ubuntu platform with upstart, update-rc.d and systemd"" do
      before do
        stub_service_providers(:debian, :invokercd, :upstart, :systemd)
      end

      it ""when only the SysV init script exists, it returns a Service::Debian provider"" do
        allow(Chef::Platform::ServiceHelpers).to receive(:config_for_service).with(""ntp"")
          .and_return( [ :initd, :systemd ] )
        expect(resolved_provider).to eql(Chef::Provider::Service::Systemd)
      end
```

so this likely broke in 12.5.1"	2017-05-15 22:06:27	1.0	2017-05-16 08:59:50	0
27	"Looks like it was actually always broken with the new solver
https://github.com/chef/chef/commit/97aaf5bbcdfd0810722b123bdc67e883a7ca8077#diff-78041db52b95a34ebfc3d06c264438a3R80 in `12.0.0.rc.0`"	2017-05-15 23:07:46	1.0	2017-05-16 08:59:50	1
28	travis+appveyor hate you but the code looks right	2017-05-15 19:43:44	1.0	2017-05-16 10:41:27	0
29	"Hey @coderanger, what's the fundamental problem (or problems) you're trying to solve with such a change? Is pulling the OSS docs out of chef-web-docs the only way to achieve it/them?

As a member of the doc team, I'm strongly in favor of keeping the docs together and feel having the OSS content split into their respective repos would lead to a poor user experience overall. Scenario content that crosses multiple technologies, having a common IA, and keeping one place for people to submit doc updates are a few reasons that I have for keeping all of the content in one repo.

Instead of having this conversation in PR comments, I'm open to discussing this through zoom with folks, in-person at ChefConf, or in some other fashion.

"	2017-05-14 03:51:55	0.0		1
30	This makes me nervous as a structural thing. If a user requests a depth, we should probably honor that or error clearly.	2017-05-12 20:38:39	0.0		1
31	"@coderanger you have a valid point. :)  

We use this for specific instances where both uploadarchive.allowUnreachable and uploadpack.allowReachableSHA1InWant are enabled on the git server.  This allows pulls/fetches using any commit id not just advertised references.  This type of un-shallowing is also used within some builds systems for similar conditions.

If it would be better to explicitly fail under this condition for the largest group of consumers then we probably shouldn’t change the behavior.  If we think it would be useful and warrants the addition or change to the attributes/actions on the resource I can certainly provide that as well.

Let me know either way what your opinion is on this.  We have this code as a stand-alone cookbook and leverage the DSL that way, so if this PR isn’t accepted it isn’t the end of the world.  I just wanted to provide the community with an opportunity to have this functionality available natively if desired. :)

Thanks!"	2017-05-12 20:50:46	0.0		0
32	I'm not sure the targeted for chef 15 deprecations should be here.	2017-05-12 17:15:40	0.0		1
33	It looks like I'm missing the DCO portion of this request.  I'll address this and resubmit.  Thanks everyone! :)	2017-05-12 16:45:55	0.0		0
34	I'll resubmit with the DCO requirements in place.  Thanks!	2017-05-12 19:56:57	0.0		0
35	@joshburt You can just force push to your branch after running `dco sign`.	2017-05-12 20:05:11	0.0		0
36	@coderanger  oooh!  Thanks, I've already redone this PR but will definetly use that for next time. :)	2017-05-12 20:37:00	0.0		0
37	"CI failure. Test server not starting. 

jenkins, test this"	2017-05-31 21:57:51	0.0		1
38	5.5/5.x: 41087efb6	2017-05-31 21:19:24	1.0	2017-05-31 21:18:58	0
39	5.5/5.x: 8d8438f79	2017-05-31 20:59:24	1.0	2017-05-31 20:58:58	0
40	jenkins test this	2017-05-31 19:31:19	0.0		0
41	CC @archanid 	2017-05-31 18:47:32	1.0	2017-05-31 20:52:20	0
42	jenkins, test this	2017-05-31 18:56:54	1.0	2017-05-31 20:52:20	0
43	"Backported to:
* 5.3 by 0d3fb688d2e943f20edef881085189b10bdff2af
* 5.4 by 8cb3065fea8f70c7c9bab1021ac9899f38455abf
* 5.x by e3d038cacf6c0503bc9a3f957807e76e057165a9"	2017-05-31 20:55:36	1.0	2017-05-31 20:52:20	0
44	revert in https://github.com/elastic/logstash/commit/e01d247d5ed2442dee678c2b30b71702b8198825	2017-05-31 16:44:35	1.0	2017-05-31 15:39:14	0
45	"We have determined to not fix `--path.plugins`.  The flag will be deprecated in v5.5 and removed in v6.0.  As such, we do not need to fix multivalued options as we do not need them in this way.

Thanks for taking the time to write this.  We hope you continue to support and enhance Logstash in the future."	2017-05-31 16:49:26	0.0		0
46	LGTM.  Merged as 332a2017b36503805404b004b3e879643a0f6778.	2017-05-30 15:19:48	0.0		0
47	Nice to see the lambdas :)	2017-05-30 15:12:13	0.0		0
48	"Thanks, @eddumelendez. Rather than hard-coding some additional media types, I think it would be better to check for compatibility against `*/*+xml`. That would mean that standard media types like `application/xml`, `text/xml`, and `application/rss+xml` are all supported, as well as custom media types like `application/vnd.com.example+xml`

Would you like to update your PR to do that?"	2017-05-08 08:10:22	0.0		1
49	"@wilkinsona Thanks for your feedback. Glad to update the PR and now I'm doing the following

```java
private boolean isCompatibleWithXml(MediaType contentType) {
    MediaType xmlMediaType = new MediaType(""*"", ""*+xml"");
    return xmlMediaType.isCompatibleWith(contentType);
}
```

but since the type is ""*"" even ""application/json"" is valid for xml. Pretty sure I misunderstood something in the process to do this. Could you provide any hint? Thanks in advance."	2017-05-09 03:12:36	0.0		0
50	"Nope, you haven't misunderstood. Using a check against `*/*+xml` was wishful thinking on my part. We could check for `application/xml`, `text/xml`, `application/*+xml` and `text/*+xml` but that would still miss custom XML media types as well as things like `image/svg+xml`. 

I now think that the most robust approach would be to treat the content as JSON by default. If that throws an exception then try XML. If that throws an exception then give up."	2017-05-10 12:45:48	0.0		1
51	Thank you for your efforts here, @eddumelendez. There's more time pressure than usual here as 1.2.1.RELEASE is needed for Spring Boot 2.0.0.M1 so I've fixed #393 in https://github.com/spring-projects/spring-restdocs/commit/113976f2d9eb076e0f38e343629f23bea95155b9. Thanks anyway.	2017-05-12 11:41:03	0.0		0
52	Thank you for the PR, @eddumelendez, but there was a bit more to this. Please see the changes made in https://github.com/spring-projects/spring-restdocs/commit/41d537d06a20ae7eaf0d9edc51e1874ac05644a2 and https://github.com/spring-projects/spring-restdocs/commit/a8e1df3fd82d46ffce50e2e440a6e9b89b002f58 for the details.	2017-05-18 14:59:50	0.0		1
53	"@jd1 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=389)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=389) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."	2017-04-25 17:18:56	0.0		0
54	@jd1 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=389)!	2017-04-25 17:24:11	0.0		0
55	Well spotted! Thanks very much for the PR.	2017-04-26 13:49:49	0.0		0
56	Thank you	2017-04-24 12:47:53	0.0		0
57	Thank you	2017-04-10 09:37:09	0.0		0
58	Thanks once again	2017-03-31 10:41:46	0.0		0
59	You've done it again, @izeye! Thank you very much	2017-03-28 08:23:46	0.0		0
60	"Thanks for the PR.

> ResourceBundleConstraintDescriptionResolver's constructor will throw MissingResourceException

Did you mean `ResourceBundleConstraintDescriptionResolver` here? Its constructor doesn't do much and won't throw a `MissingResourceException` that I can see.

As things stand, when a constraint is encountered for which there is no description, `ConstraintDescriptions.descriptionsForProperty(String)` will throw an exception that identifies the constraint:

```
java.util.MissingResourceException: Can't find resource for bundle java.util.PropertyResourceBundle, key org.hibernate.validator.constraints.time.DurationMin.description
	at java.util.ResourceBundle.getObject(ResourceBundle.java:450)
	at java.util.ResourceBundle.getString(ResourceBundle.java:407)
	at org.springframework.restdocs.constraints.ResourceBundleConstraintDescriptionResolver.getDescription(ResourceBundleConstraintDescriptionResolver.java:157)
	at org.springframework.restdocs.constraints.ResourceBundleConstraintDescriptionResolver.resolveDescription(ResourceBundleConstraintDescriptionResolver.java:144)
	at org.springframework.restdocs.constraints.ConstraintDescriptions.descriptionsForProperty(ConstraintDescriptions.java:103)
```

I think that's a good thing as it makes it clear that there's a constraint that needs to be described. 

With your proposed change, the undescribed constraint will be ignored. As a result, the documentation may fail to describe a constraint. This goes against the Spring REST Docs ethos which is to make your tests fail if your documentation is inaccurate or incomplete.

Have I misunderstood the intent of your change?"	2017-03-24 20:05:28	0.0		1
61	"My apologies, I mis-summarized the issue - the ExceptionInInitializerError is due to how I'm using Spring REST Docs, not in Spring REST Docs itself. I've updated the title and description of this issue appropriately.

Here's the stack trace:
```
java.util.MissingResourceException: Can't find resource for bundle java.util.PropertyResourceBundle, key org.hibernate.validator.constraints.time.DurationMin.description
        at java.util.ResourceBundle.getObject(ResourceBundle.java:450)
        at java.util.ResourceBundle.getString(ResourceBundle.java:407)
        at org.springframework.restdocs.constraints.ResourceBundleConstraintDescriptionResolver.getDescription(ResourceBundleConstraintDescriptionResolver.java:157)
        at org.springframework.restdocs.constraints.ResourceBundleConstraintDescriptionResolver.resolveDescription(ResourceBundleConstraintDescriptionResolver.java:144)
        at org.springframework.restdocs.constraints.ConstraintDescriptions.descriptionsForProperty(ConstraintDescriptions.java:103)
        at com.example.SomeTest.withPath(SomeTest.java:30)
```

And that line from `com.example.SomeTest.withPath` is:
```
new ConstraintDescriptions(MyEntity.class).descriptionsForProperty(""duration"")
```

Where `MyEntity.duration` is defined as:
```
@org.hibernate.validator.constraints.time.DurationMin(days=7)
private Duration duration;
```

I'm using Hibernate Validator 6 to get DurationMin, which if you're using Spring Boot and Maven, can be done by adding these properties to pom.xml:
```
<hibernate-validator.version>6.0.0.Alpha1</hibernate-validator.version>
<javax-validation.version>2.0.0.Alpha1</javax-validation.version>
```

I don't think it makes sense for `org.springframework.restdocs.constraints.ConstraintDescriptions.descriptionsForProperty` to throw `MissingResourceException` - if no descriptions are found, I would (and did) expect it to return an empty list, and that's the change this PR makes."	2017-03-24 20:51:04	0.0		1
62	"Thanks.

> I don't think it makes sense for `org.springframework.restdocs.constraints.ConstraintDescriptions.descriptionsForProperty` to throw MissingResourceException - if no descriptions are found, I would (and did) expect it to return an empty list, and that's the change this PR makes.

Ok, so I'd understood the intent correctly. Here's what I said about this above:

> With your proposed change, the undescribed constraint will be ignored. As a result, the documentation may fail to describe a constraint. This goes against the Spring REST Docs ethos which is to make your tests fail if your documentation is inaccurate or incomplete.

Thanks again for the PR, but I want to keep the current behaviour."	2017-03-24 20:54:38	0.0		1
63	"Makes sense, and thank you for the rapid and thoughtful response.

How do you suggest such a situation be handled? Obviously, eventually Spring REST docs will have the properties file updated for the new annotations, but what do you recommend users do in the mean time? For example, is there a different, user controllable properties file that one could update to document such constraints?"	2017-03-24 21:56:08	0.0		0
64	">  is there a different, user controllable properties file that one could update to document such constraints?

Yes: http://docs.spring.io/spring-restdocs/docs/current/reference/html5/#documenting-your-api-constraints-describing"	2017-03-24 22:01:04	0.0		0
65	Thanks for the feedback. I think I can do the changes but this may take until the next weekend.	2017-02-28 20:15:58	0.0		0
66	"I have updated the code and rebased it (so that the code comments above are broken sorry for that 🙂  ). 
Major changes:
* the include without any snippets will include every snippet in the operation directory
* the level of the include will be derived from the parent block level"	2017-03-04 21:45:44	0.0		0
67	Thanks, @meistermeier. Did you miss some files when you made the update? The new tests are failing for me because they can't find the `build/generated-snippets/some-operation` directory	2017-03-06 15:13:54	0.0		1
68	There went something completely wrong with the update...so I went down in the code dungeon and found some commits with loose endings ;)	2017-03-06 22:38:51	0.0		1
69	"@meistermeier I've merged this into master. Thank you very much for the contribution.

@mojavelinux We couldn't have done this without your help. Thank you very much."	2017-03-07 17:36:11	0.0		0
70	REST Docs' code style is to only use `final` when it's required	2017-02-28 12:29:41	0.0		0
71	I think this should be called `OperationBlockMacro` and the file itself should be called `operation_block_macro.rb`	2017-02-28 12:32:20	0.0		0
72	I think we could use `parent.level` to figure this out automatically	2017-02-28 12:35:40	0.0		1
73	I don't think the macro should be called `srd` as that would seem to imply the REST Docs will only ever have a single block macro. There doesn't seem to be a tradition of trying to namespace macro names in Asciidoctor so I'm tempted to go with `operation` instead.	2017-02-28 12:38:08	0.0		1
74	I'm intrigued by this test. What was the reasoning behind adding nothing? I would expect this to either produce an error or to include all of the snippets for a particular operation. My preference is for the latter but I'm not set on that.	2017-02-28 12:40:41	0.0		0
75	"I think using [`fetch`](https://ruby-doc.org/core-1.9.3/Hash.html#method-i-fetch) would make this read a bit better:

```ruby
attrs.fetch('snippets', '').split(',')
```"	2017-02-28 12:48:22	0.0		1
76	"I think using `File.join` and some string interpolation would improve the readability here. Something like:

```ruby
File.join(params[:snippet_dir], params[:operation], ""#{snippet}.adoc"")
```"	2017-02-28 12:54:03	0.0		1
77	I'd use string interpolation here too	2017-02-28 12:54:51	0.0		1
78	I'd use string interpolation here too	2017-02-28 12:55:00	0.0		1
79	This should be named `…Tests` to match the other tests classes	2017-02-28 12:56:00	0.0		1
80	My preference would be to store the expected content in files in `src/test/resources`	2017-02-28 12:57:15	0.0		1
81	Now it adds every exiting snippet in the operation folder.	2017-03-04 21:39:24	0.0		0
82	Thanks for the PR, @eddumelendez. Unfortunately, the discussion in #347 didn't reach a conclusion. All of the proposed options, including the one implemented here, had some downsides. I am not convinced that the benefits of any of them outweigh the downsides so I'm going to close this.	2017-02-21 07:57:33	0.0		0
83	Sorry, but I don't want to make that class public. Can you please open an issue and we can explore another solution. I suspect that a Mustache lambda will be the answer. REST Docs already has one for escaping `|` characters in Asciidoctor tables.	2017-02-18 16:44:23	0.0		1
84	"Thanks for the PR. This looks good; I really like the simplicity of it. I do wonder if it might benefit from being hidden behind an abstraction though.

When I was looking at #261 I had something like a `CommandFormatter` in mind that would take a list of Strings, each of which should be kept on one line. The formatter could then either concatenate them with ` ` separators, with `\\%n` separators, or whatever someone wants to implement. A particular formatter could be used by default, and could be configured using `SnippetConfigurer` or by passing one into new overloaded methods on `CliDocumentation`."	2017-02-13 16:39:09	0.0		1
85	"@wilkinsona Thanks!

As for your additional remarks: I was thinking about injecting a `CommandFormatter` object to both `CurlRequestSnippet` and `HttpieRequestSnippet` and using it for printing the output. But then I realized that it's not that simple. 
Let's look at the example from the initial issue:

```
$ curl 'http://localhost/foo' -i -X POST \
   -H 'X-Header-One: ONE' \
   -H 'X-Header-Two: TWO' \
   -d 'a=alpha&b=bravo'
```

Some `curl` parameters are printed after a newline and some are not (`-i -X POST`). This means that there are actually two different separators in use here. I see two possible options for dealing with this:

1. Injecting 2 instances of `CommandFormatter` and passing parameters to one or the other
2. Constructing a `CommandFormatter` object by passing two separators to it and then maintaining both parameter lists inside it.

Option 2 seems to be better for me but I'd like to reach a decision before implementing this. What do you think?"	2017-02-16 20:08:35	0.0		0
86	"I wonder if we could keep it simple and have the curl snippet be somewhat opinionated about where line breaks could go. It could pass the following to the formatter:

- `curl 'http://localhost/foo' -i -X POST`
- `-H 'X-Header-One: ONE'`
- `-H 'X-Header-Two: TWO'`
- `-d 'a=alpha&b=bravo'`

The formatter would treat each of those 4 items as a String that should not be broken onto multiple lines. The formatter is then free to join those four strings in whatever way it deems appropriate, keeping them all on one long line, splitting it over 4 lines, etc."	2017-02-16 20:17:53	0.0		1
87	@wilkinsona I have created the `CommandFormatter` class and applied it to the curl and HTTPie snippets. What do you think about it?	2017-02-18 17:11:28	0.0		0
88	@wilkinsona I've updated the PR as we discussed, please take a look.	2017-03-12 19:05:49	0.0		0
89	@tkopczynski Thanks	2017-03-13 19:44:47	0.0		0
90	Thanks again for the PR. This change is now in master.	2017-03-20 20:34:56	0.0		0
91	Great, thanks for the review @wilkinsona 	2017-03-20 22:23:11	0.0		0
92	Could you make this an interface, please? There could be a single implementation provided out of the box. Something like `ConcatenatingCommandFormatter` that takes a separator as a constructor argument.	2017-02-20 09:08:18	0.0		1
93	OK, I think I managed to introduce the `ConcatenatingCommandFormatter` class as you proposed.	2017-02-20 22:16:56	0.0		0
94	There should be an overloaded variant of this method that takes a command formatter and attributes	2017-03-06 13:51:24	0.0		1
95	There should be an overloaded variant of this method that takes a command formatter and attributes	2017-03-06 13:51:36	0.0		1
96	Looks like this is only used in the tests. I don't think it's needed.	2017-03-06 13:52:02	0.0		1
97	The contract shouldn't mention the use of a separator. The job of the formatter is simply to format a number of elements into a single string.	2017-03-06 13:52:39	0.0		1
98	The method description shouldn't mention concatenation as that can just be an implementation detail. The contract of format is to take a number of elements and turn them into a single string.	2017-03-06 13:53:32	0.0		1
99	This constructor should call `super` with all the other constructors calling this one	2017-03-06 13:54:25	0.0		1
100	This should be `final` with its initialisation happening in the constructor	2017-03-06 13:55:09	0.0		1
101	This should be final with its initialisation happening in the constructor	2017-03-06 13:55:42	0.0		1
102	This constructor should call super with all the other constructors calling this one	2017-03-06 13:56:07	0.0		1
103	I'd prefer that the existing tests were largely unaffected by the introduction of the `CommandFormatter`. That could be done by leaving the content assertions as they were, but creating the snippet with a single-line formatter.	2017-03-06 13:58:22	0.0		1
104	This constructor should be deprecated and a new constructor that takes a `CommandFormatter` introduced	2017-03-06 14:00:37	0.0		1
105	This constructor should be deprecated and a new constructor that takes a CommandFormatter introduced	2017-03-06 14:01:04	0.0		1
106	You could use `CollectionUtils.isEmpty()` here	2017-03-06 14:02:50	0.0		1
107	I think I'd prefer it if this were package-private	2017-03-06 14:03:13	0.0		1
108	I think this static method would be better on `CliDocumentation`. I'd be tempted to call it `multiLine` or `multiLineFormat`.	2017-03-06 14:04:02	0.0		1
109	I think this static method would be better on `CliDocumentation`. I'd be tempted to call it `singleLine` or `singleLineFormat`.	2017-03-06 14:04:20	0.0		1
110	I'm not sure we need this	2017-03-06 14:04:37	0.0		1
111	If the static methods are moved, this test could be simplified to just check that no elements results in an empty string. It would be good to have a similar test for `null` too.	2017-03-06 14:05:35	0.0		1
112	I think this could be simplified to just test against a single formatter with whatever separator too	2017-03-06 14:06:03	0.0		1
113	I think this could be simplified to just test against a single formatter with whatever separator too	2017-03-06 14:06:13	0.0		1
114	I'd prefer that the existing tests were largely unaffected by the introduction of the CommandFormatter. That could be done by leaving the content assertions as they were, but creating the snippet with a single-line formatter.	2017-03-06 14:06:46	0.0		1
115	It's good to have tests for the curl snippet with different command formatters, but there's nothing MockMvc-specific about it so I don't think they belong here.	2017-03-06 14:07:54	0.0		1
116	It's good to have tests for the HTTPie snippet with different command formatters, but there's nothing MockMvc-specific about it so I don't think they belong here.	2017-03-06 14:08:26	0.0		1
117	It's good to have tests for the curl snippet with different command formatters, but there's nothing REST Assured-specific about it so I don't think they belong here.	2017-03-06 14:08:47	0.0		1
118	Just a quick question about this one: deprecating this constructor would mean that I would have to touch every test in `CurlRequestSnippetTests` to switch to a different constructor. Is that ok for you?	2017-03-07 19:07:50	0.0		0
119	"I was torn on this earlier when I was reviewing the change but, while annoying, I think it's probably the right thing to do. It's what I was getting at when I said ""but creating the snippet with a single-line formatter"" in my comment on the tests below.

My motivation was that I wanted the opinion on what the default formatter should be to be in a single place. `CliDocumentation` seemed to make sense as it can then pass the default formatter into `CurlRequestSnippet` and `HttpieRequestSnippet`. 

I was also envisaging a further change where the default moves to `SnippetConfigurer` and it'll apply it to the default `CurlRequestSnippet` and `HttpieRequestSnippet` that it creates. The would lead to the deprecation of `curlRequest()` and `httpieRequest()` on `CliDocumentation` as well.

As I said, I was torn on this so if you don't think the reasoning above is sound I'd really like to hear any counter arguments."	2017-03-07 19:47:31	0.0		0
120	"OK, I understand now. I'm also in favour of putting the default formatter in one place, I just wasn't sure where should it be. After looking at the code again I think that `CliDocumentation` should be a good enough place to put it there.

But, to have it done in a clean way I would propose the following changes:

- `CurlRequestSnippet`: create a copy of all constructors with an additional `commandFormatter` parameter and deprecate the old ones
- `CliDocumentation`: create additional `curlRequest` method that takes `attributes` and `commandFormatter` parameters. Additionally, change all existing `CurlRequestSnippet` constructors so that they will receive the default formatter.
- `CurlRequestSnippetTests`: add the additional formatter parameter to each `CurlRequestSnippet` constructor or call the appropriate `CliDocumentation` method. The former option feels better since these are the `CurlRequestSnippet` tests.

I do understand that this is more or less the same that you have proposed in the first place but now it's written in one place and it's easier for me to see the whole picture."	2017-03-09 19:34:29	0.0		1
121	Sounds good to me. Thanks very much.	2017-03-09 20:04:23	0.0		0
122	No clue why the maven step fails in travis and I am aware that there should be an additional rebase afterwards.	2017-02-09 07:45:39	0.0		1
123	As discussed in #323, it looks like we can do this with a block macro processor written in Ruby so I'm going to close this one. Sorry for the wasted effort, @meistermeier.	2017-02-22 19:42:23	0.0		0
124	Thanks for the PR, @fbenz. The change is now in master.	2017-01-30 17:15:06	0.0		0
125	"This one's proving tricker than I thought it would. I think I'd like the response cookies to be available from `OperationResponse` in the same way that they are now available from `OperationRequest`. It's not totally straightforward, though.

With the cookies available via a `getCookies()` method we'd have to figure out what to do with the `Set-Cookie` header. With REST Assured there'd be the same information in two places. With MockMvc, the cookies would just be available from `getCookies()` unless we explicitly set the header as well (as is being proposed here). Having the same information in two places has caused [problems in the past](https://github.com/spring-projects/spring-restdocs/issues/286) so we need to tread carefully.

I'll give it some more thought."	2017-02-03 14:18:21	0.0		0
126	"I was thinking about this doubled information as well. I came to the conclusion that cookie information should be expressed as a header in OperationResponse (this is why I didn't convert cookies from `getCookies()` method in `RestAssuredResponseConverter`). My reasoning for that was that cookies from a `Set-Cookie` header carry some additional information apart from the name and a value (like domain, HttpOnly flag, etc.) and it would be better to just pass them in `RestAssuredResponseConverter`.
Now that I'm thinking about it, I'm getting more convinced that maybe it would be better to have this information structured in a more object-oriented fashion and create a `ResponseCookie` class (similar to the `RequestCookie` you've introduced).

I'll update this PR accordingly when we reach a decision (I see that I need to do a rebase anyway).

I probably should have mentioned this problem in the PR description, sorry about that."	2017-02-05 10:10:10	0.0		1
127	REST Assured and Jersey's test client (for which there's third-party REST Docs support) both set the `Set-Cookie` header automatically. It'd be nice of MockMvc wasn't the odd one out. MockMvc is also a bit inconsistent on its own: if you use a setter to configure the content type of a request or response it automatically sets the `Content-Type` header as well. I've opened [SPR-15225](https://jira.spring.io/browse/SPR-15225) to see if removing that inconsistency is a possibility. The outcome of that issue will probably tell us what is the right thing to do here.	2017-02-06 10:52:19	0.0		0
128	It looks like SPR-15225 is going to be fixed, but only in 5.0. I think that means we should proceed with setting the `Set-Cookie` header for MockMvc but only if it hasn't already been set. That should allow REST Docs to work with both Spring Framework 4.3 and 5.0.	2017-03-08 17:12:43	0.0		1
129	@wilkinsona I updated the PR. Is it what you had in mind?	2017-03-09 20:14:17	0.0		0
130	Yes, thanks. This looks good. We talked above about making the cookies in the response available from `OperationResponse` but I think that can wait until #306.	2017-03-13 20:37:34	0.0		0
131	Thanks again, @tkopczynski. This is now in master.	2017-03-13 20:49:29	0.0		0
132	Great! Thanks @wilkinsona for merging this	2017-03-13 22:20:07	0.0		0
133	"@lovachittumuri Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=337)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=337) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions."	2016-12-20 22:09:49	0.0		0
134	@lovachittumuri Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=337)!	2016-12-20 22:13:19	0.0		0
135	This appears to have been opened in error	2017-01-03 10:39:53	0.0		0
136	Nice! Thanks for the PR	2016-12-29 14:56:59	0.0		0
137	"@wilkinsona I'm glad you like it.
I'd like to continue this with a PR to support cookies in response snippets. It feels that I would need to use some of the code written already here, so what are your plans on merging this?"	2016-12-29 20:01:53	0.0		0
138	@tkopczynski Soon, I hope. I'm just catching up after the holidays. Sorry for the delay, but it will definitely be in 1.2.0.RC1.	2017-01-03 21:55:25	0.0		0
139	Thank you	2016-12-16 14:34:12	0.0		0
140	"Thanks for the PR. What's the problem that it is trying to address? I had imagined that a service could be tested locally using whatever context path is required and the host, scheme, and port can then be modified to reflect the real service. 
"	2016-11-16 08:54:00	0.0		1
141	"We are using Zuul as a gateway for our microservices. So we write our tests locally and we would like to modify the URI to the URI as it is exposed on the gateway, i.e. including the context path as it is configured in our Zuul routes.
"	2016-11-16 09:14:55	0.0		0
142	"Rather than modifying the URI to have a different context path, why not just run your micro service locally with that context path when you're generating its documentation?
"	2016-11-16 09:23:53	0.0		1
143	"You mean by overriding it in the test configuration to 'fake' the path being used by the gateway?  I thought it would be nicer to have it explicitly defined.  It would also allow me to specify the zuul specific configuration all together in the same place (scheme/host/port/path).
"	2016-11-16 10:35:32	0.0		0
144	"> You mean by overriding it in the test configuration to 'fake' the path being used by the gateway?

Yes. For example, if it were a Spring Boot app, you'd just set `server.context-path=/foo` when running the tests that generate the documentation.

> It would also allow me to specify the zuul specific configuration all together in the same place (scheme/host/port/path).

I can see the benefit to that, but, assuming that you can ""fake"" the context path, I'm not yet convinced that the added complexity in REST Docs is worth it.
"	2016-11-16 11:04:45	0.0		1
145	"Ok, I will rewrite my tests like you suggest, and maybe create some reusable factory methods reading the zuul configuration, which will also allow me to have it in one place.
"	2016-11-16 14:01:25	0.0		0
146	Thank you	2016-12-16 14:45:41	0.0		0
147	"Since there is a build failure with the maven sample, should I do the PR against the 1.1.x branch?
"	2016-11-02 22:01:49	0.0		0
148	"Thanks for the PR. I'm not sure what's wrong with Travis and haven't had time to investigate. The build's [green on Bamboo](https://build.spring.io/browse/SRD-PUB). A change to base off 1.1.x would be great please. That's the branch where I'd like this to land.
"	2016-11-02 22:08:44	0.0		1
149	"Closing in favour of #329
"	2016-11-03 07:06:11	0.0		1
150	"@luisdeltoro Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=314)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=314) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.
"	2016-10-15 14:35:53	0.0		0
151	"@luisdeltoro Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=314)!
"	2016-10-16 20:47:40	0.0		0
152	"Thanks for the PR, @luisdeltoro. The fix is now in 1.1.x and master.
"	2016-10-25 10:37:18	0.0		0
153	"Without making some other changes, this isn't quite right. `TemplatedSnippet` deliberately doesn't think in terms of files. It just cares about a `Writer` then can write output to wherever you want. The change proposed here would make `TemplateSnippet` aware of file-based output.

I see the need for some more flexibility, though. At the moment the snippet name is used for two purposes:
1. To find the snippet's template
2. To resolve the `Writer`

Would separating these two so that the same template can be used to write multiple, differently named snippets do what you need?
"	2016-10-11 12:35:27	0.0		1
154	"Probably. It comes to the same thing in the end. We need the template location and the output file not to share a name necessarily.
"	2016-10-11 15:09:28	0.0		1
155	"Ok. Thanks for the PR. I've opened #320 to implement the alternative approach.
"	2016-10-25 09:56:24	0.0		0
156	"@meistermeier Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=310)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=310) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.
"	2016-10-09 21:19:02	0.0		0
157	"@meistermeier Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-restdocs&pullRequestId=310)!
"	2016-10-09 21:22:11	0.0		0
158	"take a look at my issue comment to see how-to-use https://github.com/spring-projects/spring-restdocs/issues/297#issuecomment-252513847
"	2016-10-09 22:19:26	0.0		0
159	"After I realized how the imports are ordered in the project I thought it might be a benefit to have the same in the samples. Is there any convention to use a ""fixed"" ordering in the productive code but not in the samples?
It is ok for me to revert this since it is not the scope of the PR/issue and split it in two PRs :)
"	2016-10-10 09:08:27	0.0		0
160	">  Is there any convention to use a ""fixed"" ordering in the productive code but not in the samples?

Unfortunately not. The samples are different for no better reason than they haven't been set up with the same code formatter settings.

> It is ok for me to revert this since it is not the scope of the PR/issue and split it in two PRs :)

Yes, of course. Thanks.
"	2016-10-10 09:15:11	0.0		0
161	"Update done. I don't know if there is any automated github notification ;)
"	2016-10-10 10:25:02	0.0		0
162	"I resolved most of the review points (see https://github.com/spring-projects/spring-restdocs/pull/310#discussion_r82660211). Now the changes should be backward compatible and I removed the system property as a configuration option.
Btw. thanks for the clear and helpful review.
"	2016-10-10 18:57:08	0.0		0
163	"Not at all. Thank you for the contribution.

There are just a couple of things missing now:
1. Updates to the samples to use the new macro
2. Updates to the docs

I'm happy to take care of those as part of merging this, but if you'd like to tackle them it'd be much appreciated.
"	2016-10-12 16:21:10	0.0		1
164	"Started with the samples and found a bug in the plugin (or Asciidoctor(J)?) if I use the macro in two separated files (e.g. docs/docA.asc, docs/docB.asc) the second one will throw an exception on the first occurrence/execution of the macro. I will investigate the problem in the next days.
For documentation purpose an excerpt of the stacktrace:

```
Caused by: org.apache.maven.plugin.PluginExecutionException: Execution generate-docs of goal org.asciidoctor:asciidoctor-maven-plugin:1.5.3:process-asciidoc failed: org.jruby.exceptions.RaiseException: (TypeError) can't dup NilClass
at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:145)
at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
... 27 more
Caused by: org.asciidoctor.internal.AsciidoctorCoreException: org.jruby.exceptions.RaiseException: (TypeError) can't dup NilClass
at org.asciidoctor.internal.JRubyAsciidoctor.renderFile(JRubyAsciidoctor.java:345)
at org.asciidoctor.maven.AsciidoctorMojo.renderFile(AsciidoctorMojo.java:289)
at org.asciidoctor.maven.AsciidoctorMojo.execute(AsciidoctorMojo.java:180)
at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
... 28 more
Caused by: org.jruby.exceptions.RaiseException: (TypeError) can't dup NilClass
at org.jruby.RubyKernel.dup(org/jruby/RubyKernel.java:2029)
at RUBY.(:1)
at RUBY.(:1)
at org.jruby.gen.InterfaceImpl175128506.convertFile(org/jruby/gen/InterfaceImpl175128506.gen:13)
```

Short status update: Fixed the bug above but now struggling with reliable project dir and resulting snippet dir detection if maven or gradle are getting called from another directory than the project (base) directory.
"	2016-10-12 22:18:41	0.0		0
165	"Thanks for the PR, Gerrit. I've merged it in https://github.com/spring-projects/spring-restdocs/commit/3ac4a1acada45cacc0a7d394edf719315f26b054 and made some tweaks in 319bd13.

As I mentioned in a comment on #297, I realised that a macro was overkill. The tweaks update things to automatically configure the `snippets` attribute instead. This means that the normal `include` macro is used which has the added bonus of side-stepping the bug that you described above.
"	2016-10-21 21:46:00	0.0		0
166	"I also think that this is an cleaner solution than doing the conversion by hand that results in only HTML support. You could have still use PDF or something else but the old macro would have generated HTML content.
@roberpanzer and I chatted about this pull request and the possibilities in asciidoctor to use other backends with my block macro. There will only be a chance with asciidoctorj 1.6. to use other contexts than _pass_ to get asciidoctor to ""compile"" the file content without wrapping it in some kind of section.
There is still a problem with your changes and it is the same I mentioned above:
It will only work if you start maven or gradle in the project directory. It will search for the files relative to the execution directory / PWD.
One way to archive this is to use `document.getAttr(""docfile"")` or `document.getAttr(""docdir"")` (or maybe some other attribute you can find [here in the manual](http://asciidoctor.org/docs/user-manual/). Also thanks to Robert for giving me this hint.
"	2016-10-22 09:02:51	0.0		1
167	"I'm using `docdir` with Maven combined with the working directory to get a relative path from the `.adoc` file to the snippets. In my testing, this seems to work with multi-module builds but I may have missed something. I'm using `projectdir` with Gradle which makes things very straightforward. This all happens in https://github.com/spring-projects/spring-restdocs/blob/master/spring-restdocs-asciidoctor/src/main/java/org/springframework/restdocs/asciidoctor/SnippetsDirectoryResolver.java.
"	2016-10-22 09:12:40	0.0		0
168	"@meistermeier I've just realised that I missed your update above about having fixed the bug and the directory problem. Sorry. Out of interest, what was the cause of the bug?
"	2016-10-22 09:34:59	0.0		0
169	"Since I had to convert the file manually I needed a new instance of asciidoctor. After a few days thinking it has to depend on the options object in ruby, because this was the only object that was ""dupped"" in the source files, I realized that there is a create method that accepts the class path as a parameter. With this set to the class path of the current class it was working again.
"	2016-10-22 15:08:27	0.0		0
170	"This constructor needs to be kept, both to allow the output directory to be overridden and to maintain backwards compatibility.
"	2016-10-10 13:31:16	0.0		1
171	"This constructor needs to remain public, both to allow the output directory to be overridden and to maintain backwards compatibility.
"	2016-10-10 13:31:48	0.0		1
172	"While this class is deprecated (and might be removed before 1.2 is released), for the time being at least this constructor needs to be kept, both to allow the output directory to be overridden and to maintain backwards compatibility.
"	2016-10-10 13:33:24	0.0		1
173	"This is OS-specific so it doesn't belong in the repository's `.gitignore`. It should go in your own [global `.gitignore`](https://help.github.com/articles/ignoring-files/#create-a-global-gitignore) instead.
"	2016-10-10 13:34:50	0.0		1
174	"Why is this suppression necessary? 
"	2016-10-10 13:35:21	0.0		1
175	"This looks like a duplicate of line 7.
"	2016-10-10 13:35:48	0.0		1
176	"If this copy is necessary, I'd rather do it as part of the test than in the Gradle build so that it happens when running things in an IDE too.
"	2016-10-10 13:36:53	0.0		1
177	"`restdocs` is too generic as we may want to add more macros in the future. I think the macro should be called `snippet`. 
"	2016-10-10 13:37:51	0.0		1
178	"I don't think this class should be named as if it's specific to a particular macro. IMO, `RestDocsExtensionRegistry` is a better name.
"	2016-10-10 13:38:39	0.0		1
179	"I don't like the use of a system property.

REST Docs used one in the past but it didn't work well when running individual tests in an IDE. Typically, the system property is only set in `build.gradle` or `pom.xml` so you ended up with different configuration.

For now at least, I'm happy for people who don't want to use the conventional locations to have to override the location using the constructor argument to `JUnitRestDocumentation` or `ManualRestDocumentation` and continuing to use `include::`.
"	2016-10-10 13:42:37	0.0		0
180	"Asciidoctor needs to instantiate the macro using reflection(?). If I reduce the visibility of the constructor I get `org.jruby.exceptions.RaiseException: (TypeError) asciidoctor: FAILED: <stdin>: Failed to parse source, no public constructors for Java::OrgSpringframeworkRestdocsAsciidoctorExtensions::RestDocsSnippetBlockMacro`. I don't see any possibility to use another registration method and also provide the macro's block name.
"	2016-10-10 18:40:02	0.0		1
181	"Thanks!
"	2016-07-22 09:19:24	0.0		0
182	"Looks great. Thanks very much
"	2016-07-22 09:00:22	0.0		0
183	"Thanks again. I've merged this into master.
"	2016-07-22 10:13:33	0.0		0
184	"My pleasure!
"	2016-07-22 14:56:32	0.0		0
185	"Thanks once again, @izeye!
"	2016-06-24 08:31:27	0.0		0
186	"@mathieu-pousse This looks excellent. Thank you very much. I've made one comment on the commit.

If you haven't done so already, can you please [sign the CLA](https://github.com/spring-projects/spring-restdocs/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?
"	2016-06-23 16:19:06	0.0		0
187	"I see.

I did not implement anything here because I think users will firstly document the parts with org.springframework.restdocs.request.RequestDocumentation#partWithName and then document the content of the part. 

That implies org.springframework.restdocs.request.RequestPartsSnippet#verifyRequestPartDescriptors has already handled missing parts.

Let me know
"	2016-06-24 06:36:26	0.0		0
188	"That's certainly possible, but may not always be the case. I think it would be more in keeping with the rest of the project if it failed fast with an exception messaging indicating that the part doesn't exist.
"	2016-06-24 08:24:47	0.0		0
189	"yep, i am adding test cases and will add this exception.
Can I throw the same error as here
? org.springframework.restdocs.request.RequestPartsSnippetFailureTests#missingPart
?

On Fri, Jun 24, 2016 at 10:24 AM, Andy Wilkinson notifications@github.com
wrote:

> That's certainly possible, but may not always be the case. I think it
> would be more in keeping with the rest of the project if it failed fast
> with an exception messaging indicating that the part doesn't exist.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/spring-projects/spring-restdocs/pull/270#issuecomment-228286771,
> or mute the thread
> https://github.com/notifications/unsubscribe/AChQZwMP2MDvICraaDOLdmqKjMgANqthks5qO5RTgaJpZM4I88DY
> .

## 

_Mathieu POUSSE | *_06.28.89.08.43*\* |\* _@m_pousse_
_Zenika Ouest_
18, rue de la Monnaie
35000 RENNES
"	2016-06-24 08:26:23	0.0		0
190	"Yep, that'd be perfect. Thanks!
"	2016-06-24 08:32:29	0.0		0
191	"here we are
"	2016-06-24 09:45:11	0.0		0
192	"@mathieu-pousse Thanks again for the PR. The changes are now in master.
"	2016-10-25 15:00:15	0.0		0
193	"I wonder if this should fail fast here rather than failing later when a documented field in the part isn't found?
"	2016-06-23 16:16:10	0.0		0
194	"Thanks for the PR, @jlstrater
"	2016-06-27 15:25:36	0.0		0
195	"Thanks very much, @jlstrater
"	2016-06-27 15:25:56	0.0		0
196	"As I said on #260, I like the idea, however I have a feeling that this implementation is heavier than it needs to be. It is only a feeling at this stage. Sorry for not having anything more concrete at the moment, but I didn't want to appear to be ignoring this PR and I haven't yet had time to investigate whether or not my feeling is right or not.
"	2016-06-23 09:24:13	0.0		1
197	"@wilkinsona No worries. I know how it is with non trivial PRs. I kinda had the same feeling, about it being bloated. Maybe I was trying to make it _too_ configurable.
"	2016-06-24 01:18:23	0.0		0
198	"I disagree.  I like to see the table in the current alphabetical ordering.
"	2016-06-14 15:50:39	0.0		1
199	"I don't like the proposed ordering either and prefer alphabetical (although Grails is in the wrong place at the moment).

Perhaps it would make sense to split things up into three tables?
1. MockMvc (containing Spring Data REST and Spring HATEOAS)
2. REST Assured (containing Grails and REST Assured)
3. Advanced (containing Slate and TestNG)
"	2016-06-14 16:02:59	0.0		1
200	"Closing in favour of #266
"	2016-06-21 08:54:49	0.0		0
201	"Thank you. This should just manage to squeeze into 1.1.0. Have you [signed the CLA](https://github.com/spring-projects/spring-restdocs/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?
"	2016-05-30 18:04:20	0.0		0
202	"Sorry, please ignore the above about the CLA. I can see that you've already signed. Thanks again.
"	2016-05-30 18:07:46	0.0		0
203	"You're welcome. And yes, I signed the CLA first. Please let me know if you need the confirmation number.
"	2016-05-30 18:08:02	0.0		0
204	"Thanks for the PR, @marceloverdijk. The changes are now in master.
"	2016-05-24 13:01:57	0.0		0
205	"Thanks for the PR, @marceloverdijk. Have you [signed the CLA](https://github.com/spring-projects/spring-restdocs/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?
"	2016-05-24 11:31:11	0.0		0
206	"Yes, just signed the CLA.
"	2016-05-24 11:37:13	0.0		0
207	"Thanks again for the PR, it's been merged into master.
"	2016-05-24 13:01:39	0.0		0
208	"Thanks for the PR, @izeye. Merged into master in https://github.com/spring-projects/spring-restdocs/commit/1132fa275c5b6295412626decef8ece9664e8e2d
"	2016-05-24 12:25:41	0.0		0
209	"Thanks for the PR, but I don't want to duplicate information from the docs in the README. The details in the README are intended to describe what's required to build the project, while the reference docs describe the requirements to use REST Docs. I've opened #217 to clarify things, including linking to the reference docs from the README.
"	2016-04-02 14:46:31	0.0		1
210	"Merged (see https://github.com/spring-projects/spring-restdocs/commit/72aeed6bd2d79ed2aa89643606f888e8731a84a8). Thanks for the PR.
"	2016-04-04 10:18:42	0.0		0
211	"@rocketraman Thanks for the PR. This looks excellent. I've made a few comments on the diff/commits for your consideration.
"	2016-03-07 14:51:10	0.0		0
212	"> @rocketraman Thanks for the PR. This looks excellent. I've made a few comments on the diff/commits for your consideration.

Thanks for your review. I've made a bunch of the changes you requested, and commented on the others.
"	2016-03-07 16:56:49	0.0		0
213	"Unfortunately, I can't see your comments. I wonder if that's my fault for making some comments on your commits, rather than on the pull request diff? They may have got lost when you pushed up your latest changes. If you can remember what you said and where, would you mind posting the comments on the diff please?
"	2016-03-07 19:06:10	0.0		0
214	"> I wonder if that's my fault for making some comments on your commits, rather than on the pull request diff

Yeah, when I force pushed the updates those comments were lost along with the commits. I pushed branch ""httpie-old"" from my reflog and thankfully it looks like GitHub kept the comments against the old hashes... see them here:

https://github.com/rocketraman/spring-restdocs/commits/httpie-old
"	2016-03-07 19:28:53	0.0		0
215	"Reflog saves the day once again. Thank you. I've added a few responses. I think we're almost there now.
"	2016-03-07 19:52:08	0.0		0
216	"Round 2: everything resolved except for the filename issue with the process substitution. See my reply: https://github.com/rocketraman/spring-restdocs/commit/90b69f91fdbc258c05f8d51fca78be740f4bd406#commitcomment-16536698
"	2016-03-07 20:02:01	0.0		0
217	"Thanks again for the PR. I've merged it into master along with [a little bit of polish](https://github.com/spring-projects/spring-restdocs/commit/37e16bc308b08d465b0a3aee3adbeeaa70877b86).
"	2016-03-09 17:44:04	0.0		0
218	"> Thanks again for the PR. I've merged it into master along with a little bit of polish.

Great!
"	2016-03-09 17:50:56	0.0		0
219	"All of the authors of the original `CurlRequestSnippet` should also be credited here
"	2016-03-07 14:33:48	0.0		0
220	"`snippetName` and `attributes` do not need to be `final`
"	2016-03-07 14:34:19	0.0		1
221	"Alternatively an extra method `removeMatchingHeaders` could be added. 'guess its more or less a matter of taste (loose typing vs. API inflation)
"	2016-02-04 11:00:54	0.0		1
222	"Thanks for the PR.

I'm not keen on `removeHeaders` taking an `Object`. I do like that it lets you mix patterns and strings, but, IMO, that's outweighed by the loss of type safety. I'd prefer to either have `removeMatchingHeaders(String pattern)` or overload `removeHeaders` with `removeHeaders(Pattern pattern)`. I'm leaning towards the former as the user doesn't have to call `Pattern.compile` and the method name makes it clear that there's some matching involved.
"	2016-02-04 12:28:16	0.0		1
223	"Ok, updated the PR accordingly (and rebased)
"	2016-02-04 13:31:54	0.0		0
224	"@rhuss Thanks very much for the PR. I've merged it into master. I made a few changes along the way. Please take a look at https://github.com/spring-projects/spring-restdocs/commit/1131c9fa6ee7137f6b85dbbf183b39eb3321dec8 if you're interested.
"	2016-02-05 09:44:46	0.0		0
225	"Thanks for picking it up and also for tuning the code. Looks indeed nicer that way.
"	2016-02-11 09:54:56	0.0		0
226	"Thanks for the PR. I've merged the change into 1.0.x and master.
"	2016-01-27 17:20:00	0.0		0
227	"Oops. Thanks very much. Did you use a tool to find this? Checkstyle's integrated into the build and the CI jobs also run Sonar. Neither of them caught it.
"	2016-01-22 16:13:00	0.0		0
228	"Sonar should have the bug pattern but i don`t know if its activated on default. I found this with findbugs.
"	2016-01-22 16:17:38	0.0		0
229	"> Sonar should have the bug pattern but i don`t know if its activated on default.

Thanks. It's activated in the profile I'm using. Now I'm worried what else I have a false sense of security about…
"	2016-01-22 16:20:57	0.0		0
230	"Sorry that you found this confusing. The need to use `prepare-package` if you want to include the documentation in the jar file is mentioned in the call out referenced by (6):

> (6) If you want to package the documentation in your project’s jar you should use the `prepare-package` phase.

It's also mentioned again in the [Packaging the documentation](http://docs.spring.io/spring-restdocs/docs/current/reference/html5/#getting-started-build-configuration-maven-packaging) section:

> First, configure the Asciidoctor plugin so that it runs in the prepare-package phase, as described above

If you have suggestions for how to make this clearer, I'd definitely like to hear them. However, I can't merge this change in its current form as it'll mean that the sections mentioned above (among others) no longer make sense.
"	2015-12-17 22:32:49	0.0		1
231	"Thank you for your comment.
I found I had misunderstood.

Updated PR to explain the phase explicitly.
How do you think?
"	2015-12-18 08:52:46	0.0		0
232	"Having thought about this some more, I think it might be best to update the documentation to always use `prepare-package` for the phase. It'll be a lot simpler as it'll mean one set of instructions that'll work for those who want to embed the documentation in the jar and those that don't.
"	2015-12-18 10:36:53	0.0		1
233	"Thanks for the PR. As discussed above, I've decided to address the problem by recommending that the Asciidoctor plugin is always bound to the `prepare-package` phase. See #218 for that change.
"	2016-04-04 10:25:22	0.0		1
234	"Thanks very much for the PR. If that's all it takes to fix it, we should be able to get this into 1.0.1. Have you [signed the CLA](https://github.com/spring-projects/spring-restdocs/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?
"	2015-11-16 15:30:03	0.0		0
235	"Oh, sorry i missed that, signed the CLA a minute ago...

It is all to make documenting xml attributes available. Though detecting undocumented attributes is not part of that. Don't know if this is desirable...
"	2015-11-16 16:16:34	0.0		0
236	"I think that's fine, particularly for 1.0.1 as it would be a breaking change to require individual attributes to be documented.
"	2015-11-16 17:04:59	0.0		0
237	"I have signed the CLA and contributed to Spring projects before, e.g. [DiskSpaceHealthIndicator](http://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/actuate/health/DiskSpaceHealthIndicator.html).
"	2015-11-14 23:03:17	0.0		0
238	"I just pushed a second implementation based on the JsonPath library so that you can compare what the different implementations may look like.
"	2015-11-15 01:14:56	0.0		0
239	Thanks for the PR, but I haven't seen anyone else with this requirement so I'd prefer not to add support for it. 	2017-01-28 09:19:16	0.0		1
240	"Thanks for the PR. Unfortunately, I'm not keen on the approach you've taken for documenting path parameters, specifically the need to duplicate the path.

@johanhaleby Is there a way to ""capture"" the path in its original form, i.e. before any parameters have been replaced, so that they can be documented? The approach I took with MockMvc was to provide [a custom request builder](https://github.com/spring-projects/spring-restdocs/blob/master/spring-restdocs-mockmvc/src/main/java/org/springframework/restdocs/mockmvc/RestDocumentationRequestBuilders.java). I don't think that approach will work so well with REST Assured due to the chaining of method calls.
"	2015-10-23 16:50:28	0.0		1
241	"@wilkinsona Hmm as far as I can remember you cannot do this in REST Assured but I'm willing to add it if required. Is all you need the path before applying the path parameters (for example /{x}/{y})?
"	2015-10-23 18:03:23	0.0		1
242	"I agree the approach is not as elegant as the one you used for mockmvc. Unfortunately I did not find a similar way for rest-assured : the only solution I found was to pass the path as the parameter. If you think of a better solution I'd be glad to implement it. 

Best regards. 

> Le 23 oct. 2015 à 18:50, Andy Wilkinson notifications@github.com a écrit :
> 
> Thanks for the PR. Unfortunately, I'm not keen on the approach you've taken for documenting path parameters, specifically the need to duplicate the path.
> 
> @johanhaleby Is there a way to ""capture"" the path in its original form, i.e. before any parameters have been replaced, so that they can be documented? The approach I took with MockMvc was to provide a custom request builder. I don't think that approach will work so well with REST Assured due to the chaining of method calls.
> 
> —
> Reply to this email directly or view it on GitHub.
"	2015-10-24 16:35:13	0.0		0
243	"I'll be happy to make changes in REST Assured to make integration with rest docs smoother.
"	2015-10-24 16:55:19	0.0		0
244	"That'd be great. 
Thanks Johan. 

> Le 24 oct. 2015 à 18:55, Johan Haleby notifications@github.com a écrit :
> 
> I'll be happy to make changes in REST Assured to make integration with rest docs smoother.
> 
> —
> Reply to this email directly or view it on GitHub.
"	2015-10-24 17:43:53	0.0		0
245	"Just tell me what to do :)
"	2015-10-24 17:50:07	0.0		0
246	"@johanhaleby Could it be made available via the `FilterContext`?
"	2015-10-24 19:23:06	0.0		1
247	"@wilkinsona Sure. But should it include only the path or path + query? (see https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax)
"	2015-10-25 09:45:52	0.0		0
248	"@johanhaleby Thanks. Just the path, in its `/{foo}/{bar}` form, is sufficent for our purposes. The request spec's query parameters are already sufficient for dealing with the query string
"	2015-10-25 09:58:42	0.0		0
249	"May I ask what you think is a good name for the method in FilterContext? For example `getOriginalRequestPath` or  `getRequestPathWithPathParamNames`?
"	2015-10-25 10:31:11	0.0		0
250	"Looking at `FilterableRequestSpecification`, I'd be tempted to take inspiration from `getBasePath` and call it `getOriginalBasePath`. I'd also be tempted to add the method to `FilterableRequestSpecification` rather than to `FilterContext` as I originally suggested.
"	2015-10-25 11:01:13	0.0		1
251	"Thanks for your comments. However ""base path"" might not actually be the entire path. For example you could do like this in REST Assured:

``` java
RestAssured.basePath = ""/{x}"";
given().pathParam(""x"", ""something"").pathParam(""y"", ""else"").when().get(""/{y}""). ..
```

The ""original bash path"" would thus be ""/{x}"" but the ""original path"" probably ought to be ""/{x}/{y}"". I.e. the base path is prepended to the path specified in ""get"". This attracts me more to put the method in `FilterContext` since the ""original path"" will be a derived value (basePath + ""get path"") just as the other values in `FilterContext` (whether or not it was a good idea to put these values in `FilterContext` in the first place is another discussion :)).
"	2015-10-25 11:37:46	0.0		1
252	"I've added `getOriginalRequestPath` to `FilterContext` for now and published a new snapshot (2.6.1-SNAPSHOT). It requires the following repository if anyone want to try it out:

``` xml
<repositories>
        <repository>
            <id>sonatype</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
            <snapshots />
        </repository>
</repositories>
```

@wilkinsona Have I understand it correctly that you're working on better support for third-party libraries such as RestAssured in the next version of spring rest docs or is it already implemented?! (I haven't tried it myself). If so, should I try to make a proper release of REST Assured with this fix asap?
"	2015-10-25 14:05:35	0.0		0
253	"This is great. Thanks, @johanhaleby. The REST Assured support is still a work in progress that'll hopefully be part of 1.1.0. There's not rush for a REST Assured release. We can build against snapshots in the meantime.
"	2015-10-26 10:22:50	0.0		0
254	"@wilkinsona Thanks! I'll probably release a new version in 1-2 weeks. Just tell me if there's anything else I can do to ease integration with rest docs.
"	2015-10-26 11:39:30	0.0		0
255	"@wilkinsona I've now released REST Assured 2.7.0 that contains the `getOriginalRequestPath` method in `FilterContext` that you should be able to use.
"	2015-10-31 15:17:34	0.0		0
256	"@johanhaleby Thanks very much
"	2015-11-16 10:21:54	0.0		0
257	"@yleguern Thanks again for the pull request. I didn't use it in the end for the reasons we already discussed above. However, it was still very useful as it led to the improvement to REST Assured that @johanhaleby kindly made so that the path parameters could be documented.
"	2016-01-29 12:34:41	0.0		0
258	"Thanks for the PR, but the change you've made is incorrect.

The `sourceDir` is the location from which your main Asciidoc file(s) should be read. Your change means it will only find the individual snippets. Also, all tasks have `inputs.dir`, so whatever your problem was, that wasn't the cause.

Have you perhaps put your main Asciidoc file in the wrong place? When using Gradle they should go in `src/docs/asciidoc` by default.
"	2015-10-03 06:17:38	0.0		1
259	"Thanks a lot. I misunderstood that even the main asciidoc would be created as part of the task (blame it on my haste to implement something before reading the docs completely). Once I  corrected that, everything worked like a charm. 
Thanks for the clarification and this helpful project.
"	2015-10-10 18:59:42	0.0		0
260	"I've previously signed the CLA (for spring data), but can resign again if needed. 
"	2015-09-22 03:09:23	0.0		0
261	"Thanks for the PR. No need to sign the CLA again.
"	2015-09-22 15:42:33	0.0		0
262	"I've merged this into master. Thanks again, particularly for taking the time to add some tests
"	2015-09-22 17:16:07	0.0		0
263	"Of course! Test first :)

I have some free time right now, so I'll look through the open issues and see if there is anything I can help out with.  
"	2015-09-22 18:49:39	0.0		0
264	"I've merged this into master. Thanks for the PR.
"	2015-09-19 01:22:09	0.0		0
265	"Thanks for the PR. Testing with Gradle 2.6, continuous mode works fine for me in both the main docs and in the sample. Can you please describe what you were doing that you expected to trigger a build but it didn't?
"	2015-09-17 14:40:14	0.0		0
266	"Hi Andy, 

sorry, my mistake - I was running continuous mode in my project to and I didn't get the rebuild triggered. but now it seems to work without the need to change the gradle build. I also checked the asciidoctor plugin, they do use the InputDirectory annotation....

Anyway - keep up the good work :)
"	2015-09-17 14:43:20	0.0		0
267	"Thanks for the PR
"	2015-09-23 16:17:31	0.0		0
268	"Thank you. I think this might be better handled by having a `getContentAsString` method on `OperationRequest` and `OperationResponse`.  That way, the conversion can be performed in a central place for the benefit of any snippets that want to use the content as a string.

Would you be interested in updating this PR to do so?
"	2015-09-14 10:29:56	0.0		1
269	"@wilkinsona :ok: I agree with you. I will update PR to do so.
"	2015-09-15 00:11:18	0.0		0
270	"@wilkinsona I updated PR to have a `getContentAsString` method on `OperationRequest` and `OperationResponse`.
Please check PR.
"	2015-09-16 03:30:08	0.0		0
271	"Thanks again. Can you please [sign the CLA](https://github.com/spring-projects/spring-restdocs/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?
"	2015-09-17 13:18:57	0.0		0
272	"@wilkinsona I have signed the CLA.
"	2015-09-17 13:27:38	0.0		0
273	"Thanks once again for the PR. I've merged this into master along with some additional changes to honour the charset wherever the contents of a request or response are worked with as a String.
"	2015-09-23 16:20:23	0.0		0
274	"Thanks
"	2015-09-14 10:31:32	0.0		0
275	"Thanks. Have you [signed the CLA](https://github.com/spring-projects/spring-restdocs/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?
"	2015-09-10 10:12:30	0.0		0
276	"Yes, some minutes ago. Do you need the confirmation number?
"	2015-09-10 10:18:38	0.0		0
277	"No, we're good. Thank you.
"	2015-09-10 10:25:51	0.0		0
278	"Merged into master. Thanks again for the PR.
"	2015-09-16 21:46:04	0.0		0
279	"Merged into master. Thank you.
"	2015-09-09 10:48:26	0.0		0
280	"Thanks
"	2015-07-29 15:29:20	0.0		0
281	"Thanks very much. Merged with a few amendments.
"	2015-07-27 10:51:54	0.0		0
282	"@wilkinsona Thanks for the nice tool!
"	2015-07-27 11:58:39	0.0		0
283	"to make it easy :)
"	2015-07-27 14:46:01	0.0		0
284	"Thanks. I caught that one as part of the merge. See: https://github.com/spring-projects/spring-restdocs/commit/6f4fe4ea644d77d66985c249102c8abd3d44c59d#diff-1c885f4a0e9ffe753bc7f61ba4d69f3bR4
"	2015-07-27 15:01:21	0.0		0
285	"Just realized this does in fact not work.
I need the tests to be completed to have the snippets. And I can not run tests without processing the resources.
"	2015-07-02 13:20:21	0.0		1
286	"Thanks. Have you [signed the CLA](https://github.com/spring-projects/spring-restdocs/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?
"	2015-06-10 14:14:44	0.0		0
287	"Yep!
"	2015-06-10 16:10:09	0.0		0
288	"Merged. Thanks again for the PR.
"	2015-06-17 12:47:51	0.0		0
289	"Nice! Thanks very much.
"	2015-05-05 10:45:18	0.0		0
290	"Thank you. Have you [signed the CLA](https://github.com/spring-projects/spring-restdocs/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?
"	2015-04-29 09:07:02	0.0		0
291	"@wilkinsona I have signed the CLA (confirmation #84320140613071640).
"	2015-04-29 14:44:36	0.0		0
292	"Thanks again for the PR, I've merged it into master.
"	2015-04-30 13:51:44	0.0		0
293	"Well spotted. Thank you.
"	2015-04-21 11:33:32	0.0		0
294	"@openwms  you beat me to it, I was about to raise the same issue (haven´t prepared a pr yet, though). I don´t know if `startsWith` would work, though, since it would also match on application/json+something.  I´d rather `StringUtils.substringBefore(contentType, "";"")` and then make an equals-comparison
"	2015-04-20 07:49:01	0.0		1
295	"@openwms Thanks for the PR. I share @AGoliath's concern about the use of `startsWith`. Given the existing dependency on Spring Framework, I think the use of `MediaType.parseMediaType` is the safest option.
"	2015-04-20 08:44:48	0.0		1
296	"Perfect @wilkinsona . Fully agree with @AGoliath about the strictness. Sorry for the wildcard imports, thats a default behaviour of IntelliJ
"	2015-04-20 08:50:52	0.0		0
297	"@openwms Would you like to update the PR when you have a moment?
"	2015-04-20 09:24:09	0.0		1
298	"Hey @wilkinsona please have a look at the updated 2 classes
"	2015-04-20 16:00:12	0.0		0
299	"Thank you. I've merged the changes.
"	2015-04-21 10:05:42	0.0		0
300	"Please do not use wildcard imports
"	2015-04-20 08:45:12	0.0		1
301	"Please do not use wildcard imports
"	2015-04-20 08:46:25	0.0		1
302	"As mentioned in the main comments on the PR, I think this should use `MediaType.parseMediaType(contentType)`
"	2015-04-20 08:47:56	0.0		1
303	"Thanks
"	2015-04-20 09:09:04	0.0		0
304	"Thanks for the PR. I like the idea, but I'm not totally sold on the implementation.

There have already been requests for better support for XML payloads (see #46, for example) and I'd prefer not to add to the problem of things being too JSON-centric.

How about a `ResponseFormatter` abstraction that takes the response as input and returns the formatted content? The default implementation, `IdentityResponseFormatter` would simply return the content as-is. To enable pretty-printing, or any other sort of response post-processing, users could associate a `ResponseFormatter` implementation with a particular content type, perhaps via an API on `RestDocumentationConfigurer` that sets the formatters on `RestDocumentationContext`. Jackson-based implementations for pretty-printing JSON and XML could be provided.

The above-described changes would probably mean that there's only a single snippet produced, rather than one snippet for the formatted response and one for the unformatted response. I suspect that won't be a problem, though, as I can't imagine someone wanting to use both the formatted and the unformatted snippets in the same documentation. That's only a hunch. If you have real word experience the says otherwise, please do say so.
"	2015-04-20 09:23:27	0.0		1
305	"I've been thinking about this too, and I agree. We even have a need where we want to filter out headers from the response (for instance, it isn't useful documenting things like Cache-Control, Pragma or X-Frame-Options in every request). So a ResponseFormatter would be a useful abstraction where we can fine-tune exactly how headers are filtered and response bodies are formatted.

I agree that a single snippet is fine -- I was hoping to do that but because `documentHttpResponse` gets added to the list of delegates in the constructor, it is harder to fine-tune. Do you think the default set of delegates should be configurable? Or maybe this point becomes moot when we can inject our own ResponseFormatter.

Let me take another look at this and get back to you.
"	2015-04-20 10:09:07	0.0		0
306	"Interesting. I hadn't considered stripping out headers. I like that idea too. Given that capability, perhaps `ResponsePostProcessor` would be more appropriate? It's no longer just about formatting.

I haven't looked in detail to confirm that this'll work, but I think that `RestDocumentationResultHandler` could call the configured response formatters/post-processors and then call its delegates. There's no setter for an `MvcResult`'s response so I think the result would have to be copied to contain the new response. There may also be some hoops to jump through to produce a response with formatted content: judicious use of `setCommitted(false)` and `resetBuffer()` should do the trick.
"	2015-04-20 13:10:53	0.0		1
307	"@dewet22 Thanks again for opening this PR and for inspiring a large chunk of what I've implemented in e5f35c9. Those changes should be available in the latest snapshots. If you get a chance to try them out, I'd be interested to hear any feedback you may have.
"	2015-04-30 13:53:03	0.0		0
308	"Thanks, I have been playing with it since I saw the commit -- it is looking very good right now. As soon as I've converted over all of our current documenting actions, I'll get back with any feedback.
"	2015-04-30 14:02:29	0.0		0
309	"Merged. Thanks for the PR.
"	2015-04-20 08:51:54	0.0		0
310	"Ugh, I didn't want github to merge the two commits into one pull request. Let me know if you want me to split them out or not.
"	2015-04-18 15:55:44	0.0		0
311	"Thanks for the PR. Given that the changes are unrelated, would you mind splitting them out please? Also, if you haven't already done so, can you please sign the [CLA](https://support.springsource.com/spring_committer_signup)?
"	2015-04-18 18:29:45	0.0		1
312	"Certainly, I'll submit two new PRs.
"	2015-04-19 12:41:19	0.0		0
313	"Excellent. Thanks very much.
"	2015-04-20 08:52:19	0.0		0
314	"Merged. Many thanks for the PR.
"	2015-03-23 12:29:12	0.0		0
315	"Thanks. Have you [signed the CLA](https://github.com/spring-projects/spring-restdocs/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?
"	2015-03-16 11:10:08	0.0		0
316	"I just did.
"	2015-03-16 12:46:02	0.0		0
317	"Thanks for the PR. I've merged it with one notable change: I removed the logic for handling request parameters for POST requests as I'm not sure that it's necessary for a RESTful service and #26 was specifically looking to address GET requests.
"	2015-03-16 14:37:03	0.0		0
318	"Thanks for the merge.
But why did you remove the logic for `POST` requests ?
I think it's especially interesting in case of `POST` requests because I can't see no workaround to document `POST` requests with parameters : 

``` java
this.mvc.perform(MockMvcRequestBuilders
  .post(Constants.URL_GET_TOKEN)
  .param(PARAM_USERNAME, ""user"")
  .param(PARAM_PASSWORD, ""userpwd""))
  .andExpect(status().isOk())
  .andDo(document(""retrieveTokenViaPost""))
```
"	2015-03-16 15:18:07	0.0		0
319	"I tried to explain my reasoning above. The primary reason was because issue #26, which this PR was addressing, was specifically interested in GET requests. If there's a valid use case for POST requests then I'd prefer to tackle it in a separate issue.
"	2015-03-16 15:23:10	0.0		0
320	"Thanks for the PR. Would you mind squashing it into a single commit and doing a forced push please? It'll make it a bit easier to review.
"	2015-02-25 10:11:42	0.0		1
321	"Okay, done!
"	2015-02-25 14:35:32	0.0		0
322	"Thanks for the comments. I feel like I'll learn a lot from these remarks :)
This weekend I'll make all the changes and update the pull request!
"	2015-02-26 12:26:25	0.0		0
323	"For request body fields it seems useful to document the fields a client has or can pass.
Failing the test if not all the fields are documented is in this case a good idea to make sure the documentation stays up-to-date.

But for the response body it seems overkill to fail the test when not all the fields are documented. Especially if there are embedded resources this could be a fairly big chunk of documentation in the unit test, while not all developers may want to go about documenting every single field the service could return. They could instead be happy with the response example.

What would your preference be in this case?
"	2015-03-04 09:46:27	0.0		1
324	"I always like to have options. 

The developer should be able to decide when and how a test fails.

> On Mar 4, 2015, at 3:46 AM, Andreas Evers notifications@github.com wrote:
> 
> For request body fields it seems useful to document the fields a client has or can pass.
> Failing the test if not all the fields are documented is in this case a good idea to make sure the documentation stays up-to-date.
> 
> But for the response body it seems overkill to fail the test when not all the fields are documented. Especially if there are embedded resources this could be a fairly big chunk of documentation in the unit test, while not all developers may want to go about documenting every single field the service could return. They could instead be happy with the response example.
> 
> What would your preference be in this case?
> 
> —
> Reply to this email directly or view it on GitHub.
"	2015-03-04 13:49:48	0.0		0
325	"If the person writing the documentation is happy with the response example then I would expect them simply not to make any field documentation calls and for the test to pass.

When the user has opted to document some fields I think it's reasonable, at least initially, for the test to pass or fail based on the same criteria as the link documentation support. If it becomes clear that this is too strict, then we can relax both at the same time.

I don't think embedded resources complicate things here. Consider [this example from the HAL primer](http://phlyrestfully.readthedocs.org/en/latest/halprimer.html):

``` json
{
    ""_links"": {
        ""self"": {
            ""href"": ""http://example.org/api/user/matthew""
        }
    },
    ""id"": ""matthew"",
    ""name"": ""Matthew Weier O'Phinney"",
    ""_embedded"": {
        ""contacts"": [
            {
                ""_links"": {
                    ""self"": {
                        ""href"": ""http://example.org/api/user/mac_nibblet""
                    }
                },
                ""id"": ""mac_nibblet"",
                ""name"": ""Antoine Hedgecock""
            },
            {
                ""_links"": {
                    ""self"": {
                        ""href"": ""http://example.org/api/user/spiffyjr""
                    }
                },
                ""id"": ""spiffyjr"",
                ""name"": ""Kyle Spraggs""
            }
        ],
        ""website"": {
            ""_links"": {
                ""self"": {
                    ""href"": ""http://example.org/api/locations/mwop""
                }
            },
            ""id"": ""mwop"",
            ""url"": ""http://www.mwop.net""
        }
    }
}
```

There are only four fields that require documentation: `_links`, `id`, `name`, and `_embedded`. If you want to go into more detail on the structure of `_embedded`, then you could document `_embedded.contacts` and `_embedded.website` instead of `_embedded`. This is probably the level I'd go to, with the documentation for `_embedded.contacts` and `_embedded.website` being nothing more than a link to the documentation for the contacts and website resources respectively. 
"	2015-03-04 14:20:47	0.0		0
326	"Alright, can do.
Just confused about the following parts:

> When the user has opted to document some fields I think it's reasonable, at least initially, for the test to pass or fail based on the same criteria as the link documentation support. If it becomes clear that this is too strict, then we can relax both at the same time.

This conflicts in my opinion with:

> This is probably the level I'd go to, with the documentation for _embedded.contacts and _embedded.website being nothing more than a link to the documentation for the contacts and website resources respectively.

If I understand the link documentation criteria, all the field paths of the response should be gathered, and compared with the documentation. If the same is applied here, the test would fail in your scenario I think. It would expect _embedded.website.id or _embedded.website.url to also be documented.

Where would the recursive check draw the line? Should we have some more intelligent logic to check if one of the fields of a certain depth-level is documented, all those fields on that level should be documented?
"	2015-03-04 19:20:09	0.0		1
327	"My thinking is that, if you've documented `_embedded.foo`, then anything beneath that (`_embedded.foo.bar`, for example) should be treated as documented. I also wonder if `_embedded` should be considered to be documented if all of its children are documented
"	2015-03-04 19:41:15	0.0		0
328	"I've updated the pull request with all the changes you requested.
"	2015-03-13 19:50:20	0.0		0
329	"The documentation shouldn't include the name of a Java type – the fact that the service is written in Java is an implementation detail. Assuming a JSON-based format (which is entirely reasonable) the type can be one of `number`, `string`, `boolean`, `array`, or `object`.
"	2015-02-25 16:17:49	0.0		0
330	"I don't think this code belongs in the hypermedia package. Any service will have fields in its requests and responses, not just those that are using hypermedia.
"	2015-02-25 16:20:18	0.0		1
331	"This feels like overkill to me. The `LinkExtractor` abstraction was created to pull links out of a response into a common format. I'm not convinced that's necessary for the fields in a request/response to be extracted in a similar way. I don't think there's any need for them to be in a common format as the format that they are in is the format that needs to be documented.
"	2015-02-25 16:25:54	0.0		1
332	"I could be convinced that `_links` doesn't need to be documented as it could be documented in the same for every resource (a pointer to the links documentation for the resource). However, `_embedded` will vary and, therefore, I suspect that people will want to document it.
"	2015-02-25 16:28:04	0.0		0
333	"I wonder if this should be a path rather just a name? It would enable the documentation of more complex nested structures.
"	2015-02-25 16:31:54	0.0		0
334	"I agree.
For inspiration I took a closer look at how the [HAL specification](http://stateless.co/hal_specification.html) calls these fields. 
The HAL model is making the distinction between links, embedded resources, and plain old state (more specifically called ""your bog standard JSON or XML data"").
So I moved the ""fields"" classes to org.springframework.restdocs.state.
"	2015-02-28 10:01:18	0.0		0
335	"Well spotted. Thanks for the PR.
"	2015-02-23 09:46:43	0.0		0
336	"Thanks for the PR. Merged in 6bdd60c.
"	2015-02-23 10:03:14	0.0		0
337	"Thanks
"	2015-02-24 11:56:33	0.0		0
338	"Thanks for the PR.

This project's going to move over to the [Spring Projects organisation](https://github.com/spring-projects). Once it's there I'll be able to accept PRs from anyone who's signed the contributor licence agreement. I'll comment again with more details after the move.
"	2015-02-16 11:13:09	0.0		0
339	"okay, sure
"	2015-02-17 08:14:22	0.0		0
340	"The project's moved over now. Can you please [sign the CLA](https://github.com/spring-projects/spring-restdocs/blob/master/CONTRIBUTING.md#sign-the-contributor-license-agreement)?
"	2015-02-17 11:00:24	0.0		0
341	"Hi, can you please specify which project should I choose in the CLA form? There is no option for restdocs.
"	2015-02-17 11:25:02	0.0		0
342	"Apologies. I'd forgotten about the project drop-down on the form. I'll let you know once it's been updated.
"	2015-02-17 11:35:31	0.0		0
343	"The form's been updated and Spring REST Docs is now listed in the projects drop-down. Hopefully that's the final piece in the puzzle. Sorry it's been a little convoluted, thankfully you only need to sign once.
"	2015-02-17 17:51:25	0.0		0
344	"Okay thanks. I've signed it. My confirmation number is 108220150217110755
"	2015-02-18 09:09:53	0.0		0
345	"I've made a few comments in the commit (see above). Would you like to update the PR?
"	2015-02-18 13:28:11	0.0		1
346	"Yeah sure. I'll update it soon.
"	2015-02-18 15:30:10	0.0		0
347	"I've created new pull request, for this feature.
"	2015-02-21 14:33:01	0.0		0
348	"Would it be possible for the restdocs project itself to be mavenized as well?
"	2014-12-20 16:25:28	0.0		1
349	"That's unlikely. Why do you care which build system the project itself uses?
"	2014-12-20 18:38:43	0.0		0
350	"Thanks for this, Dave. I've reworked things so that they're no longer quite so Gradle-specific. See 6ec522069a2dca8c5ae95a11839afe8636ca09db for details. Both samples can now be built with Maven and, thankfully, there's less configuration required.
"	2015-01-08 18:14:28	0.0		0
351	"Merged. Thanks very much, Rob.
"	2014-12-02 12:22:11	1.0	2014-12-02 12:21:56	0
352	"Merged. Thanks, Rossen.
"	2014-11-13 15:18:33	0.0		0
353	This is `Function`-based ctor. So, there is nothing about `suffix`	2017-05-30 20:50:45	0.0		0
354	"M-m-m. Why do you select the extension replacing approach as default one?
Seems for me `foo.txt.complete` is much robust solution, especially when we may have `foo.exe`, `foo.jpg`, `foo.java` at the same folder."	2017-05-30 21:06:30	0.0		1
355	:+1:	2017-05-30 21:57:19	0.0		0
356	"TODO:
* Docs"	2017-05-25 22:35:33	0.0		1
357	Merged as f112ecbb7e2233b37b3136a2054bf3a496087eb1	2017-05-31 18:29:17	0.0		0
358	"Javadocs; `@since 5.0`; ""default implementation returns 0""."	2017-05-30 15:41:45	0.0		0
359	Perhaps a test to confirm we have a `sequenceSize` header?	2017-05-30 15:43:24	0.0		1
360	`@since 5.0` (both) - will fix on merge.	2017-05-31 18:22:36	0.0		0
361	Merged as bb2ee967f28bb6d9625ab3fa992c5ed68e096d6b	2017-05-25 19:59:47	0.0		0
362	Looks like a spurious back-tick `Note - will fix on merge.	2017-05-25 19:41:54	0.0		0
363	Thanks	2017-05-25 19:47:39	0.0		0
364	Merged as https://github.com/spring-projects/spring-integration/commit/2b99c191f6a02c44eebf8b7ba35a1ccc20c34ea1	2017-05-23 17:56:35	0.0		0
365	@olivergierke thanks for taking time to review my code. I have modified the code to reflect review comment. 	2017-05-08 00:18:05	0.0		0
366	Updated the issue id to #265	2017-05-08 00:47:49	0.0		0
367	@olivergierke appreciate any update on next step.	2017-05-10 07:55:23	0.0		0
368	@olivergierke anything you would like to see in order to merge this to master?	2017-05-20 21:46:41	0.0		0
369	Please make sure you indent using tabs.	2017-05-07 11:59:51	0.0		1
370	Please remove obsolete tags.	2017-05-07 12:00:04	0.0		1
371	Please remove obsolete tags.	2017-05-07 12:00:14	0.0		1
372	That's already defined by the parent POM and can be removed.	2017-05-07 12:00:33	0.0		0
373	Also available via parent POM.	2017-05-07 12:00:44	0.0		0
374	Make sure Java source files contain Apache license header.	2017-05-07 12:01:05	0.0		0
375	Obsolete blank line.	2017-05-07 12:01:23	0.0		1
376	Package declaration is not needed as it defaults to the base package the class resides in.	2017-05-07 12:01:53	0.0		1
377	Please move to `example.springdata.couchbase` package.	2017-05-07 12:02:11	0.0		1
378	Please use Lombok annotation to avoid all the boilerplate for getters, setters, equals, hashCode.	2017-05-07 12:02:45	0.0		1
379	Please remove obsolete JavaDoc.	2017-05-07 12:02:54	0.0		1
380	Please remove access modifiers for test class properties.	2017-05-07 12:03:39	0.0		1
381	Please use AssertJ assertions and static import using a `*` so that static methods don't need to be qualified. See other projects for example.	2017-05-07 12:04:29	0.0		1
382	Please order metadata tags consistently. See other projects for example.	2017-05-07 12:04:59	0.0		1
383	Please fix formatting (tabs).	2017-05-07 12:05:12	0.0		1
384	"@chan71 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=272)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=272) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."	2017-05-03 22:23:22	0.0		0
385	@chan71 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=272)!	2017-05-03 22:26:48	0.0		0
386	"Thanks for the effort, but this is exactly the behavior we would expect if you do not use Java 8. With  Java 8 we can obtain the parameter name via reflection and don't need the `@Param` annotation.

Examples like all other `master` branches of Spring Data rely on Java 8. So as long as all things seem to indicate that the issue is with the environment used for compiling and running the code, we won't accept a PR I think."	2017-05-04 05:25:38	0.0		1
387	See my comment on the original ticket.	2017-05-04 05:53:03	0.0		0
388	"@alb-i986 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=270)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-data-examples&pullRequestId=270) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."	2017-04-04 16:06:37	0.0		0
389	@olivergierke: I haven't updated the VersionEye issues because it's probably not relevant for this change. Let me know if I need to update anything to complete this merge.	2016-12-19 07:00:23	0.0		0
390	"@olivergierke To make this easier to understand (without the use of the converter) I'm using a string instead.

Commit message wise I was thinking: *""Update domain object and repository to reflect how to use SDN for version 4.2""*. I'm looking [here](https://github.com/spring-projects/spring-data-examples/commits/master) for inspiration here but can't see what else I can add. Any tips?"	2016-12-19 10:28:13	0.0		0
391	@olivergierke Updated. I've tried to make the example more clear with the intent and documentation.	2016-12-19 10:43:49	0.0		0
392	"I am still not sure I can follow: we still have a `Long` identifier but the repository exposing a `String` id. That's highly unusual to the average Spring Data developer. `findOne(…)` is supposed to lookup the entity by they identifier. It looks like that's not the case here. Can you elaborate? This seems to be a very fundamental change to what developers expect in a Spring Data setup.

Regarding the commit message: if I read that and look at the change I'd get the impression that I now *need* add that indexed property to all of my domain types to make them work with SDN 4.2. Is that really the case?"	2016-12-19 11:52:19	0.0		1
393	"@olivergierke I wish we could get rid of the `Long` id but we can't at the moment (for the same reason we can't remove the default constructor). The whole `Long`/`GraphId` is a misnomer; It represents an object in a neo4j database _but_ that id may point to a completely different object or to no object at all on a restart of the database. Consequently it's an encapsulation leak from the database into the OGM and also into SDN.

So we now have the ability to work with people who don't care about database restarts (like those who use the embedded database once off) whereby they can use a repository of ID `Long` (See `GraphRepository`) and those that want to use a natural or synthetic ID which will work across database restarts that want to use a repository of type `Whatever implements Serializable`.
"	2016-12-19 12:03:14	0.0		1
394	"What if we just have two examples: one with what was there previously and one with what we recommend people to use (the one I'm adding now)?

Besides that, I'm a bit confused about what else needs to change exactly for the example. SD/SDN can't abstract the user completely from understanding fundamental Neo4j concepts no?"	2016-12-19 12:06:05	0.0		1
395	I've never been a great fan of all these store details leaking into the domain types. Is there a chance that developers could just use Spring Data's `@Id` and basically get that `@Index(unique = true, primary = true)` stuff automatically?	2016-12-19 12:09:05	0.0		0
396	What I am wondering, too: if your newly added property *is* the ID, how is the Spring Data `MappingContext` implementation actually finding out about this? There doesn't seem to be anything unique about the property as the `@Index` annotation could be used on other properties, too, right? I am wondering as e.g. Spring Data REST relies on that information to correctly map incoming requests to the actual identifier values.	2016-12-19 12:13:54	0.0		0
397	"@olivergierke RE: The idea about `@Id`. Let me run it up the flagpole and see what comes back. I've always liked the idea of `@Id` and I had that concept in the OGM I wrote.

RE: `MappingContext` it's delegated to the OGM via the `Neo4jPersistentProperty`. I have not yet refactored this part of the code to integrate more tightly with Spring Data yet through. The links I sent you above refer to Spring REST's problems with the `id` field.

I'm spread pretty thin at the moment so I'll get to updating it when I can :\

RE: This example. While we have taken some big steps to get closer to Spring Data there are still more to go. At the moment I want to encourage users to use SDN in a way that will allow us to eventually remove the `Long` (or even define it themselves if they run in a one time embedded environment). In prep for 4.2.0 what do you think the example should show? "	2016-12-20 07:34:16	0.0		0
398	"Can you clarify on a couple of things here?

- Does the repository actually need to extend a store-specific interface? We usually recommend not to do so as is exposes store details to its clients.
- You change the ID type to `UUID` but the domain class still contains a `Long` identifier? That is at least confusing but actually even looks broken."	2016-12-19 08:05:37	0.0		1
399	"1. No it doesn't. In fact until you mentioned it I actually thought it was normal to extend the store specific interface. I'll change this.
1. Argh.. This has been a problem for a while now. The OGM and SDN 3.x both expose a neo4j database implementation called `ID` which currently needs to be annotated with `@GraphId`. Unlike other DB's it's *NOT* guaranteed to be unique across database restarts ([read more here](http://blog.armbruster-it.de/2013/08/assigning-uuids-to-neo4j-nodes-and-relationships/) - it's still relevant). On top of this developers have asked to have a way of uniquely identifying their domain objects, either naturally or with the Neo4j recommended approach of using `UUID`s.  Furthermore the implications of this result in things like: https://jira.spring.io/browse/DATAGRAPH-918 and https://github.com/spring-projects/spring-data-neo4j/issues/366. Ideally this implementation detail will be hidden in future. Personally I'm hoping when we can remove default constructors we can also remove the need for exposing the internal ID. What I will do for now is add some javadoc here to make this clear for those who haven't used Neo4j before."	2016-12-19 10:18:56	0.0		1
400	Spring Data Examples are based on Spring Boot `1.4.2.RELEASE`.	2016-12-08 10:29:37	0.0		0
401	Any ideas when this will be merged?	2017-03-01 16:52:44	0.0		0
402	Thanks for the pointer again. Changes look good. We're just busy preparing a release currently. Will take care of that after that.	2017-03-01 17:10:27	0.0		0
403	"Sorry, didn't realize that `eclipselink.weaving` had been set explicitly to `false` in [eclipselink/Application.java](https://github.com/spring-projects/spring-data-examples/blob/master/jpa/eclipselink/src/main/java/example/springdata/jpa/eclipselink/Application.java#L68).

I will update the PR to have static-weaving or load-time-weaving configurable.
"	2016-11-08 11:54:09	0.0		0
404	"A couple of minor items:

- remove dependency setup information from README as it's discoverable from `pom.xml`.
- refer to Spring Data releasetrain version `Kay-BUILD-SNAPSHOT` from POM (via property)."	2016-11-21 09:22:15	0.0		1
405	That's merged.	2016-11-23 10:03:19	0.0		0
406	"Can you elaborate? We refer to `Ingalls-M1` by purpose.
"	2016-08-18 15:28:03	0.0		1
407	"Sorry, I was wrong,not add ""Spring Milestones"" repository.
"	2016-08-18 23:45:18	0.0		0
408	"added ""Spring Milestones"" repository to resolved this problem
"	2016-08-18 23:54:29	0.0		0
409	"That shouldn't be necessary as the POM [contains the `libs-snapshot` repository](https://github.com/spring-projects/spring-data-examples/blob/master/pom.xml#L120-L125) that aggregates both release, milestone and snapshot artifacts.
"	2016-08-19 07:05:41	0.0		1
410	"Looks good to me beyond the minor cosmetic issues, I commented on. Feel free to squash and merge to master when you fixed those.
"	2016-07-27 14:01:24	1.0	2016-07-27 20:59:27	1
411	"Remove blank line.
"	2016-07-27 13:58:10	1.0	2016-07-27 20:59:27	1
412	"Maybe add some brief JavaDoc to the individual methods to explain, what exactly they're showing (i.e. what's the special thing about _this_ method over the others).
"	2016-07-27 13:58:48	1.0	2016-07-27 20:59:27	1
413	"That's merged, thanks!
"	2016-07-20 11:52:20	0.0		0
414	Merged with 45f19a6.	2017-03-10 06:54:52	0.0		0
415	"Merged with 6d012f4.
"	2016-03-21 10:33:24	0.0		0
416	"Thanks, that's merged with 1fe9aae.
"	2016-03-04 06:50:47	0.0		0
417	"how about @NoArgsConstructor?
"	2016-02-26 13:03:54	0.0		0
418	"Wasn't sure whether this works with JPA. Thanks for the hint.
"	2016-02-26 13:08:08	0.0		0
419	"JPA would even work with private ctors AFAIK ;-)
"	2016-02-26 14:36:30	0.0		0
420	"This should be fixed with the latest Spring Data Commons snapshots. Also, using `@Value(""#{target.id.toString()}"")` should allow you to work around this until the release is shipped.
"	2015-11-12 10:20:13	0.0		0
421	"werwerwer
"	2016-01-20 23:02:50	0.0		0
422	"Squashed and merged, thanks!
"	2015-10-15 07:16:06	0.0		0
423	"@olivergierke does this pom make more sense? (until those test modules are available?
"	2015-09-03 13:44:50	0.0		0
424	"Polished and merged (see #131).
"	2015-09-03 15:25:52	0.0		0
425	"What's the reason we need these test JARs in the classpath? I would've expected to only see the Spring Data Neo4j dependency. Anything I am missing?
"	2015-09-03 11:27:40	0.0		1
426	"They are needed for the in-memory server, and test-jar dependencies are not resolved transitively by maven :(
"	2015-09-03 11:33:56	0.0		0
427	"But which of the two is it then? Does it make sense to make them a dedicated artifact? It just looks weird having to refer to something test related from a non-test scope.
"	2015-09-03 11:49:53	0.0		1
428	"We need them all unfortunately. The spring-data-neo4j test-jar contains the InProcessServer and the others contain the test utilities and TestServer from neo4j-ogm
"	2015-09-03 12:02:07	0.0		0
429	"Actually we can clean it up a bit, which I did here: https://github.com/spring-projects/spring-data-examples/pull/130

We can add an (JIRA) issue for a separate test module both in the `neo4j-ogm` and in `spring-data-neo4j-4`, should be pretty straightforward to add, not sure we can make it in time for 4.0.GA though?
"	2015-09-03 12:07:09	0.0		1
430	"Merged with some minor cleanups. Thanks! :)
"	2015-08-01 19:09:58	0.0		0
431	"That's merged, thanks!
"	2015-08-01 18:53:15	0.0		0
432	"That's in place, thanks!
"	2015-06-29 15:55:00	0.0		0
433	"That's merged, thanks!
"	2015-07-16 06:25:38	0.0		0
434	"Good one, too. I also fixed the URI to the search resource on your behalf.
"	2015-06-16 09:02:35	0.0		0
435	"Thanks Chris, that's merged! :)
"	2015-06-16 08:57:31	0.0		0
436	"Applied, too!
"	2015-06-16 09:03:40	0.0		0
437	"That's applied with the fixes for #87.
"	2015-05-20 10:54:46	0.0		0
438	"That's merged, thanks!
"	2015-05-20 10:58:26	0.0		0
439	"Thanks a ton Jeremy! I've left a few inline comments. If I needed to boil it down it's basically asking you to simplify the example drastically. We need to make sure the core aspect of the example - setting up Spring Data JPA with EclipseLink - is at the core of it. Multiple repositories, domain types, advanced JPA mappings, a lot of test methods on the repository basically all just distract from that core aspect.

See for example how the `interceptors` example is reduced to the very bare bone to allow users to easily discover which parts are actually necessary to achieve the core goal of the example.
"	2015-03-13 08:20:49	0.0		1
440	"Thanks for the feedback @olivergierke, I'll simplify and address your other comments today. Simplifying it down to just the core aspect of the original issue makes total sense! 
"	2015-03-13 12:44:43	0.0		0
441	"@olivergierke did you get a chance to review my revisions? I appreciate all the feedback! 
"	2015-04-21 19:22:44	0.0		0
442	"I took what you had and simplified it quite a bit. We now have build profiles for both static and load-time weaving. See the commits against the original request #50.
"	2015-05-04 13:09:42	0.0		0
443	"Please remove the formatter file from the PR.
"	2015-03-13 08:05:21	0.0		1
444	"Do we really need the custom plugin? Is it not available on Maven Central?
"	2015-03-13 08:05:55	0.0		1
445	"Please change to `spring-data-jpa-eclipselink`to be consistent with the other modules.
"	2015-03-13 08:06:41	0.0		1
446	"All properties except this one shouldn't be necessary as Boot or the parent `pom.xml` derive this or have it configured explicitly.
"	2015-03-13 08:07:46	0.0		1
447	"Is there a release version of the plugin available?
"	2015-03-13 08:08:09	0.0		0
448	"How much explicit configuration to we actually need? Let's try to to as much customization as possible using `applicationProperties`. I don't think the LCEMFB and `DataSource` need to be declared. `jpaProperties()` should be configurable via `application.properties`, too.
"	2015-03-13 08:10:04	0.0		1
449	"Remove blank line.
"	2015-03-13 08:10:14	0.0		1
450	"Remove blank line.
"	2015-03-13 08:10:24	0.0		1
451	"Let's use Lombok annotations to avoid all the boilerplate getters and setters. Might be work having a look how other JPA samples do this.
"	2015-03-13 08:11:06	0.0		1
452	"Let's try to avoid as much customizations as possible as the focus of the example is clearly on the `EclipseLink` setup, not more advanced JPA mappings.
"	2015-03-13 08:12:21	0.0		1
453	"Remove blank line.
"	2015-03-13 08:12:34	0.0		1
454	"Remove blank line.
"	2015-03-13 08:12:38	0.0		1
455	"It might be worth simplifying the domain model to a single domain class. The example should focus on getting the fundamentals to work with EclipseLink. Multiple repositories with multiple query methods shouldn't be needed.
"	2015-03-13 08:13:52	0.0		1
456	"Let's try to move back to a single repository with maybe a single finder. The override for `findAll()` should be removed.
"	2015-03-13 08:14:40	0.0		1
457	"See my comment on the other repository.
"	2015-03-13 08:14:59	0.0		0
458	"Simplify, simplify, simply. Remember, this should become an exhaustive integration test for CRUD methods on EclipseLink. Rest assured we do this in Spring Data JPA itself. The example should focus on a single aspect, which in this particular case is the general setup of a Spring Data JPA project with EclipseLink. The execution of a query method alongside a CRUD method should be entirely sufficient. Everything else just distracts from the core aspect and needs to be maintained going forward.
"	2015-03-13 08:17:03	0.0		1
459	"Add missing license header.
"	2015-03-13 08:17:14	0.0		1
460	"Remove blank line.
"	2015-03-13 08:17:21	0.0		1
461	"Be sure you use tabs for indentation here.
"	2015-03-13 08:17:44	0.0		1
462	"Hi @olivergierke , I have a follow up question! 

I debated using this plugin originally. The static weaving plugin listed in the EclipseLink documentation requires a persistence-unit defined in a persistence.xml. Without specifying the entity classes or a jar in the persistence-unit, it didn't actually do any weaving on the class files. The plugin in the current version of the PR does class scanning which seems more ideal, but in hindsight it's probably not ideal for an example like this because it's non standard and may stop working at some point if that non maven central plugin disappears.

I have the example working with all the other review comments incorporated so it is much more correct in terms of Spring Boot usage. I have it working using both this plugin and the standard plugin. To get the standard plugin working, I had to create a persistence.xml file and define a persistence-unit and list the entity class. The JIRA issue did state ""Ideally this would include static weaving."" So I can either resubmit with the standard plugin and the persistence.xml, or just remove the static weaving portion. Which would you be better?

Thanks!
"	2015-03-15 16:54:30	0.0		0
463	"Okay, let's stick to plugin then. Is it possible to at least use a non-snapshot version of it or is the classpath scanning only available in 1.1? If in doubt, keep Boot customizations and Spring setup to a minimum and move custom setup into the build, so that we expose the infrastructure setup cost that way.

Does that make sense and provide enough guideline?
"	2015-03-18 08:47:36	0.0		1
464	"@olivergierke  , thanks again for the feedback! 

There isn't a non-snapshot version of the plugin available. As I was thinking more about this, I think the plugin from maven central and the use of a persistence.xml better illustrates the costs of using static weaving? Another approach would be to use the plugin from maven central, define a persistence.xml with only the entity information to support the static weaving during build time and then not use it for the Spring Boot application example. In this case, the persistence.xml exists just to provide the required information for the build time weaving of the entity, Spring Boot customizations are kept to a minimum and the infrastructure setup cost is all in the build. I just verified that works as well. 

The more detailed example would be using the maven central plugin and a persistence.xml and doing more Spring Boot customization to [use a traditional persistence.xm](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-data-access.html#howto-use-traditional-persistence-xml). 
"	2015-03-21 00:09:01	0.0		0
465	"Does it make sense to make this a ""real"" derived query (actually adding criterias via the method name)? I think mixing up derived queries with the aspect of overriding of a CRUD method decreases the focus of the example.
"	2015-03-12 12:29:59	0.0		1
466	"I thought it would be a good idea to mention this since it is not too obvious why we currently don't have `Stream<T> findAll()`.

But I think we should just mention this in a blog post and use a derived query in the example.
I just changed the PR accordingly.
"	2015-03-12 12:40:59	0.0		1
467	"As per our discussion, let's have a look at how we can simplify the setup of reading in the reference JSON.
"	2015-03-10 11:47:38	0.0		0
468	"I wonder if the example gets a bit simpler if we remove the repositories from the mix here. `putIfAbsent(…)` is not a very repository-ish method actually and turning that bit of client code into a custom repository implementation could very well be just inside the test method. The aspect of working with a custom implementation inside a repository drags attention a bit away from the core concern of the example, doesn't it?
"	2015-03-12 12:32:28	0.0		1
469	"thanks @olivergierke - moved the script into the tests and deleted the custom repository.
"	2015-03-12 18:37:24	0.0		0
470	"That's merged :).
"	2015-07-16 06:35:43	0.0		0
471	"Seems we messed this up quite a bit during some rebase operations. Any chance you rebase this onto current master, @christophstrobl?
"	2015-03-10 11:53:25	0.0		1
472	"@olivergierke rebased on master.
"	2015-03-10 12:52:01	0.0		0
473	"Thanks for that! Slightly reduced the complexity of the query method and made the test case more verbose to document what is achieved by the added query.
"	2014-12-05 19:11:15	0.0		0
474	"Decided to not go with the customization but declare the Boot plugin more local only to the projects that need it. See ca5fd35 for details.
"	2014-11-12 08:40:38	0.0		0
475	"Thanks for fast feedback, I will apply all necessary changes today.  
"	2014-10-31 09:52:49	0.0		0
476	"\o/ Take your time :)
"	2014-10-31 10:14:06	0.0		0
477	"Hi Olivier 
I have applied all fixes for you comments except .gitignore (I have left IntelliJ section - it's quite common rule and many people use it)

Other things:
- a few examples won't build if you call mvn clean install - spring boot requires 'main' method 
"	2014-11-03 12:21:43	0.0		1
478	"The issues with the Boot plugin have been resolved. Would you mind rebasing your changes on top of master? I currently can't apply the patch cleanly. Seems to be related to recent changes that we made to the root `pom.xml`.
"	2014-11-12 08:49:00	0.0		1
479	"done + small fix for application.properties 
"	2014-11-13 14:57:55	0.0		0
480	"Awesome, thx.
"	2014-11-13 15:02:17	0.0		0
481	"I've merged the example back but quite a few issues came to attention that I think we should get solved:
- the location field should really be a `Point` (from Spring Data Commons)
- enum values in `FieldType` should be all upper case (to conform to general Java idioms)
- we should really get rid off the need to declare default constructors (see `Conference`)
- `Criteria.within(…)` should take a `Point` and a `Distance` (from Spring Data Commons)
- the date time types should be Java 8's (there is a `Jsr310Converter` in Spring Data Commons)

I was unsure which of these points are actually issues that we should file tickets for as you probably have better insight into the project's capabilities. If you decide to create tickets for the missing items please be sure to put me on the watch list.
"	2015-01-04 17:37:07	0.0		1
482	"Can you please move these into a `.gitignore` local to the elasticsearch sample project?
"	2014-10-31 07:34:45	0.0		1
483	"Missing newline.
"	2014-10-31 07:34:54	0.0		1
484	"This should be obsolete, Boot should be able to determine the main class automatically.
"	2014-10-31 07:35:22	0.0		1
485	"Have `mvn spring-boot:run` directly to be able to get rid off the shell script.
"	2014-10-31 07:36:06	0.0		1
486	"I'd drop that one as it only adds a layer of indirection without much benefit. See my comment on the readme above.
"	2014-10-31 07:36:38	0.0		1
487	"If the app only produces log output maybe rather set everything up as test cases using assertions and optionally writing logs. I'd suggest to remove `Application` and the service implementation completely and entirely stick to test cases.
"	2014-10-31 07:38:07	0.0		1
488	"See the comment on `Application` above.
"	2014-10-31 07:38:23	0.0		0
489	"Use Lombok annotations to get rid of the getter/setter noise.
"	2014-10-31 07:38:46	0.0		1
490	"Use Lombok's `@Builder` on `Conference` instead.
"	2014-10-31 07:39:15	0.0		1
491	"Missing new line.
"	2014-10-31 07:39:29	0.0		1
492	"Formatting.
"	2014-10-31 07:39:45	0.0		0
493	"Missing new line.
"	2014-10-31 07:39:52	0.0		1
494	"Formatting.
"	2014-10-31 07:39:57	0.0		0
495	"@olivergierke Why wouldn't we have such global IntelliJ stuff NOT at the root level of this project? If we don't put it at the top, we'll need this on every project.
"	2014-10-31 14:01:16	0.0		0
496	"This looks really decent! I'll add a few polishing notes to the individual files but generally speaking: very cool!
"	2014-10-16 08:50:50	0.0		0
497	"Polished and merged. Switched to Spring MVC test support instead of running an integration test bootstrapping a server instance. Adapted security configuration to make this work.
"	2014-10-17 08:45:46	0.0		0
498	"Do we need this?
"	2014-10-16 08:51:07	0.0		0
499	"Do you have the ticket for the fix handy? Might be worthwhile asking Rob to port that one back to the 3.x line?
"	2014-10-16 08:51:53	0.0		0
500	"Remove empty line (for other files as well).
"	2014-10-16 08:52:23	0.0		1
501	"This construct is uses quite a few times, esp. in the test cases? Maybe extract int a `SecurityUtils.runAs(String username, String password, String... roles)`?
"	2014-10-16 08:53:29	0.0		1
502	"Remove commented out code.
"	2014-10-16 08:53:37	0.0		1
503	"We can use Lombok here to avoid the accessors.
"	2014-10-16 08:54:02	0.0		1
504	"Remove empty line. Annotations on the same line as the variable declaration (formatter setup should've actually taken care of that).
"	2014-10-16 08:54:57	0.0		1
505	"Lombok.
"	2014-10-16 08:55:16	0.0		0
506	"Does this need an `@Autowired`?
"	2014-10-16 08:55:47	0.0		0
507	"License header missing.
"	2014-10-16 08:56:07	0.0		1
508	"Maybe rather use Boot's `@IntegrationTest`?
"	2014-10-16 08:56:25	0.0		1
509	"Let's use `assertThat(…)` everywhere.
"	2014-10-16 08:56:58	0.0		1
510	"Let's make plain repository accessing tests separate test cases at least. Could even be a separate test class to even separate them more.
"	2014-10-16 08:57:35	0.0		1
511	"Let's move this one up in the class before the `@Before` method so that people know immediately what configuration the test is bootstrapped with.
"	2014-10-16 08:58:21	0.0		1
512	"Either remove completely or simplify to `logging.level.org.springframework.web` in `application.properties`.
"	2014-10-16 08:59:21	0.0		1
513	"Well, I was testing the asciidoc outputs. Didn't want the HTML to become a controlled artifact. 
"	2014-10-16 12:34:16	0.0		0
514	"Yes it does. It's not an override method.
"	2014-10-16 19:37:22	0.0		0
515	"Looking at the `pom.xml` for the sample I was wondering whether it'd make sense to add a Spring Boot starter for Spring Data Cassandra.
"	2014-10-31 07:53:53	0.0		0
516	"I removed the logging configuration and used lombok in the domain class.
Having a Spring-Boot-Starter would help with the configuration. But thats something that we can add later.
I'll define a custom JUnit rule that checks whether Cassandra is up - I'll add @Ignore to the cassandra tests for now.
"	2014-11-01 16:04:26	0.0		0
517	"Do we actually need that?
"	2014-10-31 07:50:54	0.0		1
518	"Use Lombok for accessors and `equals(…)`/`hasCode()`.
"	2014-10-31 07:51:40	0.0		1
519	"Newline. Alternatively use `logging.level.org.springframework=error` in `application.properties`. Couldn't we just live with the default logging settings?
"	2014-10-31 07:52:47	0.0		1
520	"We probably need to guard the test execution to make sure a Cassandra instance is really running.
"	2014-10-31 07:54:35	0.0		0
521	"- Switch to `Jackson2RepositoryPopulatorFactoryBean` for setup from JSON file
- Move sample data JSON into root of the classpath
- Drop network lookup of the blog feed
"	2014-09-08 15:54:45	0.0		1
522	"Looks good to me, except the minor comments.
"	2014-09-04 12:48:01	0.0		0
523	"Was that by accident?
"	2014-09-04 12:44:12	0.0		0
524	"Missing line break.
"	2014-09-04 12:44:19	0.0		1
525	"Can we use first, second, third?
"	2014-09-04 12:45:28	0.0		1
526	"Do we need the comment in the `<pre />` blocks?
"	2014-09-04 12:46:00	0.0		1
527	"No `<pre />` please.
"	2014-09-04 12:47:41	0.0		1
528	"LGTM, merging.
"	2014-09-03 12:44:06	0.0		0
529	"Is there a way we get this to work without an external Solr instance? I'd like to keep `mvn clean test` on the very root project working. If that's not an option we could set the `skipTests` property in the `pom.xml` to `true` to exclude the tests from running during a command line build. They could still be executed from within the IDE though.
"	2014-09-03 12:57:15	0.0		1
530	"The basic sample would work using an embedded server - the other one requires a running instance - I'll add guards skipping those tests if solr is not running.
"	2014-09-03 17:13:00	0.0		0
531	"Simple for-each?
"	2014-09-02 08:24:14	0.0		0
532	"Simple for-each?
"	2014-09-02 08:25:33	0.0		0
533	"I think it makes sense to make this a separate example (in a separate package of the very same project). The main reason is that the example currently shows very basic functionality and the `@Meta` support is quit a bit more advanced as it needs much deeper understanding of MongoDB internals (profiling etc.).
"	2014-09-02 08:12:57	0.0		0
534	"@olivergierke yes - makes sense, also allows to move some of the config stuff (enable/disable profiling) to the config. updated the PR.
"	2014-09-02 09:23:07	0.0		0
535	"This is now live at https://github.com/spring-projects/spring-data-examples/tree/master/rest/multi-store.
"	2014-07-31 13:09:38	0.0		0
536	"We might wanna tweak the readme in the repository root to point to the security example as well.
"	2014-07-10 11:22:34	0.0		1
537	"Done.
"	2014-07-10 11:36:28	0.0		0
538	"Line break.
"	2014-07-10 11:18:57	0.0		0
539	"ManyToOne, right?
"	2014-07-10 11:19:23	0.0		0
540	"Return type of `SecurityExpressionOperations` to reduce reflection overhead?
"	2014-07-10 11:20:12	0.0		1
541	"No anonymous type required, right?
"	2014-07-10 11:20:32	0.0		0
542	"2014 only.
"	2014-07-10 11:20:43	0.0		0
543	"New line.
"	2014-07-10 11:20:53	0.0		0
544	"Left overs from the intermediate removal of the Java 7 settings?
"	2014-07-10 11:21:26	0.0		0
545	"Left overs from the intermediate removal of the Java 7 settings?
"	2014-07-10 11:21:30	0.0		0
546	"Well SecurityExpressionRoot is an abstract class... with only two impls:
- org.springframework.security.web.access.expression.WebSecurityExpressionRoot (needs http session)
- org.springframework.security.access.expression.method.MethodSecurityExpressionRoot (package protected)
"	2014-07-10 11:23:04	0.0		0
547	"Not really but for some reason maven tries to compile this with source java 6...
"	2014-07-10 11:27:47	0.0		0
548	"Good point. Probably something that Rob should take care of. Keep as is for now.
"	2014-07-10 11:28:42	0.0		0
549	"Maybe the switch to the properties doesn't work as expected?
"	2014-07-10 11:29:13	0.0		0
550	"I like that change. We should make sure the documentation above matches the actual query.
"	2014-07-10 12:00:51	0.0		1
551	"Done - or not...?
"	2014-07-10 12:02:40	0.0		0
552	"The github ui dosen't show the actual file state... 
the query in the comment looks now like:

``` sql
select o from BusinessObject o where o.owner.emailAddress like ? 
```
"	2014-07-10 12:05:11	0.0		0
553	"Cool thx.
"	2014-07-10 12:08:39	0.0		0
554	"Do we need equals and hashCode here? If so, the should only inspect the id as it's an entity, not a value object.
"	2014-07-10 12:09:17	0.0		1
555	"I just wanted to demonstrate that the owner is the owner we expect etc...
In addition to that we could also use the data field to test additonal stuff like encryption, value masking etc... therefore I'd keep it in as well.
"	2014-07-10 12:12:23	0.0		0
556	"So, that's proven by getting the entity with the right id, isn't it? Even if someone changed the object in the database in the meantime (so that they'd differ in property values), it'd still be the correct value as it's the entity with the same id.
"	2014-07-10 12:20:05	0.0		0
557	Thanks for the feedback @tsachev. Actually we have [a sample app](https://github.com/spring-projects/spring-session/tree/master/samples/misc/hazelcast) that demonstrates the usage without the Spring Core. `org.springframework.util.Assert` is indeed used within the Spring Session, but to my knowledge in parts of the framework that need Spring Core anyway. Did you encounter any particular problem?	2017-05-29 03:04:53	1.0	2017-05-30 20:49:46	0
558	"well I did not since I am using spring, too but just noted that the repo filter is using spring core thought this doc states that spring is not required.
or it is when using sevlwt containers?"	2017-05-29 03:48:11	1.0	2017-05-30 20:49:46	0
559	@tsachev Are you referring to `SessionRepositoryFilter`? I'm not aware of it using Spring Core (previously linked [sample app](https://github.com/spring-projects/spring-session/tree/master/samples/misc/hazelcast) wouldn't work if it did). Can you point to the specific usage we're talking about here?	2017-05-29 05:49:18	1.0	2017-05-30 20:49:46	0
560	Merged to `master` in 79f187d.	2017-05-30 20:52:36	0.0		0
561	"Hi @slaskawi, thanks for the PR!

Generally we only add links to 3rd party documentation to Community Extensions section of our reference manual. Further details on usage of extension are expected to be available on the linked site.

Can you update/reduce the PR to be inline with that?"	2017-03-16 19:49:19	0.0		1
562	Sure @vpavic ! Updated.	2017-03-20 08:54:31	0.0		0
563	Thanks for the contribution @slaskawi ! This is now merged to the `master`.	2017-03-20 18:57:14	0.0		0
564	"@karthik-hub Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=739)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-session&pullRequestId=739) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/about) for frequently asked questions."	2017-03-02 13:58:32	0.0		0
565	Closing as this seems to be opened by accident.	2017-03-03 18:22:10	0.0		0
566	Thanks for the PR @eddumelendez, this is merged to `master` in 6327d36.	2017-04-26 21:54:11	0.0		0
567	"Having trouble getting this to merge into master at the moment. I made one update in [my branch](https://github.com/rwinch/spring-session/tree/gh-693) to fix a dependency issue, but I'm getting:

```
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:102)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:47)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:243)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:226)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:290)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:245)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:189)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:114)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:57)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:66)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy3.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:377)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webSecurityConfig': Unsatisfied dependency expressed through method 'configureGlobal' parameter 1; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userRepositoryUserDetailsService' defined in file [/Users/rwinch/code/spring-session/samples/boot/websocket/build/classes/main/sample/security/UserRepositoryUserDetailsService.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userRepository': Cannot create inner bean '(inner bean)#7f4ab4d2' of type [org.springframework.orm.jpa.SharedEntityManagerCreator] while setting bean property 'entityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#7f4ab4d2': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webSocketConfig': Unsatisfied dependency expressed through field 'sessionRepository'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.session.SessionRepository<org.springframework.session.ExpiringSession>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:652)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:358)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1284)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:567)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:484)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:751)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:865)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:541)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:809)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:404)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:347)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:128)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)
	... 44 more
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userRepositoryUserDetailsService' defined in file [/Users/rwinch/code/spring-session/samples/boot/websocket/build/classes/main/sample/security/UserRepositoryUserDetailsService.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userRepository': Cannot create inner bean '(inner bean)#7f4ab4d2' of type [org.springframework.orm.jpa.SharedEntityManagerCreator] while setting bean property 'entityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#7f4ab4d2': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webSocketConfig': Unsatisfied dependency expressed through field 'sessionRepository'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.session.SessionRepository<org.springframework.session.ExpiringSession>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:748)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:189)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1213)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1115)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:484)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:250)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1128)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:644)
	... 63 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userRepository': Cannot create inner bean '(inner bean)#7f4ab4d2' of type [org.springframework.orm.jpa.SharedEntityManagerCreator] while setting bean property 'entityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#7f4ab4d2': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webSocketConfig': Unsatisfied dependency expressed through field 'sessionRepository'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.session.SessionRepository<org.springframework.session.ExpiringSession>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:313)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:129)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1551)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1296)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:567)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:484)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:250)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1128)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:833)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:740)
	... 76 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#7f4ab4d2': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webSocketConfig': Unsatisfied dependency expressed through field 'sessionRepository'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.session.SessionRepository<org.springframework.session.ExpiringSession>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:633)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:447)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1087)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:484)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:299)
	... 90 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory': Post-processing of FactoryBean's singleton object failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webSocketConfig': Unsatisfied dependency expressed through field 'sessionRepository'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.session.SessionRepository<org.springframework.session.ExpiringSession>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1630)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:250)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	... 98 more
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'webSocketConfig': Unsatisfied dependency expressed through field 'sessionRepository'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.session.SessionRepository<org.springframework.session.ExpiringSession>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:573)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:358)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1284)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:567)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:484)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:372)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1087)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:484)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:198)
	at org.springframework.context.event.AbstractApplicationEventMulticaster.retrieveApplicationListeners(AbstractApplicationEventMulticaster.java:228)
	at org.springframework.context.event.AbstractApplicationEventMulticaster.getApplicationListeners(AbstractApplicationEventMulticaster.java:185)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:382)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:336)
	at org.springframework.boot.autoconfigure.orm.jpa.DataSourceInitializedPublisher.publishEventIfRequired(DataSourceInitializedPublisher.java:77)
	at org.springframework.boot.autoconfigure.orm.jpa.DataSourceInitializedPublisher.postProcessAfterInitialization(DataSourceInitializedPublisher.java:68)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:423)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.postProcessObjectFromFactoryBean(AbstractAutowireCapableBeanFactory.java:1795)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:113)
	... 102 more
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.session.SessionRepository<org.springframework.session.ExpiringSession>' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1476)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1094)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1056)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:570)
	... 130 more
```"	2017-03-03 20:57:55	1.0	2017-05-04 17:13:46	1
568	@rwinch I've rebased the changes on the current `master` and addressed the problem with websocket sample. The cause was an issue with Spring Boot's conditions on Redis based auto-config of Spring Session (see spring-projects/spring-boot#8582).	2017-03-12 17:12:48	1.0	2017-05-04 17:13:46	0
569	PR updated due to [SPR-15142](https://jira.spring.io/browse/SPR-15142) being fixed in the `master` via spring-projects/spring-framework#1298.	2017-01-16 16:21:15	0.0		0
570	Thanks for the contribution @eddumelendez! This was merged to master in 489cf01 and backported to `1.4.x` in #705.	2017-01-12 21:41:36	0.0		0
571	Thanks for the contribution @eddumelendez! This was merged to `master` in 1a318b8 and 8e7c736, and polished in commits 4b19674 through c182e90.	2017-01-11 21:31:24	0.0		0
572	"@gaborcs Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=678)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-session&pullRequestId=678) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions."	2016-11-28 17:03:38	0.0		0
573	@gaborcs Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=678)!	2016-11-28 17:28:47	0.0		0
574	Thanks for the contribution @gaborcs! This is now merged to the `master`.	2016-11-28 21:59:43	0.0		0
575	Thanks for the PR! We need to remove these in a non-passive release, so scheduling for 2.0 M1	2016-11-22 18:27:36	0.0		1
576	Updated the PR to rebase to current master and remove `SessionEntryListener` which was deprecated in `1.3.0`.	2016-12-19 21:10:22	0.0		1
577	"@vpavic , 

thank you for contribution as usual! :smile: 
I wonder what do you think about Spring IO Platform compatibility https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/115.

I'm also interested in the Gradle 3.1 upgrade but that issue is really stopping me, although I don't see any problems in one my small project which is a part of Spring IO Platform and really build SUCCESSFULy with the `springIoCheck`  task when I add `classpath 'io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE'` as well.

WDYT?
"	2016-11-12 01:56:36	0.0		0
578	"Hey @artembilan, you're welcome! :smile:

I've been following the situation with Gradle 3 and Dependency management plugin as we (at my company) use Gradle exclusively so it's a topic of our interest. We have two medium to large projects ongoing that are on Gradle 3 (3.1 ATM to be exact) and we haven't faced any issues (both are Spring IO Platform and Boot based). Spring Security has also moved to Gradle 3 (spring-projects/spring-security#4052) some time ago. So IMO the best approach would be to attempt the Gradle upgrade and see where that gets you, since chances are good (from my experience at least) that you won't run into any issue.

Upgrade of Dependency management plugin to 0.6.x is required due to spring-gradle-plugins/dependency-management-plugin#87 since Spring IO plugin is still based on 0.5.x, I assume you encountered that one in your project as well.
"	2016-11-12 13:32:33	0.0		0
579	"What are the chances - I just wanted to do the same and googled to see if someone has done it already :)
"	2016-11-11 18:53:29	1.0	2016-11-23 02:56:37	0
580	"I think I would prefer to keep the two objects decoupled, but provide an easy way to configure them. One way this could be done by determining if `SpringSessionRememberMeServices` is a Bean to set `CookieSerializer` expiration property.

Another issue we should consider is how does this behave with Spring Security's session fixation protection. In older servlet environments the session is invalidated and then recreated at log in. I cannot recall off the top of my head if this happens before or after the remember me logic is invoked.
"	2016-11-11 20:24:04	1.0	2016-11-23 02:56:37	1
581	"@rwinch Thanks for the feedback, I'll look into it.

> One way this could be done by determining if SpringSessionRememberMeServices is a Bean to set CookieSerializer expiration property.

But this doesn't (unless I'm missing something) address the situation described in my previous comment:

> IMO it should be possible to have behavior that is similar to one of Google Account's `SID` cookie - if `Stay signed in` option is selected, session cookie is persistent meaning it has expiration specified, otherwise it's not persistent.

We need to somehow serialize the cookie with different max age depending on whether remember-me was requested or not. Having two `CookieSerializer`s doesn't look appealing to me, maybe `CookieSerializer` interface could be extended with `writeCookieValue` method that allows specifying the `cookieMaxAge` parameter?
"	2016-11-12 13:55:23	1.0	2016-11-23 02:56:37	1
582	"@vpavic 

I'm not sure why this wouldn't help. If `SpringSessionRememberMeServices` was a Bean, the configuration would automatically ensure that the `CookieSerializer` was setup properly.
"	2016-11-14 15:22:02	1.0	2016-11-23 02:56:37	0
583	"@rwinch I've updated the PR. `SpringSessionRememberMeServices` now sets request attribute upon successful remember-me login. `DefaultCookieSerializer` can now be configured to look for the presence of remember-me request attribute and apply the appropriate cookie max age. I went with request attribute (vs request param as we originally discussed) due to the fact its more reliable way to indicate remember-me login - the request param might be present without remember-me being involved at all, which is sort of a risk.

The automatic configuration of `DefaultCookieSerializer` was somewhat tricky due to `SpringSessionRememberMeServices` relying on `spring-security-web` dependency which is optional.
"	2016-11-19 14:36:37	1.0	2016-11-23 02:56:37	0
584	Thanks for the PR! This is merged into master. I provided some polish in 49e3a1c7cde44ab1c6bffc85a648fd067ac5a55c	2016-11-23 03:02:12	1.0	2016-11-23 02:56:37	0
585	"Thanks for the PR @eddumelendez! This is now merged into master
"	2016-11-11 21:28:11	1.0	2016-11-11 21:27:56	0
586	"Thanks for the PR! This is merged via 2aec28289e2f3034b5d7e8e2b7356a23ce3aacb2
"	2016-11-10 22:16:36	0.0		0
587	"Thanks for the PR @panchenko! This is merged via 802e0e714b55fad570a4ba7d96f9cea5105343d9 I also added tests in 32c053271c6da4af85bc317b5ecd4e7d9af2e63e
"	2016-11-14 22:55:35	0.0		0
588	"@panchenko Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=654)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-session&pullRequestId=654) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.
"	2016-10-28 07:57:58	0.0		0
589	"@panchenko Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=654)!
"	2016-10-28 07:59:45	0.0		0
590	"Thanks for the PR @panchenko! This is now merged via 1c9dfa663851673404eacda8ce99773d33ea1113 and I polished it via 25aec9935759638412fade92e7a0736322fcd33e
"	2016-11-16 20:56:29	0.0		0
591	"@rwinch The last part is slightly not nice in byte code, if you care :-)

In the first case it's just `ldc`, in the other that's done via a synthetic method containing `getstatic`.
During execution it should be optimized anyway, but still more work for the JVM :-)
"	2016-11-17 05:29:56	0.0		1
592	"Thanks for the PR! This is now merged into master
"	2016-11-10 22:58:41	0.0		0
593	"Will change all samples to use Lettuce instead of Jedis after discussing with @rwinch 
"	2016-10-25 18:34:30	0.0		0
594	Rebased the PR against `1.4.x`.	2016-12-20 20:51:49	0.0		0
595	"I'm closing this since decorator approach doesn't seem suitable for addressing the original problem as there are no guarantees any non-decorated repository operation won't internally call `getSession` thus causing deserialization error, as demonstrated by `RedisOperationsSessionRepository` where `delete` operation internally calls `getSession` (see [comment](https://github.com/spring-projects/spring-session/pull/646#discussion_r99330548)).

Another problematic bit is the configuration as we would need to register both delegating implementation and `SafeRetrievingSessionRepository` decorator as beans, and mark decorator as `@Primary`."	2017-03-17 13:16:58	0.0		1
596	"Is it possible some of the sessions are deserializable while some are not? It would seem nice to be able to return just the ones that are deserializable and delete the ones that are not. Otherwise, repeated attempts to find will always result in an empty result (until any configured timeout of the sessions that cannot be deserialized). I'm not sure how this can be accomplished in a way that supports any `FindByIndexNameSessionRepository` implementation, though.
At least documenting the behavior in the JavaDoc for this method would be nice, I think.
"	2016-10-09 06:35:02	0.0		1
597	"Thank you for raising this concern @shakuzen - I've planned to comment on `findByIndexNameAndIndexValue` behavior but forgot. I'm not sure what would be the best way to address this due to exact reasons you've described. Delegates will fail even if only one of the results is not deserializable and I don't see a way around it.
"	2016-10-09 08:10:53	0.0		1
598	"Hi, I have just tested the above using Redis and calling delegate.delete results in a serialization issue as RedisOperationsSessionRepository goes away and tries to get the session again
RedisSession session = getSession(sessionId, true);

Not sure if this is an issue with this code or with RedisOperationsSessionRepository.  Thanks"	2017-02-03 12:45:44	0.0		1
599	"Thanks for giving this a test run @davidmelia. It's a problem with this code since it doesn't take into account that delegate's `delete` operation (or any other for that matter) could internally call an operation that can result in a deserialization error.

I guess this is a case in point for implementing some sort of deserialization strategy vs the session repository decorator pattern."	2017-02-03 13:47:39	0.0		1
600	"Thanks for the PR @vpavic! This is merged into master
"	2016-09-30 19:18:05	1.0	2016-09-30 19:17:52	0
601	"@maseev Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=642)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-session&pullRequestId=642) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.
"	2016-09-30 10:32:34	1.0	2016-09-30 15:07:44	0
602	"@maseev Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=642)!
"	2016-09-30 10:34:49	1.0	2016-09-30 15:07:44	0
603	"Thanks for the PR! This is now merged into master
"	2016-09-30 15:07:55	1.0	2016-09-30 15:07:44	0
604	"@stojsavljevic Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=641)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-session&pullRequestId=641) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.
"	2016-09-26 10:02:10	0.0		0
605	"@stojsavljevic Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=641)!
"	2016-09-26 10:04:29	0.0		0
606	"LGTM :+1:
Great work @stojsavljevic!
"	2016-09-26 10:32:07	0.0		0
607	"@shakuzen 
This PR might slightly improve performance. But the main motivation is to avoid race conditions described in #508.

Another thing - I introduced new attribute in `EnableHazelcastHttpSession` - `hazelcastFlushMode`. I named it like that to be in line with `redisFlushMode` in `EnableRedisHttpSession`.
But I would like to call it `flushMode` to avoid noise. What do you think?
"	2016-10-01 12:10:40	0.0		0
608	"Thanks for the contribution @stojsavljevic! This is now merged to the `master` in 6a78101 with a minor polish in 4a06b38.
"	2016-11-15 20:43:24	0.0		0
609	"@vpavic Will there be a mention in the release notes about this (particularly as it changes the default behavior)?
"	2016-11-16 00:19:23	0.0		0
610	"@shakuzen With this PR being a part of an effort started in #544 to bring the first-class support for Hazelcast, I'm sure things will get a proper mention in the `1.3.0` release notes.

@stojsavljevic One thing I forgot to comment on while closing the PR:

> Another thing - I introduced new attribute in EnableHazelcastHttpSession - hazelcastFlushMode. I named it like that to be in line with redisFlushMode in EnableRedisHttpSession.
> But I would like to call it flushMode to avoid noise. What do you think?

@rwinch and I have discussed this and while we like the simple `flushMode` name, the `hazelcastFlushMode` was kept in order to maintain consistency with the existing naming of `redisFlushMode`.
"	2016-11-16 06:57:10	0.0		0
611	"Should be:

``` java
Assert.notNull(cached, ""MapSession cannot be null"");
```
"	2016-09-27 09:48:36	0.0		1
612	"Thanks for catching this. Going to fix it ASAP..
"	2016-09-27 13:46:05	0.0		0
613	"It's fixed. Thanks again.
"	2016-09-27 14:08:17	0.0		0
614	"Thanks for the PR @marcoblos! This is now merged into master via 4c2581d432bdbcf99f003042c62afa6868ba2884 Please note that we do not want to `RedisSession` to public because this is an implementation detail. Users can use the `ExpiringSession` interface instead. For this reason, I omitted the changes in the last commit.
"	2016-11-17 16:36:09	0.0		1
615	@rwinch Thanks for your explanation about `RedisSession`. This project is very very useful. Congratulations about your job. 	2016-12-16 13:35:54	0.0		0
616	"@rwinch -

I submitted these changes to _Spring Session_ as a PR for your review (rather than committing directly) since it upgrades _Spring Boot_ to **1.4.0.RELEASE**, sets the core _Spring Framework_ dependency to **4.3.2.RELEASE** and upgrades _Spring Data GemFire_ to **1.8.2.RELEASE**.

I have resolved all issues with the GemFire `HttpSession` samples related to these updates, per your earlier request (and issues).

If you have any questions, let me know.

Thanks,
John
"	2016-09-17 22:28:27	0.0		0
617	"Thanks for the PR! This was initially broken due to the Jackson version differences. To fix this an update to Spring Security was made via gh-662

This was merged in f0820c80380f1b281b6d95c466a19350e1315d0a
"	2016-11-10 21:43:13	0.0		0
618	"@atreides322 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=629)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-session&pullRequestId=629) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.
"	2016-09-15 03:29:52	0.0		0
619	"@atreides322 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=629)!
"	2016-09-15 03:32:33	0.0		0
620	Thanks for the PR! This is now merged into master via 1df1a7606993472fc5c551046408735b85e6ce64 and 17e397212db5394a7fe004c9dc872769c393cfe0	2016-12-14 14:54:29	0.0		0
621	"Thanks!
"	2016-09-12 17:54:20	1.0	2016-09-12 17:54:12	0
622	"Sorry about that - was purely by accident! I develop on a windows machine unfortunately :(
"	2016-09-13 18:45:04	1.0	2016-09-12 17:54:12	0
623	"Thanks for the PR! This is merged via 34948d64518843dbc51432f21af7c6f0a3ac3f2d
"	2016-09-12 16:28:33	0.0		0
624	"Wouldn't this be a breaking change to a public API? I know I have my own custom implementation of HttpSessionStrategy and upgrading to a version of spring-session which contains this change would break my code as well as break anyone else's code that is either extending or using the public API.
"	2016-09-09 11:35:34	0.0		1
625	"@edeandrea yes, this will break your code. That's the reason why this is schedule for version 2.0 because it will be a major release.
"	2016-09-09 16:04:29	0.0		0
626	"Got it - thanks!
"	2016-09-09 16:05:18	0.0		0
627	"Thanks for the PR! I'm interested in why you find this change necessary? Generally speaking I don't think this would really need to change.
"	2016-09-12 18:05:50	0.0		1
628	"Hi @rwinch, thanks for the feedback!!  As I described in Issue #616, I'm running into issues in environments with multiple application servers connected to multiple databases.  At the top of the minute, both servers are kicking off the `JdbcOperationsSessionRepository#cleanUpExpiredSessions()` method to clean up sessions on their databases.  When the databases try to delete the data on the other servers through replication, it runs into errors because the data it is expecting to be there is actually not there.  This change would allow a system property to be set on each server for the Cron expression, so, for example, one server could run the `cleanUpExpiredSessions()` method at the top of every minute, and the other server could easily be set to run `cleanUpExpiredSessions()` at the 30 second point of every minute.  Sorry, I'm not the best at explaining things sometimes, so I hope this makes sense!  Let me know if you have any other questions.

In my app, I've essentially set up the solution that @vpavic suggested in his comment on Issue #616 yesterday, but I was just adding a pull request in case others thought it may be useful!
"	2016-09-12 19:10:51	0.0		0
629	"I'm closing this in favor of 5ecf390932eca1f84bc284de144b60195c20abde which uses a property with a default value like:

```
@Scheduled(cron = ""${spring.session.cleanup.cron.expression:0 * * * * *}"")
```
"	2016-09-13 15:45:42	0.0		0
630	"Closing because build failed.  Will fix and submit new pull request
"	2016-09-08 16:44:33	0.0		1
631	"Fixed in 2792d2a0e919e26a37e4599c56eda31943d52035 and polished in 97fef0f9bd1119cdf3dc83e56b4f17802af9abe6
"	2016-09-07 17:03:20	0.0		0
632	"Thanks for the PR @vpavic! 

You can use a single PR, but can you please split the commits into two distinct commits for the specific issues?

I'm wondering if we can improve this slightly so that the `JdbcHttpSessionConfiguration` detects the Database vendor and updates the query for H2 and Derby using something like:

```

@Bean
public JdbcOperationsSessionRepository sessionRepository(
        @Qualifier(""springSessionJdbcOperations"") JdbcTemplate jdbc,
        PlatformTransactionManager transactionManager) throws Exception {
    String vendor = jdbc.getDataSource().getConnection().getMetaData().getDatabaseProductName();
    boolean isH2 = ""h2"".equalsIgnoreCase(vendor);
        ...

```

Thoughts?
"	2016-09-07 21:04:45	0.0		1
633	"> You can use a single PR, but can you please split the commits into two distinct commits for the specific issues?

Done.

> I'm wondering if we can improve this slightly so that the JdbcHttpSessionConfiguration detects the Database vendor and updates the query for H2 and Derby

I like the idea. Done as well with the latest PR update.
"	2016-09-07 22:43:22	0.0		1
634	"Thanks for the PR! This is now merged into master
"	2016-09-12 18:43:24	0.0		0
635	"@rwinch I've updated the PR as per your suggestions.
"	2016-09-02 20:17:02	0.0		0
636	"User's might be a bit surprised to find out if the manually invoke `setConversionService` and then `setClassLoader` that the `ConversionService` is overridden.

Perhaps a better approach could be to remove the `setClassLoader` method and have the configuration class create a default `ConversionService`  with the appropriate `ClassLoader` if the user has not explicitly provided one.
"	2016-09-02 18:36:00	0.0		1
637	"Agreed @rwinch, that scenario came across my mind today as well.
"	2016-09-02 19:42:12	0.0		0
638	"Thanks for the PR @vpavic! This is now merged into master
"	2016-09-02 18:42:53	1.0	2016-09-02 18:42:36	0
639	Any feedback on this ?	2017-02-23 11:07:07	0.0		0
640	"This is currently somewhat rough. A decent amount of cleanup and documentation is required, and it is light on unit tests.
Integration tests are copy pasted from the JDBC integration tests with some modifications, primarily around Expiration (JDBC expires sessions manually, while the Cassandra implementation makes use of TTL).

I had issues getting [https://github.com/jsevellec/cassandra-unit](cassandra-unit) and embedded Cassandra working, so the integration test currently depends on Cassandra running outside the process on localhost (I added Cassandra to the travis service list).
"	2016-08-07 19:59:47	0.0		1
641	"I've added some comments on the code.
I guess the next step would be to add unit tests for the repository and `CassandraHttpSessionConfiguration`.

IMO it would be reeeally nice if you managed to get embedded Cassandra to work with integration tests.
"	2016-08-09 06:30:19	0.0		1
642	"Nice approach. I added my thoughts to the PR. Besides some basic configuration, you also might want to be able to configure the consistency level to tune throughput vs. consistency.
"	2016-08-09 13:06:25	0.0		1
643	"Finally got Embedded Cassandra working, not sure what I was missing initially
"	2016-08-19 12:07:03	0.0		0
644	"I guess this isn't available for public consumption yet? Thanks!
"	2016-11-12 20:54:55	0.0		0
645	"@jjazuet It's most of the way there, and we've been using similar code in prod for a few months. Not sure what else needs to happen for full inclusion or if it would be better off pulling it out into a 3rd party extension.
"	2016-11-12 21:13:22	0.0		0
646	"@Fitzoh We need a few things before it can be included:
- Documentation
- Samples

I'd also like to ask...does it perform a write on every attribute or is it just attributes that have been updated? This is an important question because writing all attributes impacts performance and is much more likely to cause race conditions.
"	2016-11-12 21:34:40	0.0		1
647	"@rwinch At the moment it's overwriting the full session on each change.

```
        Insert insert = QueryBuilder.insertInto(this.tableName)
                .value(""id"", UUID.fromString(session.getId()))
                .value(""creation_time"", session.getCreationTime())
                .value(""last_accessed"", session.getLastAccessedTime())
                .value(""max_inactive_interval_in_seconds"", session.getMaxInactiveIntervalInSeconds())
                .value(""attributes"", serializedAttributes);
        insert.using(QueryBuilder.ttl(ttl));
```

That was primarily to take advantage of Cassandra's TTL capabilities and start out simple.
"	2016-11-12 22:42:30	0.0		1
648	"@Fitzoh @rwinch let me know if I can help with samples or documentation. I'll start looking at the source code, but a few pointers on where to start would help. Thanks!
"	2016-11-14 04:50:53	0.0		0
649	"@jjzazuet I'm new to the project and not really sure where to start with the docs.
Might want to wait and make sure that the approach of serializing all attributes on save isn't a non-starter with @rwinch.
"	2016-11-14 14:02:44	0.0		0
650	"@Fitzoh still going through the source code. A few questions if possible. Pardon my ignorance if I'm missing something.
- I see that `CassandraSessionRepository` primarily relies on the `session` and `session_by_name` tables. Inside `CassandraSessionRepositoryITest` I see that there's a schema initialization snippet. How should these get initialized inside a prod cluster at runtime?
- What is currently determining the consistency levels in the queries used in `CassandraSessionRepository`, is it `CassandraTemplate`?
- How is this implementation behaving in your production applications?
- @rwinch any documentation has to go in `spring-session/docs/src/docs/asciidoc`, right?

Thanks again!
"	2016-11-16 22:26:42	0.0		1
651	"@Fitzoh 

> Might want to wait and make sure that the approach of serializing all attributes on save isn't a non-starter with @rwinch.

If possible, I think we should consider only writing the attributes that have changed. In our experience, this is somewhat critical to ensuring users get the best experience. It not only improves performance, but reduces the likelihood of race conditions which are inherent in web applications.
"	2016-11-16 22:36:10	0.0		1
652	"@jjzazuet 

Thanks for the offer to help!

> any documentation has to go in spring-session/docs/src/docs/asciidoc, right?

Correct. You can look at https://github.com/spring-projects/spring-session/commit/34cebc3df68cf1b1ae3703575933ad34c8f5e602 as a guideline. Keep in mind that we typically use webjars now, so you may want to ensure you base the samples from an existing sample application. You will notice that all code in the documentation is tested. This is required to ensure we keep high quality documentation.
"	2016-11-16 22:40:06	0.0		0
653	"@jjzazuet 
- In prod the user will be responsible for executing the necessary cql on their own.  I believe that's how it works with the jdbc backend.
- Good call on the consistency setting. By default I believe it's configured through the query options of the cluster, but we should probably allow a configuration option to set it for spring-session operations
- We haven't had any issues with it in prod, but our usage is very limited in scope.  Our application is primarily OAuth based, but we're using spring-session for the initial authentication and account management operations.
"	2016-11-16 22:50:16	0.0		1
654	"@rwinch I can take a closer look at it and see how that changes the TTL situation/schema
"	2016-11-16 22:52:52	0.0		0
655	"@rwinch ok yes, I see how the sample applications are implemented. I'll fork from @Fitzoh . Thanks!
"	2016-11-16 23:18:25	0.0		0
656	"@rwinch Ok I managed to create a new `cassandra` sample app based on the `mongo` sample app. Now I just need to fix the integration tests for the app and then I'll send a PR to @Fitzoh.

Thanks!
"	2016-11-17 07:49:46	0.0		0
657	"@Fitzoh OK, I sent out this pull request to your repo: https://github.com/Fitzoh/spring-session/pull/1 , it has a couple fixes on the config annotations, as well as an example `cassandra` app with @rwinch 's integration tests.

I'll send a second one with documentation notes (and for that I may need to ask some more questions on the implementation source code). Thanks!
"	2016-11-17 22:26:57	0.0		0
658	"Just merged it in, thanks @jjzazuet!
"	2016-11-18 00:19:54	0.0		0
659	"@Fitzoh ok, I created a new pull request in your repo: https://github.com/Fitzoh/spring-session/pull/2

@rwinch I think the new asciidoc is properly integrated with the documentation index. Now, there are still a couple of to do items I needed to ask @Fitzoh  about:

- When available, we'll need to add consistency level tuning properties for session read/write queries, as well as a few notes on their impact on cluster performance.
- I understand how we can use the properties in `EnableCassandraHttpSession` to create a `Cluster`, `Session` and a `CassandraOperations` object. However, when working within Spring Boot, can we also use these properties in `application.properties` or `application.yml`? I ask because I read these docs: http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-nosql.html#boot-features-cassandra and saw that there are configuration properties similar to our new `EnableCassandraHttpSession` annotation.

Hope my questions are clear. Thanks!"	2016-11-19 21:06:57	0.0		1
660	"Merged that PR in, thanks again @jjzazuet 

I feel like I looked into some of the spring boot annotations/autoconfiguration when I was getting started, but none of the spring boot stuff was on the project's classpath.  I can dig back in this weekend, gonna be busy with family stuff until after Thanksgiving."	2016-11-22 17:05:26	0.0		0
661	Happy Thanksgiving y'all! XD.	2016-11-22 19:46:44	0.0		0
662	Guys? Any news? :P	2016-11-29 03:21:14	0.0		0
663	"Weekend long food coma, sorry! Starting to look into configuring the consistency level now.

@vpavic @rwinch have any thoughts on the spring boot auto-configuration stuff @jjzazuet mentioned?"	2016-11-29 03:29:23	0.0		0
664	@jjzazuet planning on taking a second pass at it tonight, but consistency levels should be configurable now.	2016-11-29 13:13:20	0.0		0
665	"@Fitzoh I had a quick look at your changes.

It seems that you've added too much Cassandra specific configuration that shouldn't be part of `CassandraHttpSessionConfiguration` - namely the configuration of `Cluster` and `Session`. Both of these should be provided by an application you're using Spring Session with. You can use [`RedisHttpSessionConfiguration`](https://github.com/spring-projects/spring-session/blob/master/spring-session/src/main/java/org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.java), [`JdbcHttpSessionConfiguration`](https://github.com/spring-projects/spring-session/blob/master/spring-session/src/main/java/org/springframework/session/jdbc/config/annotation/web/http/JdbcHttpSessionConfiguration.java), or any other configuration as a guideline to model Cassandra support config. Notice that Redis and JDBC configs rely on having `RedisConnectionFactory` or `DataSource` provided to them.

Regarding Spring Boot question, Spring Session shouldn't have a dependency on Spring Boot (other than in sample apps) as this would put quite a constraint on users. To put it in other words, Spring Session configuration shouldn't care if it's used in Boot based app or not. The integration between the two is on Spring Boot's side."	2016-11-29 13:56:09	0.0		1
666	Went through and updated code per feedback, probably need to do some test fixes/sample application updates next	2016-11-30 02:44:28	0.0		0
667	"@Fitzoh @cah-andrewfitzgerald, just submitted a third pull request with documentation/test code updates: https://github.com/Fitzoh/spring-session/pull/3

@mp911de @rwinch is there anything else we're missing to accept a merge into `master`?

Thanks!"	2016-12-02 06:14:22	0.0		0
668	@jjzazuet We're currently in the RC phase of the `1.3.0` release which means this PR will be considered and more thoroughly reviewed for next releases (likely `1.4.0`). Keep an eye on the assigned milestone, and the [milestones page](https://github.com/spring-projects/spring-session/milestones) in general as an indication of release plans.	2016-12-02 06:39:05	0.0		0
669	@vpavic got it. Thanks!	2016-12-02 14:58:35	0.0		0
670	Hello everyone. Just wanted to ping to check if this PR is good for the `1.4.0` release. Thanks for your time!	2017-03-28 14:35:15	0.0		0
671	At a minimum there are some conflicts that need to be updated. I'm a little short on time at the moment, but I *think* I just gave you  push access to my repo if you want to clean those up @jjzazuet .	2017-03-28 14:39:24	0.0		1
672	@Fitzoh yep, I can give those a shot. Thanks!	2017-03-29 12:35:47	0.0		0
673	@jjzazuet @Fitzoh You don't have to worry about conflicts, I've already taken care of that on my local branch for this PR when I started working on it. Thanks!	2017-03-29 12:42:20	0.0		0
674	@vpavic got it. Many thanks!	2017-04-01 15:16:22	0.0		0
675	"I'm afraid we are removing this from the `1.4.0.M1`.

@rwinch and I have been discussing the supported data stores over the past few weeks, and the decision was made to limit the first-class supported data stores to Redis, JDBC and Hazelcast from `2.0.x` on. See #768 for more details and background. As a part of this, existing GemFire and Mongo data stores have been removed in the `master` and will be deprecated in `1.4.0.M1`.

@Fitzoh @jjzazuet we'd like to encourage you to make this effort a Spring Session community extension project. We promote such extensions in [Community Extensions](http://docs.spring.io/spring-session/docs/2.0.0.BUILD-SNAPSHOT/reference/html5/#community-extensions) section of the reference manual so please open a issue/PR to list your project in there once you set it up.

Thank you for your efforts. Also thanks to @mp911de for providing his feedback on this PR."	2017-04-28 20:49:30	0.0		1
676	"@vpavic @rwinch ay ay ay... alright... I mean, I still like the idea of keeping each data store implementation separate as per #768.

Anyway, it looks like milestone 2.0.0 M1 is nearing completion, so I guess we should target that Spring session version, right? @Fitzoh , would you like me to start a `spring-session-cassandra` repository and prepare a Gradle build for pushing out artifacts into JCenter?

Thanks!"	2017-04-30 02:49:44	0.0		0
677	"Is Ingalls milestone release really required here? Other Spring Data dependencies are on Hopper release train level ATM, so we should use `1.4.2.RELEASE`.
"	2016-08-09 06:11:10	0.0		1
678	"You shouldn't be using internals from other repository implementations. There is a PR to extract and generify session index resolving (see #557) however for now you should just copy `PrincipalNameResolver` into your repository.
"	2016-08-09 06:16:45	0.0		1
679	"`CassandraOperations` would be more test-friendly here.
"	2016-08-09 06:17:37	0.0		0
680	"IMO we should avoid depending on Guava.
"	2016-08-09 06:22:11	0.0		1
681	"Same as [here](https://github.com/spring-projects/spring-session/pull/589/files#r74003587)
"	2016-08-09 06:22:41	0.0		0
682	"Since this is an integration test, you should name it `CassandraSessionRepositoryITest` to be consistent with other integration tests.
"	2016-08-09 06:25:32	0.0		1
683	"Cool, I had a mental TODO of extracting that to a common class, will just copy-paste for now.
"	2016-08-09 11:10:12	0.0		0
684	"done
"	2016-08-09 11:25:38	0.0		0
685	"done
"	2016-08-09 11:30:12	0.0		0
686	"done
"	2016-08-09 11:31:16	0.0		0
687	"done
"	2016-08-09 11:41:36	0.0		0
688	"done
"	2016-08-09 11:47:42	0.0		0
689	"Performing that check eagerly might help skip conversion (serialization)
"	2016-08-09 12:56:31	0.0		0
690	"Docs should mention batches are used for atomicity reasons
"	2016-08-09 12:57:28	0.0		1
691	"How about batch loading for multiple `UUID`s?
"	2016-08-09 12:58:41	0.0		0
692	"You might want to keep contact points configurable and maybe qualify the `Cluster` instance
"	2016-08-09 13:00:16	0.0		1
693	"You might want to keep the keyspace name configurable and add a qualifier. Otherwise, this `Session` instance might be used by other components (Spring Data, Zipkin, ...)
"	2016-08-09 13:01:20	0.0		1
694	"Qualifier also for the `CassandraTemplate`.
"	2016-08-09 13:01:58	0.0		1
695	"Lowered to the stable version, which also drops the Cassandra version from 3 to 2.

Tests fail on cass3, but pass on cass2 locally. 

Pretty sure this means the travis tests will be broken until I can get embedded cass working.
"	2016-08-09 22:45:27	0.0		1
696	"Good call, updated
"	2016-08-09 22:54:30	0.0		0
697	"Batch is only for insert, update, delete isn't it?
http://docs.datastax.com/en/cql/3.1/cql/cql_reference/batch_r.html
Or are you talking about doing:
`select * from session where id in [<list of uuids>]`?
"	2016-08-10 00:57:11	0.0		1
698	"updated
"	2016-09-08 06:58:51	0.0		0
699	"updated
"	2016-09-08 07:21:15	0.0		0
700	"updated
"	2016-09-08 07:21:24	0.0		0
701	How about changing to `CREATE KEYSPACE IF NOT EXISTS ...`? Removes the need to catch `AlreadyExistsException` in `public Session session()`.	2016-11-29 14:18:32	0.0		1
702	Index access is quite low-level. How about access by column name?	2016-11-29 14:22:28	0.0		1
703	Injecting `CqlOperations` is sufficient for this kind of access. Future versions of Spring Data Cassandra will break up the inheritance `CassandraOperations` `->` `CqlOperations` so using `CqlOperations` is the more future proof approach.	2016-11-29 14:23:57	0.0		0
704	Is this result required? Currently, it's not assigned.	2016-11-29 14:24:48	0.0		1
705	`@EnableCassandraHttpSession`	2016-11-29 14:29:56	0.0		0
706	"This class assumes it's the sole source for Cassandra infrastructure. How about setting `ConsistencyLevel` on `Cluster`?

```java
Cluster.builder().withQueryOptions(new QueryOptions().setConsistencyLevel(consistencyLevel))
```

Setting `ConsistencyLevel` on `CassandraSessionRepository` is a good approach as environments using Cassandra for other purposes might configure `Cluster` differently."	2016-11-29 14:34:05	0.0		1
707	"IMO we should avoid depending on Guava.
"	2016-08-09 06:22:11	0.0		1
708	"Same as [here](https://github.com/spring-projects/spring-session/pull/589/files#r74003587)
"	2016-08-09 06:22:41	0.0		0
709	"Since this is an integration test, you should name it `CassandraSessionRepositoryITest` to be consistent with other integration tests.
"	2016-08-09 06:25:32	0.0		1
710	@mp911de Yes, I agree with you and have expressed similar concerns (see [comment](https://github.com/spring-projects/spring-session/pull/589#issuecomment-263576014)). Thank you for reviewing this PR again!	2016-11-29 19:54:46	0.0		0
711	updated	2016-11-30 02:23:35	0.0		0
712	Skipping this per @vpavic's feedback. We shouldn't be configuring the cluster at all.	2016-11-30 02:28:33	0.0		0
713	updated	2016-11-30 02:34:37	0.0		0
714	removed	2016-11-30 02:34:42	0.0		0
715	fixed	2016-11-30 02:34:49	0.0		0
716	fixed	2016-11-30 02:35:00	0.0		0
717	Sounds good guys, I'll get that stripped out.	2016-11-30 02:37:23	0.0		0
718	leaving that one for @jjzazuet 	2016-11-30 02:43:12	0.0		0
719	"Thanks for the PR @vpavic! This is now merged into master
"	2016-08-15 18:26:09	1.0	2016-08-15 18:25:54	0
720	"@cambierr Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=586)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-session&pullRequestId=586) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.
"	2016-08-05 13:45:34	0.0		0
721	"@vpavic Thanks for the PR! Any chance we could get a test added?
"	2016-08-15 18:31:52	1.0	2016-08-15 19:25:37	1
722	"@rwinch Done - I've updated the PR.
"	2016-08-15 19:08:12	1.0	2016-08-15 19:25:37	0
723	"Thanks for the fast turnaround @vpavic! This is now merged into master
"	2016-08-15 19:25:58	1.0	2016-08-15 19:25:37	0
724	"Thanks for the PR @vpavic! This is now merged into master
"	2016-08-15 18:34:25	1.0	2016-08-15 18:34:12	0
725	"Thanks for the PR! This is merged into master
"	2016-06-30 02:22:49	0.0		0
726	"@pasali Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=564)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-session&pullRequestId=564) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.
"	2016-06-29 14:38:43	0.0		0
727	"@pasali Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=564)!
"	2016-06-29 16:20:42	0.0		0
728	"@pasali Thanks for the PR! This is merged into master. I also added a test for your (optional) review to ensure we don't have problems again via 4a1f132e073599abf243e5b0dbf03069f693dbf3

Thanks again!
"	2016-06-29 16:59:31	0.0		0
729	"@edeandrea Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=562)!

[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-session&pullRequestId=562) to manually synchronize the status of this Pull Request.

See the [FAQ](https://cla.pivotal.io/faq) for frequently asked questions.
"	2016-06-28 15:06:10	0.0		0
730	"@edeandrea Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=562)!
"	2016-06-28 15:07:48	0.0		0
731	"Thanks for the PR!
- Can you please add tests?
- Spring Session's web module cannot rely on Spring framework. Any chance you can update the PR to no longer use UriComponents?
"	2016-09-07 21:36:19	0.0		1
732	"I can surely do that. As for the module not relying on Spring Framework - I can certainly do that. My initial reaction that that though is that if the dependency isn't allowed - shouldn't the build fail with a compilation error? The fact that it didn't means that Spring Framework is on the compile classpath (I checked before I made the change as I did not want to introduce a dependency that wasn't already there). If indeed the Spring Framework shouldn't be there, then the build itself should be cleaned up as well so that the dependency isn't there to begin with.
"	2016-09-07 23:58:54	0.0		1
733	"I think I noticed another bug as well in CookieHttpSessionStrategy.encodeUrl.

Run this test - it fails...

``` java
@Test
public void encodeURLWithSameAlias() {
  String url = String.format(""/url?%s=1"", CookieHttpSessionStrategy.DEFAULT_SESSION_ALIAS_PARAM_NAME);
  assertThat(this.strategy.encodeURL(url, ""1"")).isEqualTo(url);
}
```

It will give you this output:
org.junit.ComparisonFailure: expected:<""/url?_s=1[]""> but was:<""/url?_s=1[&_s=1]"">

I will fix this as well in my next PR (since some of my other tests will fail until this is fixed).
"	2016-09-08 12:58:43	0.0		1
734	"Thanks for the updates! This is merged into master via bff0f8f8452bb4b87a6576fe66168b89f50602b3
"	2016-09-12 16:07:15	0.0		0
735	"Thanks for the PR! This is now merged into master
"	2016-06-21 19:05:41	0.0		0
736	"@vpavic Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=557)!
"	2016-06-20 21:19:38	0.0		0
737	"@rwinch I've updated the PR to address the concerns from our previous discussion.

`IndexResolver` now provides operations to indicate the supported indexes, and resolve all indexes. It also includes `Delegate` contract for delegates such as `PrincipalNameIndexResolver`.

`FindByIndexNameSessionRepository` implementations currently do not adopt these changes. I'll do that part after your review.
"	2016-06-29 19:18:50	0.0		0
738	"@vpavic Thanks for the update. This doesn't appear to be what I had in mind. Is there a reason we need anything other than:

``` java
public interface IndexResolver<S extends Session> {
    Map<String,String> resolveIndexes(S session);
}
```

as outlined in my comments?
"	2016-06-29 20:10:08	0.0		1
739	"Having the possibility to check whether given index name is supported by the resolver vastly simplifies the checks found in `FindByIndexNameSessionRepository#findByIndexNameAndIndexValue` implementations. This can now be handled via single call of `IndexResolver#supportsIndex`. I thought you referred to that by _Introducing this new API we have yet another API that needs to be aware of the index names and be kept in sync_.

`Delegate` spec simplifies the `IndexResolver` implementation, with the provided `DefaultIndexResolver` IMO covers all the use cases and avoids having ugly `if-then-else` logic in `IndexResolver` implementations.

Resolving a single index is also pretty common case IMO, there are two examples in `RedisOperationsSessionRepository` alone:
- [`cleanupPrincipalIndex`](https://github.com/spring-projects/spring-session/blob/master/spring-session/src/main/java/org/springframework/session/data/redis/RedisOperationsSessionRepository.java#L543)
- [`RedisSession` constructor](https://github.com/spring-projects/spring-session/blob/master/spring-session/src/main/java/org/springframework/session/data/redis/RedisOperationsSessionRepository.java#L699)

Also with this design we could easily support users adding their own indexes with some `FindByIndexNameSessionRepository` implementations - they would simply implement `Delegate` contract and register beans which we would then get automatically register with `IndexResolver`. 
"	2016-06-29 23:05:21	0.0		0
740	"@vpavic Thanks for your response.

> Having the possibility to check whether given index name is supported by the resolver vastly simplifies the checks found in FindByIndexNameSessionRepository#findByIndexNameAndIndexValue implementations. 

Ok. I see your point. Sorry for the confusion. It might be good to continue doing this sort of optimization.

I was planning on having the implementation just attempt to perform the lookup regardless of if the index was supported. If the value wasn't indexed, it would be a null session.

Do you see reason for having both `supportedIndexes` and `supportsIndex` method?

I'd really like to keep this API as simple as possible. I think it may be valuable to remove both the `supportedIndexes` and `supportsIndex` methods. It seems that we will have all the information we need with a single method.

> Delegate spec simplifies the IndexResolver implementation, with the provided DefaultIndexResolver IMO covers all the use cases and avoids having ugly if-then-else logic in IndexResolver implementations.
> ...
> Resolving a single index is also pretty common case IMO

Agreed. This is a common use case.

Could this be an abstract class rather than an interface?

> Also with this design we could easily support users adding their own indexes with some FindByIndexNameSessionRepository implementations - they would simply implement Delegate contract and register beans which we would then get automatically register with IndexResolver.

We can do the same by having them provide multiple `FindByIndexNameSessionRepository` implementations. Right?
"	2016-06-30 00:55:33	0.0		1
741	"> I was planning on having the implementation just attempt to perform the lookup regardless of if the index was supported. If the value wasn't indexed, it would be a null session.

I see, however I was driven by optimization considerations from the start - why run the resolver logic if we have enough knowledge to know it won't yield any result?

> Do you see reason for having both `supportedIndexes` and `supportsIndex` method?

I agree we probably don't need both, `supportsIndex` is by far more relevant for a typical usage of `IndexResolver`.

> I'd really like to keep this API as simple as possible. I think it may be valuable to remove both the `supportedIndexes` and `supportsIndex` methods. It seems that we will have all the information we need with a single method.

Could you please clarify this a bit more? What single method do you refer to if we remove the both support-methods? Or did you mean remove one of the methods rather than remove both?

> Could this be an abstract class rather than an interface?

Yes, I've also considered such approach.

> We can do the same by having them provide multiple `FindByIndexNameSessionRepository` implementations. Right?

Right. But I feel there should be a single `SessionRepository` bean in the app context, anything else requires some sort of compromise when it comes to consuming the repository.

So to sum things up before I make an update, we'd trim the `IndexResolver` contract to something like this:

``` java
public interface IndexResolver<S extends Session> {

    boolean supportsIndex(String indexName);

    String resolve(S session, String indexName);

    Map<String, String> resolveAll(S session);

}
```

The `Delegate` spec would be moved to the `AbstractIndexResolver`.
"	2016-07-07 10:06:55	0.0		1
742	"@vpavic 

> I see, however I was driven by optimization considerations from the start - why run the resolver logic if we have enough knowledge to know it won't yield any result?

We don't know that we are the only repository writing to the data store. There might be something else providing the indexes. Perhaps a background job or another application. 

There is a cost to maintaining this additional code with (in my opinion) little gain. In short, I still think this needs to be removed.

I really think our API should look closer to:

``` java
public interface IndexResolver<S extends Session> {

    Map<String, String> resolveIndexesFor(S session);
}
```

Then we can provide an abstract class that supports resolving a single index. For example:

``` java
public abstract class AbstractSingleIndexResolver<S extends Session>  implements IndexResolver<S> {
    private final String sessionIndexName;

    protected AbstractSingleIndexResolver(String sessionIndexName) {
        this.sessionIndexName = sessionIndexName;
    }

    protected abstract String resolveIndexValueFor(S session);

    public final Map<String,String> resolveIndexesFor(S session) {
        String sessionIndexValue = resolveIndexValueFor(session);
        return sessionIndexValue == null ? Collections.<String,String>emtpyMap() : Collections.singletonMap(sessionIndexName, sessionIndexValue);
    }
}
```
"	2016-08-15 18:48:54	0.0		1
743	"> We don't know that we are the only repository writing to the data store. There might be something else providing the indexes. Perhaps a background job or another application.

@rwinch Thanks for the insight, all clear now, I wasn't aware that this was an option to consider.

I can update the PR with your suggested API within few days and try to wire it altogether into repository implementations.
"	2016-08-15 19:19:27	0.0		0
744	"@vpavic Thanks!
"	2016-08-15 19:26:25	0.0		0
745	"@rwinch I've updated the PR. Please verify that the implementation is now OK with you, before I continue forward.
"	2016-08-17 12:32:55	0.0		0
746	"@vpavic Sorry for the delay getting back to you. Yes this is what I had in mind. Thanks again!
"	2016-09-07 21:42:20	0.0		0
747	"@vpavic I should have been more explicit. I can merge this once you are able to add testing and documentation.

Thanks again for everything you do for Spring Session and Spring in general!
"	2016-09-07 21:46:57	0.0		1
748	"@rwinch Thanks for the feedback!

I'll try to get back to this next week and integrate the `IndexResolver` into `FindByIndexNameSessionRepository` implementations, as well as write the tests.
"	2016-09-07 22:11:07	0.0		0
749	"@rwinch I've updated the PR with tests and refactored `FindByIndexNameSessionRepository` implementations to use the new API.

I've also left some comments on the code concerning the previously discussed availability of method that resolves a single index.
"	2016-09-18 15:04:00	0.0		0
750	"@rwinch Any feedback on the latest updates? Since there are two PRs with new repository implementations scheduled for `1.3.0.M3` as well it might be good idea to get this one in earlier because it will have impact on them.
"	2016-10-05 16:07:19	0.0		0
751	Rebased the PR against `1.4.x`.	2016-12-20 20:50:17	0.0		0
752	"What do we do if it supports multiple indexes?
"	2016-06-21 19:01:29	0.0		0
753	"Perhaps the input should just be the session and the result that has a mapping of index name to index value. Is there any advantage in only supporting a single session attribute?
"	2016-06-21 19:03:14	0.0		1
754	"Well, this is basically just an abstract base class that simplifies implementing single-purpose `IndexResolver`. Nothing in the `IndexResolver` contract itself prevents the implementations from supporting multiple indexes, as demonstrated by `CompositeIndexResolver`.
"	2016-06-21 21:12:40	0.0		0
755	"IMO that wouldn't be optimal solution since it implies execution of logic for all supported indexes. This way you extract only what you need in a given situation.
"	2016-06-21 21:14:36	0.0		1
756	"How would implementations that support multiple indexes (i.e. Gemfire) use this API?

The SessionRepository could keep all the index names that need indexing. However, that means the SessionRepository and the IndexResolver configuration need to be kept in sync which is not ideal.
"	2016-06-21 21:24:48	0.0		0
757	"Each `FindByIndexNameSessionRepository` implementation would internally define its supported `IndexResolver`s, either using a `CompositeIndexResolver` or some other way. These would then get consumed according to repository needs, i.e. the same way duplicated principal name resolving logic is consumed now.

This approach allows having some resolvers that are reused across all repository implementations, such as `PrincipalNameIndexResolver`, as well as each implementation having its specific resolvers. If you would go the _input should just be the session and the result that has a mapping of index name to index value_ route then you wouldn't be able to reuse this logic.
"	2016-06-21 22:19:42	0.0		0
758	"> either using a CompositeIndexResolver or some other way.

This requires another API because the current interface must have knowledge of the index name.

> If you would go the input should just be the session and the result that has a mapping of index name to index value route then you wouldn't be able to reuse this logic.

Why not? Seems you could do this:

``` java

public interface IndexResolver<S extends Session> {
    Map<String,String> resolveIndexes(S session);
}

public class PrincipalNameIndexResolver<S extends Session> implements IndexResolver<S> {
    private SpelExpressionParser parser = new SpelExpressionParser();
    private String indexName = FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME;

    public String resolvePrincipal(Session session) {
        String principalName = session.getAttribute(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME);
        if(principalName != null) {
            return principalName;
        }
        Object authentication = session.getAttribute(""SPRING_SECURITY_CONTEXT"");
        if(authentication != null) {
            Expression expression = parser.parseExpression(""authentication?.name"");
            return expression.getValue(authentication, String.class);
        }
        return null;
    }

    @Override
    public Map<String, String> resolveIndexes(S session) {
        String index = resolvePrincipal(session);
        if(index == null) {
            return Collections.emptyMap();
        }
        return Collections.singletonMap(indexName, index);
    }
}

public class GemfireIndexResolver<S extends Session> implements IndexResolver<S> {
    private PrincipalNameIndexResolver<S> principalResolver = new PrincipalNameIndexResolver<>();

    @Override
    public Map<String, String> resolveIndexes(S session) {
        Map<String, String> gemfireIndexes = resolveThem(session);
        gemfireIndexes.putAll(principalResolver.resolveIndexes(session));
        return gemfireIndexes;
    }

    private Map<String, String> resolveThem(S session) {
        // TODO
        return null;
    }
}
```
"	2016-06-22 13:49:08	0.0		1
759	"> This requires another API because the current interface must have knowledge of the index name.

Yes, that's by design since I originally intended `IndexResolver` implementations to be single purpose. Each `FindByIndexNameSessionRepository` implementation holds the knowledge of its supported indexes anyway, doesn't it? Or did you mean _another API_ as in API targeted at users? Perhaps `FindByIndexNameSessionRepository` interface itself should communicate the index names it is capable of resolving?

> Why not? Seems you could do this:

That kind of implementation is exactly what I wanted to avoid :) Your `GemfireIndexResolver` will get messy once other `IndexResolver` resolvers get in there too since you're relying on the concrete `IndexResolver` implementation.

Regarding your proposed `IndexResolver` API and Gemfire implementation, consider things from perspective of current usage of `PrincipalNameResolver`s and equivalent logic - you'd really like to run the resolving for all the indexes and then extract the single value you're interested in instead of current `PrincipalNameResolver#resolvePrincipal`?
"	2016-06-22 14:33:44	0.0		1
760	"> Each FindByIndexNameSessionRepository implementation holds the knowledge of its supported indexes anyway, doesn't it? 

It does. Introducing this new API we have yet another API that needs to be aware of the index names and be kept in sync. The proposed change allows all the index logic to be moved into the new resolver api.

> Your GemfireIndexResolver will get messy once other IndexResolver resolvers get in there too since you're relying on the concrete IndexResolver implementation.

How would this be cleaner with the original design? Either way you would need to have that specific functionality.

> you'd really like to run the resolving for all the indexes and then extract the single value you're interested in instead of current 

When are we interested in only a single index?
"	2016-06-22 15:04:15	0.0		1
761	"I've updated the PR with changes to `FindByIndexNameSessionRepository` implementations to better demonstrate the intended usage of `IndexResolver`s

> When are we interested in only a single index?

Well, at any given time you're attempting to resolve an index you're interested in a single value, right? Unless I'm missing something obvious.
"	2016-06-22 18:40:20	0.0		0
762	"Most the time I want to write all the index's (that have changed) to the data store. This could easily be done with the suggested changes.

If I'm looking up an index, then the user provides the index name and the index value so I do not need to resolve anything.
"	2016-06-22 18:49:51	0.0		0
763	"But this is dependent on the technology used to implement the repository, isn't it? For example, consider the [PrincipalNameExtractor](https://github.com/spring-projects/spring-session/pull/544/files#diff-961fafd60c6c9cf34e7772ea7993d626) from #544. It's basically a wrapper around an `IndexResolver`.

OK, it certainly makes sense to provide API to communicate all the supported indexes. What are you thoughts on making it a part of `FindByIndexNameSessionRepository`?
"	2016-06-23 19:31:46	0.0		0
764	"> It's basically a wrapper around an IndexResolver

Right, but the logic to resolve the index would be able to be reused. This is the goal. If we need adapters to translate the results of the IndexResolver into implementation specific code this is much easier than rewriting the code for resolving the indexes.

> What are you thoughts on making it a part of FindByIndexNameSessionRepository?
- This interface is already GA, so we cannot add a new method on it
- I don't think this is the right place for it. User's do not care what the indexes are. It is the internal implementation that cares about the indexes. So the `FindByIndexNameSessionRepository` implementation would have an `IndexResolver` injected into it.
"	2016-06-23 20:33:53	0.0		1
765	"This would benefit from `IndexResolver` having a method to resolve single index. However the GemFire repository implementation is the one I'm least familiar with, so this altogether could perhaps be refactored in a more optimal way.
"	2016-09-18 14:51:04	0.0		1
766	"This would benefit from `IndexResolver` having a method to resolve single index.
"	2016-09-18 14:52:13	0.0		1
767	"This would benefit from `IndexResolver` having a method to resolve single index.
"	2016-09-18 14:52:26	0.0		1
768	"This would benefit from `IndexResolver` having a method to resolve single index. ATM I'm using `SingleIndexResolver` directly here, which I had to change a bit (make `SingleIndexResolver#resolveIndexValueFor` `public` instead of `protected` as originally outlined). `ValueExtractor`s are instantiated by Hazelcast, so perhaps the best would be to have Hazelcast specific `IndexResolver` implementation.
"	2016-09-18 14:57:45	0.0		1
769	"@eddumelendez Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=555)!
"	2016-06-18 17:03:13	1.0	2016-06-21 17:50:11	0
770	"Thanks for the PR! This is now merged into master
"	2016-06-21 17:50:34	1.0	2016-06-21 17:50:11	0
771	"@jxblum Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=549)!
"	2016-06-14 01:31:05	0.0		0
772	"@jxblum Preferably, you'd use webjars for client-side web libs, see #454 and #491 for some examples.
"	2016-06-14 08:51:35	0.0		1
773	"@jxblum Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=549)!
"	2016-06-17 20:41:25	0.0		0
774	"@rwinch and @vpavic _Spring Boot_ **WebJars** support added to the `httpsession-gemfire-boot` sample as requested.

@rwinch let me know if you have any other feedback; if not, I (or you) can merge this if approved.

Thanks!
"	2016-06-28 02:39:36	0.0		0
775	"Thanks for the PR! This is merged into master with a little polish via 808a5503438e0949d0e5cb209817534870bc95b5
"	2016-06-29 16:10:02	0.0		0
776	"@vpavic Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=544)!
"	2016-06-09 20:56:51	0.0		0
777	"@vpavic Thanks for the PR! It appears the build is failing. Any chance you could take a look?
"	2016-06-14 17:50:34	0.0		1
778	"Hey @rwinch, yes, it's failing as I didn't finish the configuration part that sets up the principal name extracting.

I just opened the PR to get your initial thoughts before finishing the config part and other remaining action points.
"	2016-06-14 18:02:50	0.0		1
779	"@vpavic Thanks for the fast response. I should have been more diligent about reading the message.

Is it possible to only write the session attributes that have changed vs saving the entire map every time? This has turned out to be a pretty important approach to reduce the possibility of race conditions.
"	2016-06-14 19:48:42	0.0		1
780	"@rwinch I've updated the PR.

The configuration part is done and the build now passes. I've also added Javadoc on new classes, other TODOs from the original comments are still pending but hopefully I'll get to finish those by the end of this week.

Regarding saving the session only when changes are detected, the new `HazelcastSessionRepository` uses plain `MapSession` so I'll just make use of the changes done there in #528.

Additionally, I've been in contact with @stojsavljevic over the past few weeks and he's started to do some work on #516 which is somewhat related to this.
"	2016-06-14 21:14:58	0.0		0
781	"@vpavic - These are great changes!

I don't know if it is possible, but I'd like to see an option similar to REDIS and JDBC repositories which only writes the session attribute that changed. For example, if I invoke:

```
session.setAttribute(""foo"",""bar"");
repo.save(session);
session.setAttribute(""new"",""test"");
repo.save(session);
```

The second save should not need to write the session attribute ""foo"". This helps reduce the likely hood of a race condition. At minimum it would be good to try to ensure if the last update time is changed, that only that needs to be written vs the entire Session.

This might not be possible with Hazelcast, but I'd like to make sure we investigate this possibility.
"	2016-06-14 21:22:50	0.0		0
782	"@rwinch Thanks for the feedback!

> This might not be possible with Hazelcast, but I'd like to make sure we investigate this possibility.

I'm afraid it's not but I'll look into it over the next few days.
"	2016-06-14 21:28:05	0.0		0
783	"@rwinch I've updated PR with tests and have polished the general implementation a bit.

Regarding the individual attribute writes, both @stojsavljevic and I don't see how we could achieve that without dropping the traditional, single `Map` semantics on session persistence and employing a more complicated implementation that would dissect session persistence into multiple `Map`s.
"	2016-06-19 21:45:59	0.0		0
784	"Do we really want to drop support for Hazelcast in client mode? This was raised as an issue (#339) back when the original implementation was added so could be viewed as a regression.
"	2016-06-20 21:36:02	0.0		0
785	"@manderson23 The client mode support is not dropped with this change.

I assume my original comment confused you - sorry for that. It was a problem in the initial implementation that has been taken care of since, in the subsequent updates of this PR. I'll update to original comment to address this.

Also, you can see that the integration tests for client mode are passing now.
"	2016-06-20 21:42:53	0.0		0
786	"OK thanks. 

FWIW I agree that individual attribute writes would be difficult with Hazelcast. I wouldn't like to see multiple Maps introduced.
"	2016-06-20 22:57:53	0.0		0
787	"@rwinch I've updated the PR with documentation and samples changes.
"	2016-06-23 03:31:57	0.0		0
788	"@rwinch Is it safe to assume this will make the `1.3.0.M1`?

I've completed all the initially planned TODOs, regarding other changes, once this hits the master @stojsavljevic will follow up with a PR of his own to address the #516. There will also be some changes depending on the outcome of #557.
"	2016-06-29 16:52:50	0.0		0
789	"@rwinch I've updated the PR with some final polish, namely to use the current Hazelcast 3.6.5 release and to apply the changes equivalent to #608.
"	2016-09-13 12:59:19	0.0		0
790	"I left a few comments on JavaDocs. The actual code looks good to me. Great work, @vpavic 
"	2016-09-13 14:19:57	0.0		0
791	"@shakuzen Thanks for the review, I've addressed most of you comments with the latest PR update.
"	2016-09-13 15:58:17	0.0		0
792	"Thanks for the PR! This was merged via 3efb4c9c9e06dcd064ebe4a015f1e5492dd103fd
"	2016-09-14 00:50:43	0.0		0
793	"listen → listens
"	2016-09-13 13:39:22	0.0		0
794	"translate → translates
"	2016-09-13 13:39:40	0.0		0
795	"This is the publisher for all of the Session events, but the JavaDoc here only mentions the `SessionDestroyedEvent`, which I think might be a little confusing for users.
"	2016-09-13 13:44:14	0.0		1
796	"Nit-pick: ""newly created"" seems to be adding emphasis but I'm not sure why. Any session that has been inactive for the set amount of time will be invalidated, right?
"	2016-09-13 13:46:28	0.0		1
797	"This description is actually taken from the `RedisOperationsSessionRepository`. IMO such wording is used to make emphasis that `defaultMaxInactiveInterval` is used during creation of events in `SessionRepository#createSession`.
"	2016-09-13 16:01:25	0.0		0
798	"To me that sounds like leaking implementation details that are not what I would expect a person using this method to need to know about or care about.
"	2016-09-14 03:17:24	0.0		0
799	"Thanks for the PR! This is merged into master
"	2016-06-06 13:46:08	1.0	2016-06-06 13:45:19	0
800	"Thanks for the PR!

I'm going to reject this for the reasons provided in the response to the GitHub issue. See https://github.com/spring-projects/spring-session/issues/537#issuecomment-223967872
"	2016-06-06 14:15:39	0.0		0
801	"Thanks for the PR @eddumelendez! You are a machine :)

I gave some feedback in the code.
"	2016-05-23 13:46:20	0.0		0
802	"Hi,

will we have an option to choose between saving immediately upon change and saving once per request?

Thanks!
"	2016-05-24 14:37:19	0.0		0
803	"@stojsavljevic Thanks for the question. This PR is not about writing immediately vs writing in a batch. Instead this is about ensuring that if nothing on the session has been set, then it will not be saved again.

@eddumelendez We should probably provide a flag to ensure that the default behavior is preserved. This is necessary for someone who might make changes like this:

``` java
Session session = ...;
User user = session.getAttribute(""user"");
user.setFirstName(""New"");
```

Currently this change will be visible. However, with the changes, setAttribute will not have been invoked and thus the change will not persist.

For this reason, we should probably add a flag named something like `persistOnSessionChange` which defaults to false.
"	2016-06-14 19:24:59	0.0		1
804	"@eddumelendez Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-session&pullRequestId=528)!
"	2016-06-15 15:16:18	0.0		0
805	"I don't think we need isNew. When the MapSession is new, the id has changed.
"	2016-05-23 13:43:45	0.0		1
806	"Can we change this to method to `markUnchanged`
"	2016-05-23 13:44:36	0.0		1
807	"I think we should change this to package scope.
"	2016-05-23 13:45:30	0.0		1
808	"We should also change this to package scope.
"	2016-05-23 13:45:43	0.0		1
809	"I wonder if we should mark this as `changed` if `this.sessionAttrs.remove(attributeName)` returns `null`?
"	2016-05-27 12:07:26	0.0		1
810	"Maybe we should use `MapSession` in the generic type (to avoid downcasts) like in other repositories?
@rwinch Is this breaking change?
"	2016-05-27 12:12:56	0.0		1
811	"@tsachev I think  you are right. While this would be a breaking change, it is quite minor and can be acceptable for a minor release (most users leveraging it will likely be using `SessionRepository<? extends ExpiringSession>`.

@eddumelendez Can you update this to use MapSession generic type?
"	2016-06-14 19:19:22	0.0		1
812	"@rwinch Sure, I wil.
"	2016-06-15 04:30:54	0.0		0
813	"I find this javadoc misleading. In my mind, this flag is not about when session will be saved (after changes or immediately). It's about avoiding save when changes are not detected. But we must state that changes might not be detected (as @rwinch pointed out). Also, we should state that flag can help to reduce the possibility of race conditions.
"	2016-06-24 09:44:07	0.0		1
814	"Thanks for the PR! I have commented on the code.

cc @jkubrynski Please take a look at this
"	2016-05-23 13:49:11	0.0		0
815	"Thanks for the PR @eddumelendez, but we're closing this due to Mongo support being deprecated in 1.4.x and removed in 2.0.x.
See #768 for more background."	2017-05-30 21:04:32	0.0		0
816	The new repo is at https://github.com/spring-projects/spring-session-data-mongodb	2017-05-30 21:09:48	0.0		0
817	"I don't think we need isNew because when it is new the id has changed
"	2016-05-23 13:47:06	0.0		1
818	"Make this package scope
"	2016-05-23 13:47:30	0.0		1
819	"Rename to `markUnchanged`
"	2016-05-23 13:48:41	0.0		1
820	"Thanks for the PR! This is merged into master
"	2016-05-16 13:04:56	1.0	2016-05-16 13:04:47	0
821	"Thanks for the PR! This is now merged into master
"	2016-05-20 16:57:09	1.0	2016-05-20 16:56:58	0
822	"Thanks merged!
"	2016-05-06 22:04:00	1.0	2016-05-06 22:03:40	0
823	Thanks for the PR @eddumelendez! This is now merged into master	2016-11-23 03:48:41	1.0	2016-11-23 03:48:54	0
824	Thanks for the PR @eddumelendez This is now merged into master	2016-11-23 03:23:34	0.0		0
825	Thanks for the PR @eddumelendez! This is now merged via 2d359986d37bc7b032985e620685b38814cafdc2	2016-11-23 03:46:50	0.0		0
826	"@eddumelendez This is a step in the right direction. However, it isn't quite what #275 had in mind. The problem is that a cookie with the same name can be presented multiple times in the request. This happens if the cookie is associated to different paths or different domains. I updated the original issue to better illustrate the problem.
"	2016-05-02 19:55:02	0.0		1
827	"@rwinch thanks for the details. I will take a look and see if can update the PR.
"	2016-05-03 05:02:45	0.0		0
828	"Thanks for the PR! This is now merged into master
"	2016-05-02 20:12:02	1.0	2016-05-02 20:11:54	0
829	"@snicoll Given you provided some good feedback on #489 I thought you might to review this
"	2016-04-25 13:42:31	1.0	2016-04-26 19:27:02	0
830	"LGTM
"	2016-04-25 13:48:26	1.0	2016-04-26 19:27:02	0
831	"@eddumelendez Thanks for the PR! This is now merged into master
"	2016-04-26 19:27:25	1.0	2016-04-26 19:27:02	0
832	"PR updated with javadoc/documentation changes.
"	2016-04-21 14:56:50	0.0		0
833	"@vpavic This is awesome. Do you hit any performance penalty?
"	2016-04-21 21:27:22	0.0		0
834	"@cemo Thanks for the reminder, I did some benchmarks.

The test uses 20 threads to create 10000 sessions, then updates them using different scenarios, reloads them from database, and finally deletes them. Sessions are created with 5 randomly generated `String` attributes, one static `String` attribute and `SecurityContext` attribute

I ran that on PostgreSQL. Here are the results:

Current master:

> Created 10000 sessions in 6718 millis
> Updated (add new attribute) 10000 sessions in 6050 millis
> Updated (modify existing attribute) 10000 sessions in 4684 millis
> Updated (modify last accessed time) 10000 sessions in 4735 millis
> Updated (modify security context) 10000 sessions in 7008 millis
> Loaded 10000 sessions in 2925 millis
> Deleted 10000 sessions in 3723 millis

This PR:

> Created 10000 sessions in 13794 millis
> Updated (add new attribute) 10000 sessions in 5348 millis
> Updated (modify existing attribute) 10000 sessions in 3171 millis
> Updated (modify last accessed time) 10000 sessions in 3370 millis
> Updated (modify security context) 10000 sessions in 5209 millis
> Loaded 10000 sessions in 3359 millis
> Deleted 10000 sessions in 3625 millis
"	2016-04-22 07:13:21	0.0		0
835	"> Decide whether to provide an option on persistence mode (single BLOB vs individual attributes)

There might be one another choice for this. Individual attributes are required in scenarios where they have to be updated outside from the application such as cron jobs. In these cases actually we are just interested in some attributes not all of them. Simple session attributes which are updated only by user are not necessary to be stored in individual attributes table. I do not know what can we do for this but I just wanted to share this as well.   

Thank you so much for everything. <3
"	2016-04-22 08:48:32	0.0		0
836	"Thanks for the feedback @cemo!

Interesting approach on attributes persistence. It seems optimal from the perspective of number of BLOBs involved but I see two downsides - it makes the configuration more complex, and it seems to require some extra logic in session handling.

The more I look at this the more it seems to me that individual attributes is the way to go. The only downside is the performance on initial save but I've been able to optimize that a bit by using `JdbcTemplate#batchUpdate`.
"	2016-04-22 13:00:31	0.0		0
837	"@vpavic Thanks for the updated PR! I have been swamped with other things and haven't had a chance to look at this in any detail. I will review first thing Monday morning.
"	2016-04-22 21:57:02	0.0		0
838	"Thanks for the PR! This is merged via 00e7110594e39bd81da79934719ad491275ddb80
"	2016-04-26 20:17:28	0.0		0
839	"Thanks for the PR! This is merged into master
"	2016-04-19 04:28:14	1.0	2016-04-19 04:27:48	0
840	"@vpavic thanks for feedback.

@rwinch I have updated the PR.
"	2016-04-19 06:12:14	0.0		0
841	"LGTM
"	2016-04-19 06:46:50	0.0		0
842	"@rwinch fixed
"	2016-04-19 20:55:13	0.0		0
843	"Thanks for the PR! This is merged via edbf8bf58768747575f9fedffa379ec710fe1635
"	2016-04-20 18:56:27	0.0		0
844	"This shouldn't be an integration test.
"	2016-04-18 14:32:29	0.0		1
845	"Should have an `@After` that closes the context
"	2016-04-19 13:38:33	0.0		1
846	"Thanks for the PR! Unfortuantely, the changes do not work for the non-boot applications. For example, the [Spring Security sample](https://github.com/vpavic/spring-session/blob/gh-458/samples/security/build.gradle) returns a 404 for the webjars URL.
"	2016-04-20 18:47:39	0.0		1
847	"Hmm, interesting. I've ran all the examples (well, except Gemfire-based ones) before submitting the PR.
Will look into it, possibly something got cached on my side.
"	2016-04-20 21:26:24	0.0		0
848	"Thanks for the response. 

A note...this is lower priority than #495 since this is just samples (I can merge this even in a patch release)
"	2016-04-20 21:34:08	0.0		0
849	"@rwinch I've updated the PR.

Issue was that the links to static resources were not aware of the context path. This is now fixed and tested.
"	2016-05-07 17:59:59	0.0		0
850	"@rwinch Is there anything more you need me to do on this, considering the PR is still labeled as `waiting for feedback`?
"	2016-05-23 18:43:38	0.0		0
851	"@vpavic Thanks for the nudge! It was me dropping the ball on removing the label. I have updated the ticket (but still need to take a look at it).
"	2016-05-23 19:20:21	0.0		0
852	"Thanks for the PR! Merged via 2b4a349b1a8710b47e89e412d3f1ab511e828323
"	2016-06-29 18:35:36	0.0		0
853	"NOTE: I created #566 so that the samples are further improved to use webjars-locator
"	2016-06-29 18:36:27	0.0		0
854	"@eddumelendez this does not address the #488 since you've only added the setter for `tableName`.

Also the test you added doesn't actually test anything relevant here. You're just using `tableName` setter directly on `JdbcOperationsSessionRepository` instead of the one you added in `JdbcHttpSessionConfiguration`.
"	2016-04-18 11:46:46	1.0	2016-04-19 04:18:58	1
855	"@eddumelendez a good way to test this would be to reuse what I've done in Spring Boot (i.e. [extending the regular configuration](https://github.com/snicoll/spring-boot/commit/f46d83938b5668de3d1eec8b0665eebab0edada1#diff-09c1399b224b0c1e813969745a9b661dR39)) 
"	2016-04-18 12:41:22	1.0	2016-04-19 04:18:58	0
856	"@vpavic I noticed that when I was looking for Mongo implementation.

@snicoll Thanks for the hint. I will polish this PR.
"	2016-04-18 12:42:42	1.0	2016-04-19 04:18:58	0
857	"It's also missing a `setMaxInactiveIntervalInSeconds`
"	2016-04-18 14:09:44	1.0	2016-04-19 04:18:58	1
858	"@eddumelendez Looks good now, thanks for updating the PR.
"	2016-04-18 17:38:39	1.0	2016-04-19 04:18:58	0
859	"@vpavic thanks to you for the feedback.
"	2016-04-18 21:06:00	1.0	2016-04-19 04:18:58	0
860	"Thanks for the PR! This is now merged into master
"	2016-04-19 04:19:23	1.0	2016-04-19 04:18:58	0
861	"uh? Shouldn't you just be using `setTableName`?
"	2016-04-18 14:06:58	1.0	2016-04-19 04:18:58	1
862	"my mistake. now it is fixed. thanks!
"	2016-04-18 14:26:09	1.0	2016-04-19 04:18:58	0
863	"Why a random `@Autowired` method?
Simply overriding the default constructor and using the desired setter inside it is much cleaner and more understandable.

Also separate config for each test are preferred.
"	2016-04-18 14:30:36	1.0	2016-04-19 04:18:58	1
864	"I guess it's taken from what I've done in Spring Boot. I agree an `@Autowired` method with no parameter is not really a good idea.
"	2016-04-18 14:32:04	1.0	2016-04-19 04:18:58	0
865	"For some reason, the `SessionRepositoryFilterTests` failed...

```
org.springframework.session.web.http.SessionRepositoryFilterTests > doFilterLastAccessedTime FAILED
    org.junit.ComparisonFailure at SessionRepositoryFilterTests.java:1457
```

All tests passed when I ran `gradlew clean build install` locally.

I have not gone to `file:///home/travis/build/spring-projects/spring-session/spring-session/build/spring3-test-results/index.html` to investigate the failure.  Is this located on `static.spring.io`?
"	2016-04-16 18:29:55	1.0	2016-08-15 19:14:34	1
866	"@jxblum Thanks for the PR! This is now merged into master

In regards to the build failure ...it appears to be working for me (perhaps it has since been fixed). If you continue to have problems, please let me know.
"	2016-08-15 19:15:20	1.0	2016-08-15 19:14:34	0
867	"@eddumelendez This is a very useful addition however IMO it should be targeted at Spring Boot since first-class Spring Session integration already exists there.

WDYT @rwinch?
"	2016-04-12 11:42:21	0.0		0
868	"@vpavic @eddumelendez I do think it may be better fit for Spring Boot as this is where most actuator endpoints live.
"	2016-04-14 20:31:01	0.0		0
869	"@rwinch Also I don't think it's a wise idea to have a dependency on Boot (other than in sample apps that is).

Since Boot's POM actually provides the dependency management for Session that would effectively create a circular dependency between the projects.
"	2016-04-14 21:22:32	0.0		1
870	"+1 @vpavic 
"	2016-04-15 08:11:08	0.0		0
871	"Thanks guys for the feedback I will move my changes to spring-boot project... Hope to see all new improvements there soon. 
"	2016-04-15 08:23:33	0.0		0
872	"Close in favor of https://github.com/spring-projects/spring-boot/pull/5730
"	2016-04-19 01:22:54	0.0		0
873	"Why not use `@ConfigurationProperties` here and make `sensible` and `path` configurable?
"	2016-04-12 11:37:46	0.0		1
874	"@rwinch I have added some changes in my own [branch](https://github.com/eddumelendez/spring-session/tree/gh-363) in order to expose setter methods for `timeoutInSeconds` and `principalSessionsEnabled`. I'm keeping by @mkopylec's commit
"	2016-05-13 11:16:58	0.0		0
875	"@rwinch and I have been discussing the supported data stores over the past few weeks, and the decision was made to limit the first-class supported data stores to Redis, JDBC and Hazelcast from `2.0.x` on. See #768 for more details and background. As a part of this, existing GemFire and Mongo data stores have been removed in the `master` and will be deprecated in `1.4.0.M1`.

@mkopylec we'd like to encourage you to make this effort a Spring Session community extension project. We promote such extensions in [Community Extensions](http://docs.spring.io/spring-session/docs/2.0.0.BUILD-SNAPSHOT/reference/html5/#community-extensions) section of the reference manual so please open a issue/PR to list your project in there once you set it up.

Thank you for your efforts."	2017-04-28 20:54:50	0.0		1
876	"Add setter methods for timeoutInSeconds and principalSessionsEnabled
"	2016-04-20 10:58:27	0.0		1
877	"What is the purpose of having setters in `@Configuration` class?
"	2016-04-20 15:09:54	0.0		1
878	"Expose attributes to make them configurable. Take a look for jdbc #490 and mongo #492
"	2016-04-21 05:53:05	0.0		1
879	"this could be probably upgraded to `2.1.4` (if Spring Session is currently using Spring Data Hopper @rwinch ?)
"	2016-11-18 09:06:15	0.0		0
880	"is there a real rationale for these version bumps (this one and above)?
"	2016-11-18 09:07:43	0.0		1
881	"this can have side effects if other data is colocated with the session data in Couchbase, which happens a lot... (I know this is for integration test, but still...) maybe the DELETE query can have a restricting WHERE clause?
"	2016-11-18 09:10:59	0.0		1
882	"maybe this part could recognize more types as natively storable? Couchbase SDK can store `String`, `Boolean`,  `Integer`, `Long`, `Double` and its own json value types `JsonObject` and `JsonArray`...
"	2016-11-18 09:32:50	0.0		1
883	"since this is not in the couchbase package, probably needs to be double-checked by @rwinch 
"	2016-11-18 09:34:37	0.0		0
884	"Thanks for the PR! This is now merged into master
"	2016-04-11 15:55:24	1.0	2016-04-11 15:55:10	0
885	"Thanks for the PR! This is now merged into master
"	2016-04-11 15:54:27	1.0	2016-04-11 15:54:13	0
886	"@jkuipers Thanks for the PR!

I'm wondering if we would be able to support the concept of marking the session as expired by setting a session attribute rather than deleting the session. Then when Spring Session obtains the `SessionInformation` it would read this attribute to determine if the session is expired.

Honestly, I do like the fact that the current implementation deletes the session, but this might be a nice feature for users who need the ability to display a more useful error message.

Thoughts?
"	2016-04-11 15:52:15	1.0	2016-09-02 19:01:41	1
887	"Note I'm assigning this to 1.3.0 M1 because we plan to go GA with Spring Session 1.2 next and we need have at least one RC of a new feature before going GA.
"	2016-04-11 15:59:02	1.0	2016-09-02 19:01:41	0
888	"A custom session attribute to support ""Spring Security expiration"" makes a lot of sense. I'll update the implementation and docs to ensure that this in place. This will also cause the filtering on expired session to actually do something useful, since it won't conflate Spring Security's notion of an expired session with that of Spring Session: they're different things, 
I could also support repositories that return plain Sessions rather than ExpiringSessions this way: the SessionRegistry already gets a callback to update the last accessed timestamp of a session, so for plain Sessions (that don't provide this information themselves like ExpiringSessions do) we could store the info in another custom session attribute. The code could determine and cache whether plain or expiring sessions are being returned by the repository, so the additional overhead of updating the Session with a last accessed attribute would only be incurred for plain Sessions. Do you think that this is worth the trouble, or will all relevant implementations implement ExpiringSession anyway, in your opinion?
"	2016-04-11 17:47:02	1.0	2016-09-02 19:01:41	1
889	"Thanks for the feedback. I think all relevant implementations will implement ExpiringSession. Honestly, the split between the two APIs was probably a mistake. However, something that cannot really be changed now.
"	2016-04-11 17:48:56	1.0	2016-09-02 19:01:41	0
890	"OK, I've pushed an updated implementation that tracks expiry in the Spring Security sense through a custom Session attribute. When Spring Security's `ConcurrentSessionFilter` finds an expired SessionInformation it will call all registered `LogoutHandler` beans, which typically would lead to the Session being deleted. Even if this wouldn't happen, then the Session will simply expire (in the Spring Session sense) eventually. 
"	2016-04-11 20:47:48	1.0	2016-09-02 19:01:41	0
891	"@rwinch have an idea of the release date of 1.3.0 ?
I have to develop this feature but if it is supported out of the box in the next release, I prefer to wait.

Thanks.
"	2016-07-18 12:22:37	1.0	2016-09-02 19:01:41	0
892	"Note that you can take the code from this pull request and use it as-is with the current version of spring-session: that should provide you with a smooth upgrade path if the request is indeed merged for 1.3. 
"	2016-07-18 22:16:46	1.0	2016-09-02 19:01:41	0
893	"@edethoor Unfortunately we don't have an ETA on 1.3.0 at this time. As @jkubrynski suggests, you should be able to take the code from this PR as is and then remove it when 1.3.0 comes around
"	2016-07-19 20:44:31	1.0	2016-09-02 19:01:41	0
894	"Thanks for the PR @jkuipers This is now merged into master
"	2016-09-02 19:01:55	1.0	2016-09-02 19:01:41	0
895	@jkuipers i'm using infinispan for cache in cluster which provides Map based cache implementation. i need to use SpringSessionBackedSessionRegistry with MapSessionRepository but MapSessionRepository doesn't implement FindByIndexNameSessionRepository. How can i achieve this.	2016-12-31 07:04:38	1.0	2016-09-02 19:01:41	0
896	@codecracker2014 It wouldn't be hard to add support for the `FindByIndexNameSessionRepository` to the `MapSessionRepository`: a naive implementation could simply loop through the stored `ExpiringSession`s and find the ones with the given principal name, a more optimized impl could simply have a map from principal names to a collection of corresponding sessions to make lookups efficient. Not sure what would be best for Infinispan, since I'm not familiar with that. 	2017-01-02 14:43:47	1.0	2016-09-02 19:01:41	1
897	"I noticed one show stopper that i need to fix, then i will reopen pull request :/
"	2016-04-08 15:01:02	0.0		0
898	"Thanks @jxblum! This is now merged into master
"	2016-04-11 14:33:07	1.0	2016-04-11 14:31:05	0
899	"Global namespace does not fit in with Spring Session. Closing in favor of #477
"	2016-11-17 19:53:52	0.0		0
900	"Can we just use services as shown https://docs.travis-ci.com/user/database-setup/#CouchDB
"	2016-04-07 21:18:29	0.0		1
901	"Can you demonstrate with Maven like the other examples?
"	2016-04-07 21:25:46	0.0		1
902	"Is there a reason for having a global namespace? In general, I'm not sure I like the additional complexity of this (not to mention none of the other implementations support this).
"	2016-04-07 21:26:53	0.0		1
903	"We use commons-logging (like Spring Framework)
"	2016-04-07 21:33:07	0.0		0
904	"I don't think this should be needed. I think this is probably due to the global support which I think we should remove. If we do add global session support, we would move it to a different PR.
"	2016-04-07 21:39:22	0.0		1
905	"This package should not depend on servlet dependencies.
"	2016-04-07 21:39:45	0.0		1
906	"I don't think we should have a couchbase specific API here. We could use something like Spring's converter APIs to convert the values.
"	2016-04-07 21:42:07	0.0		1
907	"These changes should be in a distinct PR
"	2016-04-07 21:49:09	0.0		1
908	"These changes should be in its own PR
"	2016-04-07 21:49:49	0.0		1
909	"Is there a reason we need a distinct `CouchbaseDao`? Perhaps this would be better in the `CouchbaseSessionRepository`
"	2016-04-07 21:51:44	0.0		1
910	"Sure, I thought that if the whole project is build on gradle I will stick to one build technology.
"	2016-04-07 22:24:04	0.0		0
911	"No, those two are different databases: http://www.couchbase.com/couchbase-vs-couchdb
"	2016-04-07 22:25:19	0.0		0
912	"Generally this is for microservices architecture systems. There couple of reasons I decided to go with namespace:
1. Session data in a large distributed system (aspecially in microservices architecture) can be pretty big. Having app and global namespaces reduces the amount of data to read every `HttpSession.getSession()` invocation. You can gain a significant performance boost using session namespaces.
2. There is almost none additional complexity for a developer. If you don't want to use them you can set the same namespace in all your apps in the system or use only global namespace. Maybe by default namespaces support could be turned off.
3. With namespaces multiple different microservices in the system can set or get a session attribute of the same name without conflicting each other.
"	2016-04-07 22:38:11	0.0		1
913	"Ok, I'll change that
"	2016-04-07 22:39:37	0.0		0
914	"Yes, this is because of namespaces support.
"	2016-04-07 22:40:34	0.0		0
915	"Sure, good idea.
"	2016-04-07 22:42:39	0.0		0
916	"This is because `DelegatingSessionStrategy` depends on servlet api 3.1.0
"	2016-04-07 22:43:49	0.0		0
917	"I'm not quite sure it's a good idea. From the DDD side the `CouchbaseSessionRepository` playes a domian repository role for a session entity and the `CouchbaseDao` is just a data access object that communicates directly with couchbase server.
Beside that joining those two guys will create a quite big, hard to read class in my opinion.
"	2016-04-07 22:48:00	0.0		1
918	"Right but you will notice that none of the other repository implementations have web dependencies in them. Doing this will cause [package tangles](http://structure101.com/blog/2008/12/software-erosion-and-package-tangles/).

I really think we need to consider global namespace as its own thing as a PR to add new repository should not contain web dependencies nor should it change anything out of its package structure.
"	2016-04-08 00:57:51	0.0		1
919	"Thanks. I think eventually we should do Gradle too, but most people that know Gradle syntax know Maven. However, people that know Maven don't know Gradle.
"	2016-04-08 00:58:25	0.0		0
920	"Thanks for pointing that out. I did not read carefully.
"	2016-04-08 00:58:41	0.0		0
921	"If we are going to consider global namespace, it will need to be a distinct ticket and PR. We don't want to change too much in one ticket / commit as this makes troubleshooting difficult.
"	2016-04-08 01:00:05	0.0		1
922	"Ok, I understand. I can create such a ticket and PR.One important question here: should the PR consider namespaces support only for data couchbase or maybe the changes should be global and made in the core Spring Session API (`ExpiringSession`, `FindByIndexNameSessionRepository`, etc.)? Or maybe it should be a brand new session repository?
"	2016-04-08 05:58:52	0.0		0
923	"Thanks! Lets first create a ticket and discuss if this is something we want to add to Spring Session. It is quite likely a useful feature, but I'm not entirely convinced Spring Session is the right place for it.
"	2016-04-08 14:58:22	0.0		0
924	"@vpavic Thanks for the PR! 

I think I'd prefer to allow the user to create the transactional boundary by exposing a bean of a particular name. 
- This aligns with Spring Session's other points of customization. For example, this is how we users can provide custom serializers. 
- Additionally, using a bean provides more flexibility for the user than the boolean flag on the annotation (which can only be on or off).

What are your thoughts?
"	2016-04-04 13:56:28	1.0	2016-04-06 04:39:36	1
925	"@rwinch I see your point here - you'd prefer to take a less opinionated route on how to approach the transaction management within the `JdbcOperationsSessionRepository`, and instead of focusing on providing concrete solutions for detected problems with transactions we'd equip the users with flexiblity (by setting their own `TransactionOperations` implementation) so they can come up with their own prefered solution.

I guess this makes sense, and it actually makes the job quite easier for us in terms of implementation as well as testing. Documentation should provide some concrete examples for this approach.

Do you prefer to keep offer this only for write operations, or read ones as well?
"	2016-04-04 17:43:36	1.0	2016-04-06 04:39:36	0
926	"@vpavic Thanks for the fast reply. I'd say we should do transactions or reads also. 
"	2016-04-04 18:21:38	1.0	2016-04-06 04:39:36	1
927	"@rwinch I've updated the PR.

Please share your thoughts. Documentation is still pending.
"	2016-04-04 22:16:30	1.0	2016-04-06 04:39:36	0
928	"I would still prefer using REQUIRES_NEW propagation behaviour as a sane default, because I would personally expect this to ""just work"" without extra configuration. My previous suggestion was to avoid introducing unnecessary configuration for the time being, but the behaviour on rollback is not quite the same with session persist after succesful commit.
"	2016-04-05 08:39:06	1.0	2016-04-06 04:39:36	1
929	"@kherrala FWIW I agree with you on `REQUIRES_NEW` being the sane default.

However @rwinch has so far insisted on opt-in approach for transactional behavior, with argument that transactions as an expensive operation might not be needed/wanted by all users.
"	2016-04-05 12:50:47	1.0	2016-04-06 04:39:36	0
930	"@kherrala @vpavic Thanks for your feedback.

I've been doing some more thinking about this and I think you two have convinced me that my approach was not ideal. We should work out of the box, so I think you two are right that we should create the transactions by default.

What's more is we can always make it optional later on and still remain passive. If we start without requiring it and it causes problems, we are stuck with this default to remain passive.

@vpavic I'm sorry on flip-flopping on this, but hopefully getting to the ""right answer"" is some consultation. Do you mind updating the PR to take these changes into account.
"	2016-04-05 14:21:15	1.0	2016-04-06 04:39:36	1
931	"> I'm sorry on flip-flopping on this, but hopefully getting to the ""right answer"" is some consultation.

@rwinch I'm always in favor of thinking things through a bit more even at the expense of delaying things so :+1: on that from my side.

No problems on updating the PR, I'll take care of that soon.

Now that we've decided what the default behavior is, the question is what means do we provide for changing the defaults?

> What's more is we can always make it optional later on and still remain passive. If we start without requiring it and it causes problems, we are stuck with this default to remain passive.

If I'm reading this correctly you wouldn't provide an option for users to disable transactions right now, but rather at some later stage if there's need for this?
"	2016-04-05 15:49:50	1.0	2016-04-06 04:39:36	1
932	"> so :+1: on that from my side.

Glad to hear that :)

> No problems on updating the PR, I'll take care of that soon.

Awesome! Thanks :)

> If I'm reading this correctly you wouldn't provide an option for users to disable transactions right now, but rather at some later stage if there's need for this?

Correct
"	2016-04-05 17:57:08	1.0	2016-04-06 04:39:36	0
933	"@rwinch I've updated the PR.
"	2016-04-05 21:59:30	1.0	2016-04-06 04:39:36	0
934	"Thanks for the PR! This is now merged into master
"	2016-04-06 04:39:55	1.0	2016-04-06 04:39:36	0
935	"Thanks again for the PR! This is now merged into master.

You are really rocking the PRs lately! Keep them coming :)
"	2016-04-04 12:36:30	1.0	2016-04-04 12:35:46	0
936	"@vpavic :rocket: 
"	2016-04-04 12:40:12	1.0	2016-04-04 12:35:46	0
937	"Thanks @rwinch @cemo!
"	2016-04-04 16:27:25	1.0	2016-04-04 12:35:46	0
938	"Thanks for the PR! This is now merged into master
"	2016-04-04 12:35:18	1.0	2016-04-04 12:34:10	0
939	"Thanks for the PR @vpavic! You are really rocking Spring Session as of late :) I provided a few comments inline.
"	2016-03-30 14:34:32	1.0	2016-04-04 13:36:27	0
940	"Thank you @rwinch :)
"	2016-03-30 14:58:18	1.0	2016-04-04 13:36:27	0
941	"@rwinch I've updated the PR.
"	2016-03-30 15:50:28	1.0	2016-04-04 13:36:27	0
942	"@rwinch I've updated the PR... again :)
This time to replace Bootstrap CSS files with webjars.
"	2016-04-03 18:58:57	1.0	2016-04-04 13:36:27	1
943	"Nice work! Thanks for the PR..This is now merged into master
"	2016-04-04 13:36:39	1.0	2016-04-04 13:36:27	0
944	"Is this necessary with newer versions of Boot? I thought this was automatically setup to `/h2-console` via `H2ConsoleAutoConfiguration`?
"	2016-03-30 14:31:19	1.0	2016-04-04 13:36:27	1
945	"Can we add no format tags around these methods so they are formatted correctly?
"	2016-03-30 14:32:00	1.0	2016-04-04 13:36:27	1
946	"You're absolutely correct. To make my oversight more comical I've just used Boot's H2 console auto-configuration in one of my projects a few days ago :)
"	2016-03-30 14:54:38	1.0	2016-04-04 13:36:27	0
947	"On a sidenote - websocket sample could also be changed to use auto-configuration for H2 console.
"	2016-03-30 14:55:36	1.0	2016-04-04 13:36:27	1
948	"Happens to me sometimes too. It just shows you are a long time Boot user :)
"	2016-03-30 14:55:52	1.0	2016-04-04 13:36:27	0
949	"Yes, we can. I've copied the class from the original boot sample (together with formatting) and added what I needed for this sample.
"	2016-03-30 14:57:43	1.0	2016-04-04 13:36:27	0
950	"> On a sidenote - websocket sample could also be changed to use auto-configuration for H2 console.

Good point! I created #457
"	2016-03-30 14:57:52	1.0	2016-04-04 13:36:27	1
951	"@sc-moonlight Thanks for the PR! This build is failing due to check style errors. I'm also curious if you can answer https://github.com/spring-projects/spring-session/issues/441#issuecomment-202556278
"	2016-03-28 20:06:27	0.0		1
952	"Yep, I answered #441 question.
"	2016-03-28 20:33:50	0.0		0
953	"@sc-moonlight Thanks!
"	2016-03-28 20:37:42	0.0		0
954	"@vpavic Thanks for catching this! This is now merged into master
"	2016-03-28 16:15:31	1.0	2016-03-28 16:15:16	0
955	"Thanks for the PR @vpavic! I had one question inline
"	2016-03-28 15:48:07	1.0	2016-03-28 20:06:50	0
956	"@rwinch I've updated the PR.
"	2016-03-28 16:15:24	1.0	2016-03-28 20:06:50	0
957	"@vpavic Thanks for the PR! This is now merged into master
"	2016-03-28 20:07:03	1.0	2016-03-28 20:06:50	0
958	"Is there a reason that we cannot just set and get the lastAccessedTime on the delegate?
"	2016-03-28 15:47:39	1.0	2016-03-28 20:06:50	1
959	"Ahh yes, we can. I'll change the `RowMapper` to update the deserialized delegate with `lastAccessedTime` from column. It will also minimize the impact in other places.
"	2016-03-28 16:01:42	1.0	2016-03-28 20:06:50	1
960	"Thanks!
"	2016-03-28 16:02:29	1.0	2016-03-28 20:06:50	0
961	"Thanks for the PR @sc-moonlight! This is now merged into master via bd2d84691794b8c23f081cec998289b67c99b037
"	2016-03-28 14:16:41	0.0		0
962	"@erichelgeson Thanks for submitting this!

I'll wait for the second half before merging/reviewing in detail. One thing we will want to ensure we have is some tests to ensure this is working.
"	2016-03-25 14:33:51	0.0		0
963	"No problem, took a first stab at the docs too (could use a second set of eyes on that as well).
"	2016-03-25 14:54:57	0.0		0
964	"@rwinch tests adapted from the spring boot example. Can be run by `./gradlew integrationTest`
"	2016-03-25 16:26:33	0.0		0
965	"@erichelgeson Thanks for the updates!

Some feedback.
- We should add this project to settings.gradle

```
include 'samples:grails3'
```
- The build is not currently passing. I get the following error:

```
:integrationTest

sample.HomeSpec > Anonymous page not redirected to login FAILED
    java.lang.IllegalStateException
        Caused by: org.springframework.boot.context.embedded.EmbeddedServletContainerException
            Caused by: java.lang.IllegalStateException
```
- Perhaps we can change test/index to be the index at the context root so users don't have an additional step.
"	2016-03-29 01:56:22	0.0		1
966	"The tests are passing, just I didn't have a random port assigned (the boot gradle example didnt work in grails, but i found one that does). the root `/` is not protected, then `/test/` is a protected resource in the tests. I think it's valuable to leave both tests in (anon ok and anon redirect)

Pushed up the changes, let me know!
"	2016-03-29 03:04:33	0.0		0
967	"Thanks for the PR! This is now merged into master. I have applied a bit of polish via 3825a46418358a9b807f5ef9a8d8d2ba095fadd1
"	2016-03-30 01:59:44	0.0		0
968	"Thanks for the PR @lowzj! This is now merged into master :)
"	2016-03-23 13:27:46	1.0	2016-03-23 13:27:23	0
969	"Thanks for the PR! This is now merged into master
"	2016-03-20 16:10:27	1.0	2016-03-20 16:10:25	0
970	"Closing & re-opening to force a new CI build.
Failure seems unrelated to these changes, the build passes for me locally.
"	2016-03-20 01:12:55	1.0	2016-03-25 14:30:40	0
971	"Thanks for the PR! I wonder if we want to enable this for the sample applications too? What are your thoughts @vpavic?
"	2016-03-20 16:09:30	1.0	2016-03-25 14:30:40	0
972	"@rwinch I've considered using this in sample app too but eventually decided to limit use to integration tests.

My reasoning was the following:
- Flapdoodle on [its website](https://flapdoodle-oss.github.io/de.flapdoodle.embed.mongo/) clearly states the project is aimed at running Mongo in tests so we should follow this
- IMO sample apps should provide a realistic use case of how to use the framework
- sample apps include instructions on how to browse the session data using clients for underlying technology used to persist sessions, meaning you need Mongo (client at least) anyway to fully benefit from sample app (and I don't know how Mongo client would work with an embedded Flapdoodle instance)

This is in contrast to JDBC samples for example, which use H2 database, since H2 is full-blown RDBMS which also offers easily embeddable web client.
"	2016-03-20 17:58:17	1.0	2016-03-25 14:30:40	1
973	"@vpavic Thank you for your feedback. I somewhat see your point about the samples needing to provide a realistic experience for users. However, we do not want any extra noise for setting up samples.

Fladoodle should certainly not be used in production, but I think it is ideal for helping users run a sample application. We are testing the sample with Fladoodle so that is how users should experience it (since we know that is what works).

Finally Fladoodle is just downloading the executable and forking a process that starts up a full fledged Mongo instance. This means that this does not differ much from using an embedded relational database.
"	2016-03-21 14:49:02	1.0	2016-03-25 14:30:40	0
974	"@rwinch if we go with Flapdoodle to back the sample app, what happens with the part of the guide that describes usage of Mongo client to query and alter data (how does it work section)?
"	2016-03-21 17:09:45	1.0	2016-03-25 14:30:40	0
975	"@vpavic You can still connect to mongo when using Fladoodle using any Mongo client.
"	2016-03-22 18:40:10	1.0	2016-03-25 14:30:40	0
976	"@rwinch yes, I'm aware of that. But if you have Mongo client it's highly likely you also have Mongo server installed as well, that was one of my arguments for not moving sample app to Flapdoodle.

But OK, if that's your preference I'll move the sample app to Flapdoodle.

There's one more thing that crossed my mind today, and I've completely neglected it during initial implementation - embedded Flapdoodle instance needs to use random port to avoid any potential conflicts. That means in sample app scenario we also need to communicate this port to the user - is logging the port on startup good enough for this?
"	2016-03-22 19:26:23	1.0	2016-03-25 14:30:40	1
977	"@vpavic Thanks for the response.

> But if you have Mongo client it's highly likely you also have Mongo server installed as well, that was one of my arguments for not moving sample app to Flapdoodle.

That is fair. However, I think there are many people that will not care about performing the steps with the client (they just want to get it running). We should have a disclaimer that you must have a client installed within the guide.

> That means in sample app scenario we also need to communicate this port to the user - is logging the port on startup good enough for this?

This is an option. Alternatively (and probably preferably), we could default the port to using the standard port and ensure our test configuration overrides this to a random port.
"	2016-03-22 19:43:48	1.0	2016-03-25 14:30:40	1
978	"> We should have a disclaimer that you must have a client installed within the guide.

OK.

> Alternatively (and probably preferably), we could default the port to using the standard port and ensure our test configuration overrides this to a random port.

Even though this means sample app fails to start for users that run Mongo instance locally? This is somewhat in contradiction to ""we do not want any extra noise for setting up samples"" argument.
"	2016-03-22 19:53:41	1.0	2016-03-25 14:30:40	1
979	"@vpavic 

> Even though this means sample app fails to start for users that run Mongo instance locally? This is somewhat in contradiction to ""we do not want any extra noise for setting up samples"" argument.

That is a good point. Let's stick with logging. Perhaps it could even log ""if you have the mongo client installed this is the command to connect""?
"	2016-03-22 19:55:20	1.0	2016-03-25 14:30:40	0
980	"@rwinch yes, that should be doable. I'll look into it and update the PR accordingly soon.
"	2016-03-22 20:19:49	1.0	2016-03-25 14:30:40	0
981	"@rwinch I've updated the PR, please review the changes.
I still need to update the guide. I'll take care of this when we finalize the implementation.
"	2016-03-22 23:25:10	1.0	2016-03-25 14:30:40	0
982	"@vpavic Thanks for the fast turnaround. Overall looks good. I had one comment inline. When you update the documentation make sure that the guide either does not show the Flapdoodle config or it describes that this is just necessary to start mongo and not going to happen in a real world example.
"	2016-03-23 22:02:46	1.0	2016-03-25 14:30:40	1
983	"@rwinch

> When you update the documentation make sure that the guide either does not show the Flapdoodle config or it describes that this is just necessary to start mongo and not going to happen in a real world example.

Yes, of course. Mongo-related config in sample app is in a separate `@Configuration` class, the original `@Configuration` class that contains asciidoc tags was left untouched.
"	2016-03-24 06:42:27	1.0	2016-03-25 14:30:40	1
984	"It completely slipped my mind that we could use Spring Boot's auto-configuration for an embedded MongoDB instance. I'll change this in next update.
"	2016-03-24 07:14:33	1.0	2016-03-25 14:30:40	1
985	"@rwinch I've updated the PR with the documentation/guide.

I also tried the Boot's Embedded MongoDB auto-configuration support, however I've run into spring-projects/spring-boot#5487. ~~Not to confuse the users with this exception (even though its harmless as it occurs on shutdown) I've decided to stick with manual config until this gets fixed in Boot.~~ Your thoughts?

---

**UPDATE:**

Somehow I managed to miss the fact that this exception on shutdown also happens when we use manual conf. So I'll update this to auto-configuration anyway. Also it appears that nothing within Boot itself would be able to fix this behavior.
"	2016-03-24 22:15:31	1.0	2016-03-25 14:30:40	1
986	"@vpavic Thanks for digging into this so deep and for the quality PR! This is now merged into master
"	2016-03-25 14:30:42	1.0	2016-03-25 14:30:40	0
987	"Just curious why `@DirtiesContext` was necessary
"	2016-03-23 22:01:06	1.0	2016-03-25 14:30:40	1
988	"Good thing you pointed this out, `@DirtiesContext` can be removed now.

I've had issues similar to ones described in #396 with my initial implementation, since I had static port config for embedded MongoDB instance.

Moving to randomly assigned port fixed this.
"	2016-03-24 06:37:16	1.0	2016-03-25 14:30:40	0
989	"Thanks for the PR @anujbahuguna! 

Unfortuantely this causes the following error when importing into Eclipse:

> Description   Resource    Path    Location    Type
> Unbound classpath container: 'JRE System Library [JavaSE-1.5]' in project 'spring-session-data-redis'   spring-session-data-redis       Build path  Build Path Problem

I haven't had time to investigate it yet. Perhaps that is something you can resolve?
"	2016-03-20 16:20:04	0.0		1
990	"@rwinch 
This seems to be coming from gradle-eclipse integration
for all spring-session eclipse projects, .settings has org.eclipse.jdt.core.prefs generated with following 
org.eclipse.jdt.core.compiler.source=1.5
Have to investigate more on the exact code in gradle causing this. We can keep this PR on hold for now.
"	2016-03-21 12:58:17	0.0		0
991	"Closing this request for now. Will re-submit if I find a solution to eclipse integration
"	2016-03-29 14:15:28	0.0		0
992	"@jeetmp3  Nice I have not had a chance to dig into this too much yet but I wonder how much of the default auto-configure this negates?

https://github.com/spring-projects/spring-boot/blob/b260c20df0105842218ce9788130634f9b1f5dfa/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java

I wonder if it could be packaged up to auto-configures after the default configuration and enhance it if a conditional property is set or some such thing.

I am sure it was probably not your intention to worry about this for a sample, but I am thinking about making it reusable as well.

Thanks,
"	2016-03-18 11:07:43	0.0		0
993	"Hmm nvm I see there is no  `@Bean` on your ObjectMapper and its probably better to use a separate one anyway considering the need for default typing etc.  I will have to try it out.  Someone on my team just asked me for this so maybe it will save me some time, thanks!
"	2016-03-18 12:02:56	0.0		0
994	"@jeetmp3 Wow this is awesome! I need to spend a little more time reviewing this on Monday. Thank you for submitting this.

We may want to get some of the Jackson Support moved to Spring Security as this would be beneficial in many other contexts. I'll review on Monday and we can go from there. Thanks for this!
"	2016-03-18 21:07:46	0.0		0
995	"@jeetmp3 PS If contributing the Jackson Support is something that interests you, please comment on https://github.com/spring-projects/spring-security/issues/3736 If we can get some tests added for the support, that will be a good start getting this into Spring Security proper.

Thanks again!
"	2016-03-18 21:12:45	0.0		1
996	"@wgorder this sample doesn't use Jackson default auto-configure. I haven't focused on JacksonAutoConfiguration to configure ObjectMapper. 
I think we can use Jackson2ObjectMapperBuilder to build ObjectMapper and register all the Mix-ins. By doing this we can take advantage of default auto-configure.
"	2016-03-21 17:45:16	0.0		1
997	"@rwinch sounds good to me I'll comment on that. Just wanted to confirm about test cases, you want tests for mix-in classes right?
"	2016-03-21 17:56:30	0.0		1
998	"@jeetmp3 Thanks for the fast reply. Yes I would like to ensure we have some tests for the mix-in classes. At that point we can add the mixins to Spring Security.
"	2016-03-21 19:45:38	0.0		1
999	"@jeetmp3 Also...in terms of JacksonAutoConfiguration this is something we can do later. If we have the support there at least it can be done even if it is a little more work.

We will be releasing Spring Security 4.1 RC1 on Wednesday, so it would be ideal for us to get it in before  that. However, that is probably not realistic so we may need to wait until another release.
"	2016-03-21 19:47:40	0.0		0
1000	"@rwinch  I've added tests for mix-in classes. 
"	2016-03-23 02:39:12	0.0		0
1001	"ObjectMapper configuration changed. Now all mixins will be used from pull request  [3812](https://github.com/spring-projects/spring-security/pull/3812). Mixin classes in this code sample will be removed once pull request [3812](https://github.com/spring-projects/spring-security/pull/3812) is merged into spring-security.
"	2016-07-11 05:56:38	0.0		0
1002	"Thanks for the PR! This was merged via 9014ac906026094131f42c61e1dc40f7f5ac515f I also applied a bit of polish for your review b58ea03a3b712f764eac1371fe7496a42cf91715

I went ahead with the release so that we could stay on schedule. If you have feedback for changes, we can include that in the next release.
"	2016-03-17 03:16:15	0.0		0
1003	"Thanks for the PR! This is merged via 96861ea535. I also added some polish 7a82915a98cbde10afaaa6de235934cee7fe4b66 for your review
"	2016-03-16 14:13:50	0.0		0
1004	"Thanks for the PR! This is now merged into master
"	2016-03-15 13:41:05	1.0	2016-03-15 13:41:02	0
1005	"Thanks for the PR! This is now merged into master
"	2016-03-14 21:22:43	1.0	2016-03-14 21:22:40	0
1006	"Thanks for the PR! This is fixed via 831d2f4152a532c1f68bdcbc08352d86efbe8e40 I applied a little polish to fix the checkstyle in 195228ff5ae52a995d4fe121cac879e4eb033d0f
"	2016-03-14 17:33:26	0.0		1
1007	"Thanks for the PR! This is now merged in via e23398b89041414c39c997450e798ced418faf63

I applied some fixes / polish in bbbdf939e82656a25849693b5162b9baa705c365
"	2016-03-14 18:30:12	0.0		0
1008	"@erindru thanks for testing the JDBC repository and pointing this out!
Not sure how I managed to disregard the inactivity interval during initial implementation.
"	2016-03-11 06:38:06	0.0		0
1009	"Thanks for the PR @erindru! This is now merged into master.

PS: I like to recognize contributors for their work. Do you prefer I link to your GitHub profile, Twitter, Linked In, etc?
"	2016-03-11 15:30:31	0.0		0
1010	"@vpavic Thanks for reviewing this!
"	2016-03-11 15:30:40	0.0		0
1011	"@rwinch happy to help, its good to see an official JDBC implementation finally. We were using our own implementation until I noticed this.

You can link to my github profile if you want to credit me, although this is the tiniest of bugfixes
"	2016-03-11 19:13:07	0.0		0
1012	"@erindru Every fix is important! Thanks again :)

I take it the provided approach is going to work for you then?
"	2016-03-11 20:52:44	0.0		0
1013	"Yep its perfect, thanks! The only problem I have  (unrelated to this) is that the session filter creates a session after each request and I can't see how to disable this for certain URLs (we have monitoring tools that poll a status page every 10 seconds and at a session per hit this adds up to a lot of database rows if the session timeout is 30 minutes) but that's a separate issue obviously
"	2016-03-11 22:18:57	0.0		1
1014	"@erindru Thanks for the response! With 1.1 code you can enable debugging for `org.springframework.session` and it will provide a stacktrace as to you where a session is created. It is likely something in your code that creates the session (i.e. a JSP).
"	2016-03-11 22:21:11	0.0		0
1015	"@erindru This might be of interest to you. I need to take a look and figure out how to polish this up soon.

https://github.com/spring-projects/spring-session/pull/333
"	2016-03-11 22:21:50	0.0		0
1016	"@rwinch I've updated the PR.
Documentation now references the actual schema scripts to provide examples.
"	2016-03-10 06:52:03	0.0		0
1017	"@rwinch looking at #415 seems you merged this commit however the PR itself is still open.
Any reason not to close it?
"	2016-03-10 17:37:04	0.0		0
1018	"Thanks for pointing this out! Closing...
"	2016-03-10 17:39:53	0.0		0
1019	"It would probably be good to use an include pointing to the actual classpath resource files we use.
"	2016-03-09 13:58:01	0.0		1
1020	"Thanks for the PR! This is now merged into master
"	2016-03-07 22:19:32	1.0	2016-03-07 22:19:28	0
1021	"@vpavic Awesome!
"	2016-03-07 04:10:45	0.0		0
1022	"Thanks for the PR @vpavic! This is now merged into master. I also resolved #417 which will automatically setup the proper Eclipse settings for code format, save actions, checkstyle setup, etc. 
"	2016-03-07 21:55:08	0.0		0
1023	"@oassuncao Thanks for the PR! A few things...
- Looks like there is a duplicate submission #409
- This makes a lot of changes without explanations as to why they need changed. 
  - Can you elaborate on why the changes are necessary?
  - We can then determine which changes should be merged and break the issues up into distinct issues and commits.
"	2016-03-03 21:49:01	0.0		1
1024	"Hi @rwinch 

This pull request is about master branch the submission #409 (1.1.x) 

Today if the developer need to customize SessionRepositoryFilter or RedisOperationsSessionRepository it's impossible. The developer need to rewrite all code of this classes

In my case I have 2 Sessions
1- Main Session (Security, etc)
2- App Session (My application can have many apps)
"	2016-03-03 21:53:36	0.0		1
1025	"@oassuncao First...should #409 be closed as a duplicate? I don't think I understood your response.

Second I need more details on what you are trying to solve.
"	2016-03-03 21:56:06	0.0		0
1026	"@oassuncao I now understand that #409 is against 1.1.x. I close that PR since we are only accepting bug fixes for 1.1.x.
"	2016-03-03 22:08:10	0.0		0
1027	"I've a application named CEAP that user can create many sub-application named (CustomApp)

Every CustomApp have a different classes and one ClassLoader. I need to have different Session per CustomApp.

1- CEAP Session (Principal, basic information)
2..x - CustomApp Session (One session per CustomApp)
- Different redisNamespace 
- Different RedisSerializer (other ClassLoader)
- This session only have objects of CustomApp

The configuration file of CustomApp I set a different namespace and use the custom **SessionRepository** and **SessionRepositoryFilter**

``` java
public class CustomRootSessionConfiguration extends RedisHttpSessionConfiguration {
// -------------------------- OTHER METHODS --------------------------

    @Bean(name = ""customRootRedisMessageListenerContainer"")
    @Override
    public RedisMessageListenerContainer redisMessageListenerContainer(RedisConnectionFactory connectionFactory, @Qualifier(""customRootSessionRepository"") RedisOperationsSessionRepository messageListener) {
        return super.redisMessageListenerContainer(connectionFactory, messageListener);
    }

    @Bean(name = ""customRootSessionRepository"")
    @Override
    public RedisOperationsSessionRepository sessionRepository(@Qualifier(""sessionRedisTemplate"") RedisOperations<Object, Object> sessionRedisTemplate, ApplicationEventPublisher applicationEventPublisher) {
        setRedisNamespace(""customRoot"");

        CustomRedisOperationsSessionRepository sessionRepository = new CustomRedisOperationsSessionRepository(sessionRedisTemplate);
        sessionRepository.setApplicationEventPublisher(applicationEventPublisher);
        sessionRepository.setDefaultMaxInactiveInterval(maxInactiveIntervalInSeconds);
        if(defaultRedisSerializer != null) {
            sessionRepository.setDefaultSerializer(defaultRedisSerializer);
        }

        String redisNamespace = getRedisNamespace();
        if(StringUtils.hasText(redisNamespace)) {
            sessionRepository.setRedisKeyNamespace(redisNamespace);
        }

        sessionRepository.setRedisFlushMode(redisFlushMode);
        return sessionRepository;
    }

    @Bean(name = ""customRootSpringSessionRepositoryFilter"")
    @Override
    public <S extends ExpiringSession> SessionRepositoryFilter<? extends ExpiringSession> springSessionRepositoryFilter(@Qualifier(""customRootSessionRepository"") SessionRepository<S> sessionRepository) {
        SessionRepositoryFilter<?> sessionRepositoryFilter = new CustomRootSessionRepositoryFilter<>(sessionRepository);
        sessionRepositoryFilter.setServletContext(servletContext);
        sessionRepositoryFilter.setHttpSessionStrategy(httpSessionStrategy);
        return sessionRepositoryFilter;
    }
}
```

``` java
public class CustomRootSessionRepositoryFilter<S extends ExpiringSession> extends SessionRepositoryFilter<S> {
// --------------------------- CONSTRUCTORS ---------------------------

    public CustomRootSessionRepositoryFilter(SessionRepository<S> sessionRepository) {
        super(sessionRepository);
    }

// -------------------------- OTHER METHODS --------------------------

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        String customRootName = CustomRootUtils.getCustomRootName(request.getRequestURI());
        if (StringUtils.isEmpty(customRootName)) {
            filterChain.doFilter(request, response);
            return;
        }

        super.doFilterInternal(request, response, filterChain);
    }

    @Override
    protected SessionRepositoryRequestWrapper wrapRequest(HttpServletRequest request, HttpServletResponse response) {
        SessionRepositoryRequestWrapper<S> sessionRepositoryRequestWrapper = new SessionRepositoryRequestWrapper<>(request, response, servletContext, sessionRepository, httpSessionStrategy);
        sessionRepositoryRequestWrapper.setSessionAttribute(""CustomSessionRepositoryRequestWrapper"");
        sessionRepositoryRequestWrapper.getSession();
        return sessionRepositoryRequestWrapper;
    }
}
```

I created sessionAttribute field to change the name of Session Objects attribute, because the class SessionRepositoryRequestWrapper save a ""cache"" on `request.setAttribute`, to don't get objects of CEAP Session. 

``` java
sessionRepositoryRequestWrapper.setSessionAttribute(""CustomSessionRepositoryRequestWrapper"");
```

**This filter run before the Custom App run.**

``` java
public class CustomRedisOperationsSessionRepository extends RedisOperationsSessionRepository {
// --------------------------- CONSTRUCTORS ---------------------------

    public CustomRedisOperationsSessionRepository(RedisConnectionFactory redisConnectionFactory) {
        super(redisConnectionFactory);
    }

    public CustomRedisOperationsSessionRepository(RedisOperations<Object, Object> sessionRedisOperations) {
        super(sessionRedisOperations);
    }

// ------------------------ INTERFACE METHODS ------------------------


// --------------------- Interface SessionRepository ---------------------

    @Override
    public RedisSession getSession(String id) {
        RedisSession redisSession = super.getSession(id);
        if (redisSession == null)
            redisSession = new RedisSession(new MapSession(id));
        return redisSession;
    }
}
```

I override method getSession to get the CustomApp Session, if the session is null, I created a new RedisSession empty with the same sessionId. If I don't override this method, the code will be create a new session with a different sessionId and changed the cookie.
"	2016-03-03 22:12:38	0.0		0
1028	"My commit only open possibility to extended redis repository, override methods and can change the wrap request or response with other classes without rewrite many, many code

Thanks
"	2016-03-04 08:53:54	0.0		0
1029	"@oassuncao Thanks for the response.

From what I understand, you can do this without any changes to Spring Session. You can create a new instance of `SessionRepositoryFilter` for each ""CustomApp"". The ""CustomApp"" `SessionRepositoryFilter` will only intercept requests for the specific ""CustomApp"" by either changing the servlet mappings or using something like Spring Security's `DelegatingFilterProxy`.

My concern about the proposed changes is that this appears to be a bit of an edge case. While I understand why you need these changes, I don't want to make the code more complicated for the 95% case. As outlined above, I think you can fairly easily achieve this without changes. For these reasons, I'm closing this as won't fix.

If you have additional questions on getting this working, please don't hesitate to reach out on StackOverflow (preferred) or GitHub issues. 

PS: If you don't get a response on StackOverflow (you should) within a day or so, feel free to ping us via GitHub issues.
"	2016-03-04 15:54:19	0.0		1
1030	"Hi @rwinch 

I do this, I have 2 filters

1- CEAP (SessionRepositoryFilter)
2- CustomApp (CustomSessionRepositoryFilter)

But when the second filter run, the filter get the session of CEAP, because we have today this code below on SessionRepositoryFilter.java

Class SessionRepositoryRequestWrapper

``` java
@Override
        public HttpSessionWrapper getSession(boolean create) {
            HttpSessionWrapper currentSession = getCurrentSession();
            if(currentSession != null) {
                return currentSession;
            }
                        ...
               }
```

The method getCurrentSession it's a cache that put the session on request.

``` java
               private void setCurrentSession(HttpSessionWrapper currentSession) {
            if(currentSession == null) {
                removeAttribute(CURRENT_SESSION_ATTR);
            } else {
                setAttribute(CURRENT_SESSION_ATTR, currentSession);
            }
        }
```

To change the CURRENT_SESSION_ATTR, I created a field named sessionAttribute, to have on the Request more than one session on ""cache""

`sessionRepositoryRequestWrapper.setSessionAttribute(""CustomSessionRepositoryRequestWrapper"");`
"	2016-03-04 16:26:52	0.0		0
1031	"@oassuncao You should only invoke `SessionRepositoryFilter` on requests that are not `CustomSessionRepositoryFilter`.
"	2016-03-18 15:03:29	0.0		1
1032	"I now understand this is on the 1.1.x branch. We are only accepting patches on 1.1.x, so I am going to close this
"	2016-03-03 22:07:19	0.0		0
1033	"Thanks for the PR! This is merged into master via 3300b58af
"	2016-03-01 03:08:10	0.0		0
1034	"Thanks for the PR! this is merged in via 00af8456
"	2016-03-01 02:49:00	0.0		0
1035	"Thanks for the PR! This is now merged into master :)
"	2016-02-29 18:59:51	1.0	2016-02-29 18:59:41	0
1036	"@jxblum Thanks for the PR! I'm not sure we want to modify the samples to use GemFire. We can always add more samples but we do not want to change the existing samples.
"	2016-02-24 14:36:10	0.0		1
1037	"@rwinch you can discard the commits for the changes to the Security/Users samples.  Or, it maybe nice to include different configurations for _Spring Session's_ supported stores and provide instructions on how to change stores when running the samples.  Of course, the default could be to use Redis and preserve the work you have already done.  Either way; no worries.
"	2016-02-24 15:49:44	0.0		1
1038	"@jxblum Thanks. I just wanted to make sure I wasn't missing something. I will just use ee38337
"	2016-02-24 15:50:45	0.0		0
1039	"Thanks for the PR! This is now merged into master via 53d7c84f73be1df4d
"	2016-02-24 23:05:14	0.0		0
1040	"Thanks for the PR! I have provided a few comments, but will need to revisit this once we start work on 1.2. This should be rather shortly as we hope to have 1.1 out this week (depending on one last issue getting resolved)
"	2016-02-23 22:20:00	0.0		0
1041	"Thanks for the review @rwinch. I'll update the PR accordingly over the next few days.
"	2016-02-23 22:40:31	0.0		0
1042	"@rwinch I've updated the PR with following changes:
- cleanup of expired sessions is now done using a single SQL statement (delete)
- support for publishing `SessionDestroyedEvent` and its subclasses has been removed
- `JdbcOperationsSessionRepository` constructor which takes a `DataSource` and constructs default `JdbcTemplate` has been added
- tests have been updated according to aforementioned changes
- javadoc updates
- fixed integration tests for new sample projects

SQL statements are still in `enum`, I'd like to see your feedback on my latest comments on this subject.
"	2016-02-24 20:28:36	0.0		0
1043	"@vpavic thanks for this PR.
- Use ConcurrentHashMap for the queryCache. Access and fill can be concurrent. 
- For what is the %PREFIX%? When then I would allow to change the whole table name, not just the prefix.

Personally I would not use the enum approach, just simple String which can be overwritten.
"	2016-02-26 15:31:06	0.0		1
1044	"@copa2 thanks for your feedback.
- Since `tablePrefix` is not intended to be changed in runtime, concurrency is not an issue. However, synchronizing `queryCache` operations inside `getQuery` method might be a good idea.
- Prefix allows for a limited customization of table name. This is a common approach used in many frameworks, for example Spring Integration, Spring Batch, Quartz Scheduler, etc. to avoid possible name clashes with other entities in your app and make it possible to have multiple repo's backed by the same database schema.
"	2016-02-26 19:54:27	0.0		1
1045	"I've updated the PR again, with the following changes:
- moved SQL scripts to `org/springframework/session/jdbc/` and updated references accordingly
- polished modifiers a bit in `JdbcOperationsSessionRepository`
"	2016-02-28 09:52:21	0.0		0
1046	"@vpavic Thanks again for sending this PR! I'm starting a full review of this PR now
"	2016-03-01 03:20:57	0.0		0
1047	"@vpavic 

> SQL statements are still in enum, I'd like to see your feedback on my latest comments on this subject.

[You said](https://github.com/spring-projects/spring-session/pull/379#discussion_r53863096)

> > Ahh, I see... you'd like to have something similar to way Security's JdbcDaoImpl provides SQL customization options.
> > 
> > I also considered this initially, but opted to go the route seen in Integration's JdbcMessageStore.
> > 
> > My reasoning was that in practice the Session object is closer to Integration's Message than it is to Security's UserDetails due to Session being entity which is internal to the framework unlike UserDetails which is often derived and constructed from some application domain entity provided by users. That's why the enum approach seemed like a good approach to me.

Thanks for the response. I would still like these to be static final Strings rather than enums.

I see where you got the idea from. I know this is a coding style change (especially since this is all private). However, making this change will better align with Spring Session's code style and provide consistency in the project. Additionally, it will make it easier to allow custom queries w/ very little effort if we every go down that path.
"	2016-03-01 03:39:01	0.0		1
1048	"@rwinch thanks for the full review, I'll update the PR with your suggestions within a day or two.
"	2016-03-01 07:16:49	0.0		0
1049	"@rwinch I've updated the PR with following changes:
- move queries from `enum` to `String` constants
- allowed default table name to be customized, instead of just table prefix
- completely removed event publishing
- use `Converter` interface for session (de)serialization customization
- replace `MapSession` references with `ExpiringSession` interface
- other misc improvements from your comments 
- rebased to the current master

I still owe you the persistence optimization in cases when only `lastAccessedTime` is updated. I need to think a bit about that one, in the meantime you can review other changes.
"	2016-03-02 18:14:33	0.0		1
1050	"@vpavic Thanks for the updates. 

> I still owe you the persistence optimization in cases when only lastAccessedTime is updated. I need to think a bit about that one, in the meantime you can review other changes.

You can have a boolean on the `JdbcSession` that is changed when any property (other than lastAccesedTime) is set. If the boolean changes then you would persist everything, else persist only the lastAccessedTime. In fact, you might keep track of if lastAccessedTime is written too and only persist if that changes.

You would likely need a different SQL statement that could be injected for this special case.
"	2016-03-02 18:35:30	0.0		1
1051	"> You can have a boolean on the JdbcSession that is changed when any property (other than lastAccesedTime) is set. If the boolean changes then you would persist everything, else persist only the lastAccessedTime. In fact, you might keep track of if lastAccessedTime is written too and only persist if that changes.

Something along those lines (`boolean` flags) was my initial idea also. Thanks.
"	2016-03-02 18:42:45	0.0		0
1052	"@rwinch, I've updated the PR with improved/optimized persistence strategy. Test cases to cover all the scenarios on `save` operation were also added.
"	2016-03-03 19:37:11	0.0		0
1053	"Have you [signed the CLA](https://github.com/spring-projects/spring-session/blob/master/CONTRIBUTING.adoc#sign-the-contributor-license-agreement)? 
"	2016-03-04 16:35:02	0.0		0
1054	"Whoops, sorry forgot to mention it in the opening comment :)
Yes, I've signed the CLA.

I also did some work on the docs for this new feature but didn't finish it yet.
"	2016-03-04 16:44:54	0.0		0
1055	"@vpavic Thanks! I applied some very minor polish, but other than that I think things are ready to merge. You mention:

> I also did some work on the docs for this new feature but didn't finish it yet.

Can you elaborate? Is this something that we need to wait on or can I merge now?
"	2016-03-07 13:42:17	0.0		0
1056	"@rwinch I was referring to documentation (docs module).

No need to wait for merging, I can open a new PR for the docs if that's OK with you.
"	2016-03-07 14:09:32	0.0		0
1057	"@vpavic Thanks for the clarification. I just wanted to make sure we were both ready for the merge. I'm putting some final polish on things and will merge once that is done.
"	2016-03-07 14:55:30	0.0		0
1058	"@vpavic I created #364 for the documentation of the samples. Ideally, we will have the documentation before we perform a release.
"	2016-03-07 15:43:31	0.0		0
1059	"Thanks again for the PR! This is now merged via cd38e307e00 I applied some polish via 8f8cfe5d79e12 and 7b28b214ffa4925497dac3c77e9d54b874bbe89f
"	2016-03-07 15:45:07	0.0		0
1060	"Rather than first querying and then deleting this could just be a delete which would prevent loading all the session ids in memory and reduce overhead on the database.
"	2016-02-23 22:13:31	0.0		1
1061	"I think I would prefer to use private static final Strings here
"	2016-02-23 22:14:42	0.0		1
1062	"Unfortunately, this will not publish the ApplicationEvent for every node in the cluster. For this reason, I think we should just not publish the event and establish this as a limitation of the datastore.

This ties in with why we can simply perform a delete rather than looking up the session id first.
"	2016-02-23 22:16:52	0.0		1
1063	"NOTE: See https://github.com/spring-projects/spring-session/pull/379/files#r53860075
"	2016-02-23 22:17:27	0.0		0
1064	"I initially considered implementing it that way for the same reasons, but that would mean `SessionExpiredEvent`s wouldn't be fired.
"	2016-02-23 22:19:52	0.0		0
1065	"Agreed, not sure how and why this one slipped through as `public`.
"	2016-02-23 22:20:33	0.0		0
1066	"@vpavic Thanks. See https://github.com/spring-projects/spring-session/pull/379/files#r53860177
"	2016-02-23 22:20:38	0.0		0
1067	"I should be more clear. I'm not sure I like the enum. I would only use Strings as this aligns with Spring coding conventions.

EDIT: Eventually we may make these injectable queries too which would make the Enum difficult to work with.
"	2016-02-23 22:21:32	0.0		1
1068	"OK, this approach also covers the cleanup strategy then.
"	2016-02-23 22:27:44	0.0		0
1069	"Ahh, I see... you'd like to have something similar to way Security's `JdbcDaoImpl` provides SQL customization options.

I also considered this initially, but opted to go the route seen in Integration's `JdbcMessageStore`.

My reasoning was that in practice the `Session` object is closer to Integration's `Message` than it is to Security's `UserDetails` due to `Session` being entity which is internal to the framework unlike `UserDetails` which is often derived and constructed from some application domain entity provided by users. That's why the `enum` approach seemed like a good approach to me.
"	2016-02-23 22:39:04	0.0		0
1070	"@rwinch, looks like the solution is stolen from the Spring Integration: https://github.com/spring-projects/spring-integration/blob/master/spring-integration-jdbc/src/main/java/org/springframework/integration/jdbc/JdbcMessageStore.java#L94.

Not sure if we really have some gain from the `enum`, but that might be some `hash` performance producing for the `HashMap` key...
"	2016-02-23 22:40:31	0.0		0
1071	"@artembilan stolen is such a harsh word :)

Previous comment clearly stated the origin of the approach taken here, as well as [this comment](https://github.com/spring-projects/spring-session/issues/364#issuecomment-183479733) did in the original issue. If something is a valid and proven approach to a given problem why not reuse it?
"	2016-02-23 22:53:58	0.0		0
1072	"@vpavic , sorry if that really sounded so hurting.
Really wasn't going to say anything bad nor to you, nor to the approach. 

Just was going to explain to @rwinch that there might no reason to nit-pick to this code.

From other side `steal` isn't applied between Spring projects. You use code from one Spring project in the another, therefore this word should be treated as enough soft.

Anyway I got your point and will use the more formal language in the future. :smile: 
"	2016-02-23 23:06:23	0.0		0
1073	"No harm done @artembilan, that's why I used :) in the previous comment.
We're on the same page.
"	2016-02-23 23:11:31	0.0		0
1074	"Is this necessary?
"	2016-02-29 22:12:00	0.0		1
1075	"Certainly not, it seems like IntelliJ's Gradle plugin's messing with Gradle conf.
I remember fixing something similar in `settings.gradle` prior to pushing the initial commit but it slipped in the updated commit.
"	2016-02-29 22:30:46	0.0		0
1076	"`@Override' on interface methods won't compile in Eclipse. Please remove this.
"	2016-03-01 03:51:53	0.0		1
1077	"If we keep this, need to add `publishEvent` to work with Spring 4.2.x (which we now compile with).
"	2016-03-01 03:53:27	0.0		1
1078	"I agree with @copa2 about [the table prefix](https://github.com/spring-projects/spring-session/pull/379#issuecomment-189323488).

If you need to allow customizing the queries, then allow the entire query to be injected.
"	2016-03-01 03:56:03	0.0		1
1079	"This won't be available to all JVM instances which is inconsistent with the way Spring Session works. We should probably remove this.
"	2016-03-01 03:56:53	0.0		1
1080	"If we change to using Strings for the queries, then this can be simplified. For example, we won't need queryCache. We won't need to [worry about concurrent access to queryCache](https://github.com/spring-projects/spring-session/pull/379#issuecomment-189323488). In fact, this method could be deleted.
"	2016-03-01 03:59:13	0.0		1
1081	"We should probably use interface type declaration for deserializer and serializer
"	2016-03-01 04:13:48	0.0		1
1082	"Move `SPRING_SECURITY_CONTEXT`  to PrincipalNameResolver since that is the only place it is used
"	2016-03-01 04:28:21	0.0		1
1083	"I'd also default the table to SPRING_SESSION to be more explicit
"	2016-03-01 04:30:07	0.0		1
1084	"Change to `Converter<byte[], Object>`
"	2016-03-01 04:32:55	0.0		1
1085	"Change argument type to `Converter<Object, byte[]>`
"	2016-03-01 04:33:26	0.0		1
1086	"At some point in the javadoc we should probably include the default schema that should be used with this.
"	2016-03-01 04:42:49	0.0		1
1087	"It would probably be good to have some sort of optimization to allow only updating the lastUpdateTime if that is all that was changed. This would be beneficial so that the entire Session does not need to be serialized every time.
"	2016-03-01 04:44:25	0.0		1
1088	"Change to `RowMapper<ExpiringSession>` (this will involve changing all the references to `MapSession` too).
"	2016-03-01 04:47:24	0.0		1
1089	"Let's use `springSessionJdbcOperations` as the qualifier.
"	2016-03-01 04:49:09	0.0		1
1090	"Yeah, I figured that out myself in the meantime.
"	2016-03-01 06:49:35	0.0		0
1091	"Ok, so assuming we take the Strings for queries route, you'd like to also remove the possibility of changing just table prefix?

In that case, users would need to provide custom queries just to the change table prefix. Consider the case where there are multiple apps sharing the same database schema - in order to avoid conflicts only the table prefix needs to be changed. Forcing users to provide custom queries in that case is a configuration overkill IMO.

If we keep table prefix option, we need some sort of `getQuery` method, and a cache would certainly be beneficial to prevent `String` manipulation on each `SessionRepository` operation.
"	2016-03-01 07:15:13	0.0		1
1092	"> In that case, users would need to provide custom queries just to the change table prefix. Consider the case where there are multiple apps sharing the same database schema - in order to avoid conflicts only the table prefix needs to be changed. Forcing users to provide custom queries in that case is a configuration overkill IMO.

We probably wouldn't advice placing something like session in a shared database (although this would still be possible with a little bit of work). Typically different applications would use different username / password for their database connection. The different users could have different default schema which would isolate the sessions.

We could certainly create a separate ticket for adding a table prefix and see if it gets enough votes, but don't think we'd add something like this in an initial release (once we add something it cannot be removed).
"	2016-03-01 14:02:52	0.0		1
1093	"@rwinch we're very often in situation where customer owns the database and all we get is a schema with limited privileges, meaning we have multiple services that share the same schema. I agree it's a not great situation but its completely out our control.

Therefore I think allowing users to customize the table prefix is not some exotic requirement but rather a failry common thing we heavily rely on with other frameworks we use regulary:
- [Spring Integration](http://docs.spring.io/spring-integration/docs/4.2.5.RELEASE/reference/html/jdbc.html#jdbc-message-store-generic)
- [Spring Batch](http://docs.spring.io/spring-batch/trunk/reference/html/configureJob.html#repositoryTablePrefix)
- [Quartz Scheduler](http://quartz-scheduler.org/generated/2.2.1/html/qs-all/#page/Quartz_Scheduler_Documentation_Set%2Fre-jtx_jdbc_jobstoretx_configuration.html%23)

Not to drag this any further, I'll update the PR soon according to your preferences but expect another PR to provide the table prefix customization as soon as you merge this one :)
"	2016-03-01 18:46:47	0.0		1
1094	"@vpavic Thank you for your response. Would a table name work (vs just a prefix)? We could have a setter that contains modifies the table name of every query (only if they are using the default queries).
"	2016-03-02 15:27:52	0.0		1
1095	"@rwinch yes, of course, that would be great.
"	2016-03-02 17:01:56	0.0		0
1096	"Thanks for the PR! This is now merged via 5bf12fdd93
"	2016-02-22 19:32:31	0.0		0
1097	"Few related observations:

Even though the `FindByIndexNameSessionRepository` javadoc claims that _Spring Session is not aware of the authentication mechanism being used_, concrete implementations are still somewhat tied to Spring Security - I've made it possible to set a custom `PrincipalNameResolver` in `RedisOperationsSessionRepository`, however `saveDelta` method still relies on `SPRING_SECURITY_CONTEXT` key.

`AbstractGemFireOperationsSessionRepository` requires some refactoring to make it possible to customize `PrincipalNameResolver`. If this PR is accepted I can tackle this some time later (if Gemfire integration author cannot do it).
"	2016-02-20 23:14:45	0.0		1
1098	"@vpavic Thanks for the PR! 

While I can see that this looks like a good idea, I don't think we want to do this just yet. The reason we have duplicated the logic is because we want to keep the implementation details private (so they can change later).

You may notice that right now the API is specific to resolving a principal name. However, `FindByIndexNameSessionRepository` supports finding by a generic index name. This means we would likely want to update the API to support generic index names. However, we will not have enough time to do this before things go GA.

Another consideration is that we would like to see what shapes up from the [Redis support](https://github.com/spring-projects/spring-data-redis/pull/156/files#diff-d2c04ffe360655561105d34b8ba1d122R31). We may find we can simply use some Spring Data Commons support rather than providing our own (I'm currently in talks with the Spring Data Team about this idea).

For these reasons, I'm going to close this PR and in favor of #376 for us to address this once we know what is happening within Spring Data. Thank you for pointing out this was undocumented issue!

Thanks again for the PR (sorry the issue wasn't documented)! I'm looking forward to seeing support for #364 
"	2016-02-22 20:31:06	0.0		1
1099	"@rwinch thanks for the insight!

I understand your reasoning, the changes provided with this PR would've been a more natural fit with `FindByIndexNameSessionRepository`'s predecessor - `FindByPrincipalNameSessionRepository`. Since a move to more generic index name base repository is made, the same should apply to the proposed Resolver.

I'd be happy to make another contribution when #376 shapes up with more concrete details.

PR to address #364 is coming soon, I'll just duplicate `PrincipalNameResolver` logic.
"	2016-02-22 20:47:53	0.0		0
1100	"@vpavic Thanks! I'll try and remember to bump you when we know what path to take.

Looking forward to that PR! With this and the Mongo support I think that a 1.2 is going to be coming before we know it!
"	2016-02-22 20:50:57	0.0		0
1101	"On MongoDB, instead of manually cleaning up expired sessions, you could use TTL. Not sure how much of a performance hit you'd take on that.
"	2016-02-20 17:36:27	0.0		1
1102	"Yes, but it requires creating TTL index. And if you want to use mongo to
control the time there have to be single TTL per collection. Also I dont
know if there is event produced by Mongo then.
"	2016-02-20 17:43:58	0.0		0
1103	"Ah, you're right about no event push. (The TTL would be fairly easy--you set the TTL to zero and write the time to expire.)
"	2016-02-20 18:08:05	0.0		0
1104	"Thanks for the PR! I have composed some questions / comments. Please keep in mind I am a novice Mongo user at this point, so please feel free to respond with ""You are wrong because...""
- [ ] It seems that there are quite a few resources that are unnecessary (i.e. https://github.com/spring-projects/spring-session/pull/371/files#r53698652) We should remove any unnecessary resources. I know that this is likely due to the fact that the existing boot sample has the same problem and created #378 to address that)
- [ ] Please make `AuthenticationParser` logic private or package scope. See https://github.com/spring-projects/spring-session/pull/371/files#r53699077
- [ ] Please remove `@Override` on interface methods as described https://github.com/spring-projects/spring-session/pull/371/files#r53699394
- [ ] Restore MapSession being final as outline https://github.com/spring-projects/spring-session/pull/371/files#r53699588
- [ ] Please rename to `MongoHttpSessionConfiguration` to match existing naming conventions. https://github.com/spring-projects/spring-session/pull/371/files#r53699722
- [ ] Please rename to `MongoOperationsSessionRepository` to match existing naming conventions https://github.com/spring-projects/spring-session/pull/371/files#r53699921
- [ ] Consider using a Spring Data Mongo Repository and MongoSession object https://github.com/spring-projects/spring-session/pull/371/files#r53700324 
- [ ] Is there a reason to remove `-` from the id? https://github.com/spring-projects/spring-session/pull/371/files#r53700479
- [ ] It may be good to have actual expiration on sessions too https://github.com/spring-projects/spring-session/pull/371/files#r53700670
- [ ] ApplicationEvent are not published across nodes https://github.com/spring-projects/spring-session/pull/371/files#r53700880
- [ ] Perhaps removing MongoSessionSerializer  https://github.com/spring-projects/spring-session/pull/371/files#r53701048

NOTE: I haven't yet looked much at the samples (I will do that once we iron out some of the details in the production code). 
"	2016-02-22 22:06:32	0.0		1
1105	"I've a signed CLA
"	2016-02-24 14:41:35	0.0		0
1106	"@jkubrynski Just letting you know I am now starting to review the updates
"	2016-02-29 20:07:49	0.0		0
1107	"If you are able rebasing the branch would also be appreciated. If that is difficult, I can do that part for you.
"	2016-03-01 17:54:47	0.0		1
1108	"Thanks again for the PR! This is now merged into master via 34cebc3 I applied very minor polish via 216bfd73558
"	2016-03-07 18:49:03	0.0		0
1109	"Do we actually need these resources?
"	2016-02-22 21:47:52	0.0		1
1110	"I prefer not to expose this logic for reasons explained in #372 Please move this logic within the mongo package and make it package scope or private.
"	2016-02-22 21:50:50	0.0		1
1111	"This sample is a clone of a boot sample. In boot-sample there is nice webapp to show the application usage and as I know it uses those resources.
"	2016-02-22 21:51:37	0.0		0
1112	"`@Override` on interface methods will not compile in Eclipse since we are needing to work with older JDKs. Please remove any `@Override` for interface methods so this compiles.
"	2016-02-22 21:53:05	0.0		1
1113	"Please restore this being final
"	2016-02-22 21:54:18	0.0		1
1114	"Please rename to `MongoHttpSessionConfiguration` to match existing naming conventions.
"	2016-02-22 21:55:13	0.0		1
1115	"Please rename to MongoOperationsSessionRepository to match existing naming conventions
"	2016-02-22 21:56:31	0.0		1
1116	"Did you consider creating a dedicated MongoSession object that used the [Spring Data Mongo Repsitory](http://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#repositories)? Is there a reason to use the DBObject directly? I'm wondering if using the repository support might make it easier to customize things like serialization.
"	2016-02-22 21:59:14	0.0		1
1117	"Is there a reason to remove the `-` from the id?
"	2016-02-22 22:00:13	0.0		1
1118	"It may be good to have an expiration on the actual object as well to ensure that if the application is down when sessions expire (then brought back up) that the sessions are still cleaned up.
"	2016-02-22 22:01:52	0.0		0
1119	"Unfortunately this event will not be published across all nodes. This means that we don't really get the expected support. Perhaps (at least for now) Mongo support just doesn't support events (this is allowed).
"	2016-02-22 22:03:16	0.0		0
1120	"It seems like there should be some existing API (either in Spring Core or Spring Data Mongo) that we could use rather than writing our own. Have you looked into this?
"	2016-02-22 22:04:26	0.0		0
1121	"Thank you for pointing this out. I noticed that and included that detail in my summary https://github.com/spring-projects/spring-session/pull/371#issuecomment-187409315 (along with an issue to get the boot sample fixed). 
"	2016-02-22 22:09:24	0.0		0
1122	"I removed the final because it is implemented with covering all required logic, which means we can use it for example for storing sessions in Mongo or relational databases by simply creating annotated class that extends the MapSession. Is there any particular reason for keeping it final?
"	2016-02-22 22:24:41	0.0		1
1123	"Ok
"	2016-02-22 22:26:21	0.0		0
1124	"Ok
"	2016-02-22 22:26:26	0.0		0
1125	"Ok
"	2016-02-22 22:26:37	0.0		0
1126	"Ok
"	2016-02-22 22:26:42	0.0		0
1127	"First it appeared unnecessary for the changes that were made. Does anything need this change right now? Second by keeping it final we are able to change certain implementation details without worrying about passivity.
"	2016-02-22 22:27:49	0.0		0
1128	"Yep - the problem is with serialization. Mongo repositories are not capable of writing Spring Security objects, like for example `UsernamePasswordAuthenticationToken`. Thats why we need `MongoSessionSerializer` to handle that. Exposing it as an interface allows users to plugin-in their own serialization mechanisms.
"	2016-02-22 22:29:27	0.0		1
1129	"Just making the id shorter. `-` sign is redundant here in my opinion. Of course it will also work with minus char so if you prefer this version I can remove the replacement
"	2016-02-22 22:31:41	0.0		0
1130	"Yes, but we need some additional information like for example field names. That's why I decided to create dedicated interface. Schema design in Mongo is a big topic so IMHO it's good to give such extension point to the users.
"	2016-02-22 22:34:30	0.0		0
1131	"Would it be possible to provide [a custom MongoConverter](http://docs.spring.io/spring-data/data-mongo/docs/1.7.2.RELEASE/reference/html/#mongo.custom-converters) to work around this?
"	2016-02-22 22:34:56	0.0		0
1132	"We use is in a version with FST serialization :) I can make it final but it means each custom implementation will probably copy 90% of this code, as it covers most usecases.
"	2016-02-22 22:37:27	0.0		0
1133	"I was thinking about that but it means custom converter for each non-standard object. That's possible but not sure useful for users, when they will have to register their own serializers. Serializers like Kryo, FST or even Java serializations are handling it much better.
"	2016-02-22 22:39:35	0.0		0
1134	"Ok that makes more sense then.

Would you be interested in contributing the FST serialization in a separate PR and making the class non-final in that PR rather than this one? If so, can you create an issue to track that? Thanks for considering this!

NOTE: You might hold off on sending that PR till we get some of the other comments sorted out so you don't have dual maintance.
"	2016-02-22 22:40:15	0.0		1
1135	"I think there will be problem in adding FST to IO platform so I decided to open `MapSession` with this PR. But definitely I can this change to another PR
"	2016-02-22 22:43:06	0.0		0
1136	"Please keep in mind that I am new to Mongo, so this might not work...

It seems you might be able to use  `Converter<ExpiringSession, DBObject>` and `Converter<DBObject,ExpiringSession>`. This would be implemented similar to `MongoSessionSerializer` using JDK serialization?
"	2016-02-22 22:45:26	0.0		1
1137	"I would like to keep it in a distinct PR so we can keep track of why we are making changes.

In regards to getting FST in the Spring IO platform...I believe optional dependencies do not need to be in Spring IO Platform.

cc @wilkinsona 
"	2016-02-22 22:48:41	0.0		1
1138	"Yes please remove that.
"	2016-02-22 23:14:10	0.0		1
1139	"Optional dependencies need to be in the Platform
"	2016-02-23 13:37:25	0.0		1
1140	"Thanks @wilkinsona For some reason I thought the Gradle plugin only checked runtime and not optional scopes.

What are your thoughts on adding FST as a dependency to Spring IO Platform?
"	2016-02-23 22:07:40	0.0		0
1141	"I'm rather wary of it at the moment. FST's own dependencies are pretty minimal (Jackson, Objensis, and Javassist), but minor updates are released very frequently (20 in the last 12 months) and that may prove problematic in the future.

If it were me, I'd be looking for alternatives that are less of a moving target. If there aren't any, I'd consider using jarjar and embedding FST so that you can have complete control over the version that's used.
"	2016-02-24 09:40:34	0.0		1
1142	"Can we make this package scope?
"	2016-02-29 20:50:47	0.0		1
1143	"In the other implementations the configuration is in a distinct package to keep configuration distinct from that of the code actually doing stuff. This ensures we do not have any web based dependencies in `org.springframework.session.data.gemfire` (they are all in sub packages). Do you have a good reason for putting this in the same package? If not, it probably makes sense to move this and other configuration related classes into `org.springframework.session.data.mongo.config.annotation.web.http`.
"	2016-02-29 20:56:54	0.0		1
1144	"We should probably introduce setter methods for each of these member variables (including the non-autowired members) and perform `@Autowire` on the setter method. This ensures users can still use XML based configuration by allowing them to create an instance of `MongoHttpSessionConfiguration` and set the properties.
"	2016-02-29 20:57:48	0.0		1
1145	"Spring Session uses commons-logging (same as Spring Framework).
"	2016-02-29 20:59:13	0.0		0
1146	"These to fields should likely be on a parent interface of  `StandardMongoSessionToDBObjectConverter` and `StandardDBObjectToMongoSessionConverter` since they only make sense if those `Converter`s are being used.
"	2016-02-29 21:04:53	0.0		1
1147	"The typical pattern Spring Session follows is required dependencies are constructor injected and anything that has a default is a setter method.

Since we have a default for everything but the MongoOperations, I think it makes sense to move all the other dependencies to setter methods.
"	2016-02-29 21:10:03	0.0		1
1148	"I'm guessing `getPrincpalQuery` is necessary so you can customize the field name of principal, but I'm not very keen on this since the user would need to override this if they used another `Converter`. I'm trying to figure out what the right answer is here since you did originally have the strategy aware of the principal name attribute.

Perhaps the right answer might be to keep `MongoExpiringSession` public (but mark final) and allow the Converter to inject the query on the `MongoExpiringSession`. The `MongoSessionRepository` already requires `MongoSessionRepository` so it could obtain the query from the `MongoExpiringSession`. This way all the query information is kept within the converters. The one thing we might change is for the API on `MongoExpiringSession` to have a method to lookup the query by index name.

I'm not entirely convinced of this, so please let me know your thoughts.
"	2016-02-29 21:14:38	0.0		1
1149	"I'm thinking rather than injecting two `Converter` implementations we should require a `GeneircConverter`. This would allow for a few benefits:

1) It would allow the same class to serialize and deserialize.
2) It would allow for converting other types (if necessary) in the future without adding more setter methods.
3) Likely we could experiment with registering the default Spring `GeneircConverter` so any hooks for automatic conversion are included with this feature.
"	2016-02-29 21:36:10	0.0		1
1150	"Very minor, but test names should end in Test**s**
"	2016-02-29 21:36:46	0.0		1
1151	"Thanks, I'm still working on Jackson serialization which I should finish in
few days.
"	2016-02-29 21:41:29	0.0		0
1152	"@jkubrynski Awesome! We could probably send the Jackson serialization in a new PR so we can keep making progress on this. I hope to be rather responsive on this until we finish up.
"	2016-02-29 21:50:54	0.0		1
1153	"Yes - I've made configuration as well as the converters package scoped, which means if I'd like to open annotation to a different package I've to open also those classes.
"	2016-02-29 22:35:21	0.0		0
1154	"I haven't noticed anyone is still using XML config :) I'll fixed it
"	2016-02-29 22:36:57	0.0		0
1155	"The defaults are in the configuration -> do you want to move them to the implementation?
"	2016-02-29 22:42:08	0.0		0
1156	"Yes please. The defaults in the implementation would be nice so that users that manually instantiate get the same defaults. This would also allow keeping these defaults package scope while moving the configuration to a distinct package.
"	2016-02-29 22:43:49	0.0		1
1157	"The user is able to override this query when he want to change `principal` field name - not needed for changing the converter. 
"	2016-03-01 17:22:09	0.0		1
1158	"But things like maxInteractiveInterval or collectionName are specified on annotation. Do you want to copy those default to the implementation?
"	2016-03-01 17:23:12	0.0		0
1159	"That was something not clear for me. You can use many different converters but we also have to stick to some naming convention. How would you like to enforce user to serialize `expireAt` to field with exactly this name? And it's needed to create a TTL index.
"	2016-03-01 17:24:50	0.0		1
1160	"Yes
"	2016-03-01 17:29:46	0.0		0
1161	"Generally I'm not a fan of such approach. When someone will decide to serialize attributes as a map he needs to create whole MongoExpiringSession object from scratch, as you use fully qualified field name for keeping principal, and Mongo doesn't allow dots as field names. So with such approach we totally close repository or converters from being extended by users. I'm not sure it's something you want?
"	2016-03-01 17:41:22	0.0		1
1162	"I think we should allow the user to inject the queries as well.
"	2016-03-01 17:50:54	0.0		1
1163	"How would you like to do that? By creating bean with queries? In my opinion
it's much easier to just create a converter which with methods returning
those queries, so user will be able to keep in in the same place. That is
generally something that I've created in initial commit.
"	2016-03-01 17:57:32	0.0		0
1164	"I see your point there. However, I'm quite reluctant to provide our own serialization APIs. Perhaps we can extend `GenericConverter` and have it contain a lookup method for the queries. This ensures that we have all the conversion logic and queries in the same API but yet reuses the existing Spring infrastructure. Thoughts?
"	2016-03-02 13:53:51	0.0		1
1165	"+1
"	2016-03-02 13:56:53	0.0		0
1166	"I think we should make

`Query getQueryForIndexName(String indexName)`
"	2016-03-03 22:32:47	0.0		1
1167	"The more I think about this the less I like it because it is a one off. How is the index for principalName created? Perhaps we should have a method like:

`List<Index> getIndexes()`
"	2016-03-03 22:37:51	0.0		1
1168	"I've simplified this -> cannot see the usecase in which we won't use `is` on criteria
"	2016-03-03 22:38:28	0.0		0
1169	"The package should be `org.springframework.session.data.mongo.config.annotation.web.http` to isolate the web based dependencies (there may eventually be an EnableMongoSession annotation for things like Spring Batch which don't have HTTP).
"	2016-03-03 22:39:53	0.0		1
1170	"Currently there is no index on principal. It used only for querying against principal. I'd prefer to refactor that after allowing more than principal query.
"	2016-03-03 22:40:18	0.0		1
1171	"OK
"	2016-03-03 22:41:32	0.0		0
1172	"@jkubrynski We won't be able to change the method signature on a public interface once we go GA. Therefore, I think we should probably make this a little more generic.
"	2016-03-03 22:41:47	0.0		1
1173	"Not if we want to allow users to create their own converters -> then then need to operate on this object
"	2016-03-03 22:42:27	0.0		0
1174	"Again we won't be able to change a public interface once we go GA. Therefore, I think we should probably make this a little more generic.
"	2016-03-03 22:42:37	0.0		1
1175	"AAaa - I get it! Sure - will change it :)
"	2016-03-03 22:43:30	0.0		0
1176	"Thanks for the PR @jxblum! This is now merged into master
"	2016-08-15 19:53:25	1.0	2016-08-15 19:53:12	0
1177	":+1:
"	2016-02-09 09:11:13	0.0		0
1178	"Thanks for the PR! This is now merged into master via bf7729b I added very minor polish in 5f23b3c to ensure that the hazelcastInstance wasn't null in the teardown method.
"	2016-02-09 15:57:18	0.0		0
1179	":+1: Excellent work, @vpavic 
LGTM
"	2016-02-08 04:42:48	0.0		0
1180	"Thank you for stepping up and providing an integration test @vpavic! I have merged this into master via 7c53558454a160e0443d73366ecc9e0d32211c3f
"	2016-02-08 22:20:59	0.0		0
1181	"Otherwise, yes, of course, the good job!
And thank you everyone for contribution!
"	2016-02-08 22:41:23	0.0		0
1182	"@artembilan Thanks for the review!
"	2016-02-08 22:50:29	0.0		0
1183	"Uh! Just have noticed that.
From my perspective it should not be so bad at all:

```
 /**
     * Shuts down all running Hazelcast Instances on this JVM.
     * It doesn't shutdown all members of the
     * cluster but just the ones running on this JVM.
     *
     * @see #newHazelcastInstance(Config)
     */
    public static void shutdownAll() {
```

But from other side I would be consistent and close only that `HazelcastInstance` which we have started with the `HazelcastITestUtils.embeddedHazelcastServer`.
"	2016-02-08 22:36:20	0.0		1
1184	"I don't like all this `I` notations in the class names. Feels like the C++ artifacts, but that is just IMHO.
Looks like Hazelcast doesn't feel itself bad to use it in its types like `IMap` :smile: 
"	2016-02-08 22:38:51	0.0		1
1185	"@artembilan This is a convention that is used in Spring Session to distinguish between integration tests and unit tests. Otherwise we will get collisions in the class names.
"	2016-02-08 22:45:25	0.0		0
1186	"Thank you @rwinch . Got it! Makes sense: `ITest` == Integration Test.
Never mind - the matter of opinion :smile: 
"	2016-02-08 22:48:40	0.0		0
1187	"@artembilan Thanks for the feedback! That is a good point :) I created #358 Any chance you  (or anyone else) could send a PR?
"	2016-02-08 22:50:13	0.0		0
1188	"@artembilan Not a problem at all! All feedback is welcome...keep it coming :)
"	2016-02-08 22:51:15	0.0		0
1189	"See GitHub Issue #353 for further details.
"	2016-02-04 07:10:26	0.0		0
1190	"Thanks again for the PR! This is merged into master via c2b407189ee171d86ca0fe6763e92f24c77455ea  

I also performed a bit of Polish via 2b5386ad9863182d90b1ab6f6dc7d36cda281ef7 most notably the sample code is now tested
"	2016-02-08 21:41:04	0.0		0
1191	"Other than possibly adding a test case, it looks good. I wonder if we should specifically mention that needn't (shouldn't?) try to configure the map in Hazelcast configuration because it will have no effect.
"	2016-02-03 15:50:33	0.0		1
1192	"@rwinch @shakuzen All comments from here and gitter should now be addressed.
"	2016-02-03 22:20:30	0.0		0
1193	"@manderson23 Thanks! As discussed on Gitter we are now just waiting on someone to test with an external Hazelcast. It seems @shakuzen is going to have time for that tonight
"	2016-02-04 16:50:05	0.0		0
1194	"@rwinch I was going to look at an integration test for clients tonight but are you happy to go with @vpavic tests at https://github.com/vpavic/spring-session/commit/73c727b13f6ee6efbac3e7b817529fdddbcffecd as mentioned on gitter? 

Since @shakuzen has confirmed the clients works you could merge this PR then get @vpavic to open a new PR?
"	2016-02-07 20:59:50	0.0		0
1195	"That sounds like a great plan. I'll look into merging tomorrow.

Thanks!
Rob
On Feb 7, 2016 2:59 PM, ""Mark Anderson"" notifications@github.com wrote:

> @rwinch https://github.com/rwinch I was going to look at an integration
> test for clients tonight but are you happy to go with @vpavic
> https://github.com/vpavic tests at vpavic@73c727b
> https://github.com/vpavic/spring-session/commit/73c727b13f6ee6efbac3e7b817529fdddbcffecd
> as mentioned on gitter?
> 
> Since @shakuzen https://github.com/shakuzen has confirmed the clients
> works you could merge this PR then get @vpavic https://github.com/vpavic
> to open a new PR?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/spring-projects/spring-session/pull/352#issuecomment-181115494
> .
"	2016-02-07 22:51:24	0.0		0
1196	"Thanks again for the PR! I squashed the commits and merged it in via f2443f5e21b64c193cd2c1e4c4d27d1f9f7b20ce
"	2016-02-08 22:20:22	0.0		0
1197	"Looks like that PR should be closed already, @rwinch .

Nice job, guys!
Sorry for the noise from my side: I like this projects, but don't have time to contribute here and even can't still figure out the hooks for my Spring Integration to utilize the of this project...
"	2016-02-08 23:05:33	0.0		0
1198	"@artembilan Thanks! Just working on catching up on responding to comments / closing the issues I pushed fixes for...This is fixed via f2443f5e21b64c193cd2c1e4c4d27d1f9f7b20ce so closing this comment

@manderson23 Thanks again for the PR!
"	2016-02-08 23:08:49	0.0		0
1199	"I realized when reading this sentence we have an issue. The `put` method on `IMap` does indeed set the TTL, but what we actually want is the TTI (time to idle) set.
"	2016-02-02 02:59:05	0.0		1
1200	"As [discussed in Gitter](https://gitter.im/spring-projects/spring-session?at=56b07d126b6468374a0af02c), this is not an issue as I thought it was. Things should work as expected, but it would be better if we add a test specifically for this, like:
- Save a session
- Wait a some time less than the expiration time
- Update the session as SessionRepositoryFilter does
- Wait until past the original time it should have expired
- Ensure it has not expired because it was updated.
"	2016-02-03 15:43:42	0.0		1
1201	"This did not put the badge in the right spot
"	2016-02-01 04:58:51	0.0		0
1202	"Thanks for the PR! This is now merged into master :)
"	2016-01-25 04:19:16	1.0	2016-01-25 04:19:03	0
1203	What's blocking the merge?	2017-05-12 21:49:52	0.0		0
1204	"final
"	2016-01-10 15:10:03	0.0		0
1205	"Is there a need for concurrency in these maps?
If YES, then why not use `ConcurrentMap` as a type and use `#putIfAbsent()` instead of `#put()`.
"	2016-01-10 15:11:40	0.0		1
1206	"bad formatting.
there is some more ahead.
"	2016-01-10 15:12:05	0.0		1
1207	"`ConcurrentMap` is used because the map cache could be accessed  from multiple threads concurrently. `#putIfAbsent()` is not used as overwrites are allowed. overwrites are legal if for some reason cache is not purged of old session before creating new session. 
"	2016-01-11 15:43:04	0.0		0
1208	"closing to come up with better impl.
"	2015-12-27 14:42:35	0.0		0
1209	"It looks like trouble was in my kryo classes, but this PR doesn't make sense unless we actually provide some sensible custom kryo implementation for serializer. That'd be to actually verify things in tests.
"	2015-12-27 16:39:04	0.0		1
1210	"We spoke offline and the concern was more related to Spring Session scoped beans in general and not this fix. I merged this into master at fe17e3fcc0988ae52c8a50d0007017c595f3769a I also added a test cc1d3a7e9ef85e68835800dd5fdfdeacf66c0444
"	2016-02-04 21:01:43	0.0		0
1211	"Actually I think this casting is wrong and was related to use of jdk serialization. Been playing with kryo and I'm now getting casting errors. Need to play with it a bit more.
"	2015-12-27 11:41:42	0.0		1
1212	"@jvalkeal What issue were you having exactly? This looks exactly like the way I would solve the issue.
"	2016-01-29 22:58:41	0.0		1
1213	"Thanks for the PR! This is now merged into master. 

> BTW, I'm curious why wrapper task isn't used in build.gradle as follows:

I just find it easier to generate the wrapper using my current version of Gradle (it doesn't need the task actually defined in newer versions of Gradle).

I typically update the wrapper by modifying the properties file directly to avoid changing any updates that may have been made to things like the [default java options](https://github.com/spring-projects/spring-session/blob/3df40dd8a9ada28e3217c15482cfe1f74812fdf1/gradlew#L10)

Is there a reason you think it would be better defined in the build.gradle?
"	2015-11-28 20:21:49	1.0	2015-11-28 20:18:56	1
1214	"@rwinch I just thought it's easier to change a version but didn't know the `gradlew` is customized. Thanks for the explanation :smile: 
"	2015-11-29 03:04:56	1.0	2015-11-28 20:18:56	0
1215	"@izeye Not a problem on the explanation. Thanks again for the PR and for the extra set of eyes on things :)
"	2015-11-29 03:09:59	1.0	2015-11-28 20:18:56	0
1216	"Thanks for the PR @tsachev! This is now merged into master

I love all the work you have been doing with Spring Session lately! Keep up the great work :)
"	2015-12-03 22:58:13	1.0	2015-12-03 22:57:51	0
1217	"Thanks again for taking the time to send a PR! Closing due to the feedback I provided on #311 Specifically we would want this to be a distinct strategy.
"	2015-12-03 23:32:31	0.0		0
1218	"Thank you for taking the time to send a PR! Closing due to the feedback I provided on #311 Specifically we would want this to be a distinct strategy.
"	2015-12-03 23:32:47	0.0		0
1219	"Thanks for sending this for my early review :)
"	2015-12-04 22:26:25	0.0		0
1220	"Thank you for the PR! Here is the current check list of what we need done. 
- [ ] Documentation. This is really thing that _must_ be done before we merge. Everything else is cosmetic and is something I can manage for you if necessary.
- [ ] Squash commits. We should strive for a single commit per committer. If there is real good reason to split into multiple commits we can make exceptions.
- [ ] Rename the commit comment to refer to Issue #148 
- [ ] Remove `@Override` annotations from interface overrides so that it compiles in Eclipse
- [ ] While good cleanup, we should probably move the changes of MapSessionRepository to a different commit https://github.com/spring-projects/spring-session/pull/308/files#diff-3e486055b7d5bb484429c172627aba11L68
"	2016-01-18 17:05:40	0.0		1
1221	"All check list items resolved.
- Documented all Spring SessionGemFire support and features including: Javadoc, updated Spring Session User Guide and Samples (4 in total for client/server and p2p using both Java Config and XML).
- Squashed/fixed up all commits into a single commit summarizing all the development work to add GemFire support to Spring Session.
- Renamed the commit to refer to PR #148.
- Removed all @Override annotations on interface overrides; still used @Override on class methods.
- Reverted changes to the MapSessionRepository class.

If there are any issues, let me know.
"	2016-01-23 21:00:45	0.0		0
1222	"Thank you for the updates John!

Here is my first round of comments. I will wait until we get these sorted out until we continue.

# Javadoc Failures

The first issue I run into is Javadoc failures. If I run the following with JDK 8 I get a failure:

```
~/code/spring-session$ ./gradlew clean check
...
:docs:compileTestJava

FAILURE: Build failed with an exception.

* What went wrong:
Could not resolve all dependencies for configuration ':docs:testCompile'.
> Could not find com.gemstone.gemfire:gemfire:8.1.0.
  Searched in the following locations:
      https://jcenter.bintray.com/com/gemstone/gemfire/gemfire/8.1.0/gemfire-8.1.0.pom
      https://jcenter.bintray.com/com/gemstone/gemfire/gemfire/8.1.0/gemfire-8.1.0.jar
  Required by:
      spring-session-build:docs:1.1.0.BUILD-SNAPSHOT > org.springframework.data:spring-data-gemfire:1.7.2.RELEASE

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED
```

# Tests Failures
- If I run `./gradlew build.` from the spring-session-build project I get failures. The first is:
  
  ```
  :docs:compileTestJava
  
  FAILURE: Build failed with an exception.
  
  * What went wrong:
  Could not resolve all dependencies for configuration ':docs:testCompile'.
  > Could not find com.gemstone.gemfire:gemfire:8.1.0.
  Searched in the following locations:
      https://jcenter.bintray.com/com/gemstone/gemfire/gemfire/8.1.0/gemfire-8.1.0.pom
      https://jcenter.bintray.com/com/gemstone/gemfire/gemfire/8.1.0/gemfire-8.1.0.jar
  Required by:
      spring-session-build:docs:1.1.0.BUILD-SNAPSHOT > org.springframework.data:spring-data-gemfire:1.7.2.RELEASE
  ```
- If I resolve that I am then getting:
  
  ```
  The Server is running at http://localhost:64851
  :samples:httpsession-gemfire-clientserver-xml:jar
  :samples:httpsession-gemfire-clientserver-xml:integrationTest
  
  sample.AttributeTests > first visit no attributes FAILED
  org.codehaus.groovy.runtime.powerassert.PowerAssertionError at AttributeTests.groovy:32
  
  2 tests completed, 1 failed, 1 skipped
  ```
  
  Looking at the test output I see:
  
  ```
  Assertion failed: 
  
  assert driver.title == 'Session Attributes'
     |      |     |
     |      null  false
     org.openqa.selenium.htmlunit.HtmlUnitDriver@56f318d8
  
  at sample.pages.HomePage._clinit__closure1(HomePage.groovy:27)
  at sample.pages.HomePage._clinit__closure1(HomePage.groovy)
  at geb.Page.verifyThisPageAtOnly(Page.groovy:187)
  at geb.Page.verifyAt(Page.groovy:146)
  at geb.Browser.doAt(Browser.groovy:367)
  at geb.Browser.at(Browser.groovy:298)
  at geb.Browser.to(Browser.groovy:450)
  at geb.Browser.to(Browser.groovy:426)
  at geb.spock.GebSpec.methodMissing(GebSpec.groovy:54)
  at sample.AttributeTests.first visit no attributes(AttributeTests.groovy:32)
  ```
  
  It seems like this is caused by the fact that when starting the application (to perform the tests) the following error is caused:
  
  ```
  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'gemfireCache': Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanInitializationException: no bean of type 'com.gemstone.gemfire.cache.client.Pool' having name 'null' was found; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'DEFAULT': Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: GemFire Server failed to start
  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574)
  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
  at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
  at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:736)
  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
  at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403)
  at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306)
  at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106)
  at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5016)
  at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5524)
  at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
  at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1575)
  at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1565)
  at java.util.concurrent.FutureTask.run(FutureTask.java:266)
  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
  at java.lang.Thread.run(Thread.java:745)
  Caused by: org.springframework.beans.factory.BeanInitializationException: no bean of type 'com.gemstone.gemfire.cache.client.Pool' having name 'null' was found; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'DEFAULT': Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: GemFire Server failed to start
  at org.springframework.data.gemfire.client.ClientCacheFactoryBean.resolvePool(ClientCacheFactoryBean.java:211)
  at org.springframework.data.gemfire.client.ClientCacheFactoryBean.initializePool(ClientCacheFactoryBean.java:182)
  at org.springframework.data.gemfire.client.ClientCacheFactoryBean.createCache(ClientCacheFactoryBean.java:172)
  at org.springframework.data.gemfire.CacheFactoryBean.resolveCache(CacheFactoryBean.java:303)
  at org.springframework.data.gemfire.CacheFactoryBean.init(CacheFactoryBean.java:244)
  at org.springframework.data.gemfire.CacheFactoryBean.afterPropertiesSet(CacheFactoryBean.java:220)
  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1633)
  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)
  ... 21 more
  Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'DEFAULT': Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: GemFire Server failed to start
  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:547)
  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
  at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:217)
  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:350)
  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:331)
  at org.springframework.data.gemfire.client.ClientCacheFactoryBean.resolvePool(ClientCacheFactoryBean.java:206)
  ... 28 more
  Caused by: java.lang.IllegalArgumentException: GemFire Server failed to start
  at org.springframework.util.Assert.isTrue(Assert.java:65)
  at sample.GemFireCacheServerReadyBeanPostProcessor.postProcessBeforeInitialization(GemFireCacheServerReadyBeanPostProcessor.java:65)
  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1566)
  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
  ... 36 more
  Error listenerStart
  ```
  
  It appears that simply running either gemfire xml sample results in the same error:
  
  ```
  $ ./gradlew :samples:httpsession-gemfire-clientserver-xml:tomcatRun
  ```

# Use AssertJ not Hamcrest

Spring Session uses AssertJ not Hamcrest for assertions. It would be best if the end result uses AssertJ. I can take care of this for you or you can do it (just let me know what you decide).

**NOTE**: This is a minor thing that I can take care of myself if necessary

Quite a few of the tests are using Hamcrest. Spring Session uses AssertJ for assertions

# Use Available Port for Gemfire server

We can use a static port for a client (i.e. Redis samples) if the CI server instances all have a server running on that port. However, we cannot guarantee a port will be available for the server to run on. This is particularly true since Spring Session might build two branches at the same time which would mean that one branch would fail since the port isn't available.

Instead, we should ensure that any servers should use an available port. You can check this out with the Hazelcast example which uses Spring's `SocketUtils.findAvailableTcpPort()`. If you want you can make the port static for the sample, but the integration tests should be dynamic.
"	2016-01-25 22:05:16	0.0		1
1223	"@rwinch It seems _Fest Assertions_ have been [replaced by AssertJ](https://github.com/joel-costigliola/assertj-core#migrating-from-fest-assertions) and that _Spring Session_ is actually using the old _Fest Assertion API_, _v1.4_ and not ""_AssertJ_"" as indicated in the [dependencies](https://github.com/spring-projects/spring-session/blob/master/spring-session/build.gradle#L31).  See [Migrating from Fest 1.4](http://joel-costigliola.github.io/assertj/assertj-core-migrating-from-fest.html#fest-1.4) for more details.

The _AssertJ API_ begins here...

`import static org.assertj.core.api.Assertions.*;`

As outlined [here](http://joel-costigliola.github.io/assertj/assertj-core-quick-start.html).

Perhaps a separate PR should be filed to update _Spring Session_ with the actual, official _AssertJ API_.
"	2016-01-26 00:37:59	0.0		1
1224	"Thanks @jxblum! I didn't realize I had not updated Spring Session to assertj yet. I've fixed this via #338
"	2016-01-26 01:43:31	0.0		0
1225	"@rwinch Ah crap!  I just went through and reworked all the GemFire tests with the existing Fest Assertions.  With any luck, though, this should be a simple change the ""import"" statement and done (fingers crossed).  Most of the GemFire test assertions are pretty simple.
"	2016-01-26 02:19:01	0.0		0
1226	"@jxblum Oops...sorry about that! It should be as easy as changing the import statement with possibly a few minor changes. Again, I don't mind doing this.
"	2016-01-26 02:20:02	0.0		0
1227	"@rwinch 

The following has been addressed:
- Javadoc errors resolved
- Test failures resolved (due to missing GemFire dependency)
- All Test JUnit/Hamcrest-based assertions replaced with AssertJ.
- All GemFire client/server integration tests now randomly generate an available TCP port over which the client and server can communicate.
"	2016-01-27 01:53:06	0.0		0
1228	"Thanks for the PR! I merged this via 019e0083b0b9fffdfe746fa2e17eb3e536d544b8 I provided a little bit of polish in 22f6f9dd727227ccd57a322a92e56c217ffc7e9e This fixes gh-148
"	2016-01-28 23:07:08	0.0		0
1229	"Is there good reason to have a base class right now since we only have a single repository? If not, could this be folded into a single implementation or made package private for now? This will allow us to more flexibility when updating. Of course if there is good reason for this being made available I'd like to understand why.
"	2015-12-04 22:26:35	0.0		1
1230	"A note that we will need to update how we do the principal when we fix #301. The reason is that I think we will be making it so that any attribute can be indexed, so interface for finding by a session attribute will be more generic. Perhaps something like `findBySessionAttr(String name, String value)`
"	2015-12-04 22:29:16	0.0		1
1231	"If we fold into a common base class, we can use GemFireSession directly rather than having to wrap the value passed in. Alternatively, the base class could be made generic.

This also allows for customizing when the session gets persisted. For example, we might have the ExpiringSession object itself perform the writes if users want immediate writes.
"	2015-12-04 22:31:43	0.0		1
1232	"I'm wondering if this is writing every attribute every time. If so, is there a way to only write the updates? This will increase performance a lot and will handle race conditions better. For example:
- Assume we have a Session with the attribute of username
- Thread1 - starts to process a request to get a protected resource. The username attribute is present in the session.
- Thread2 - processes a request to log the user out (remove the username attribute).
- Thread2 - The username attribute is removed from the session and Redis is updated to reflect the username is removed
- Thread1 - the request finishes and the Session is updated to include all of the original Session attributes. This means the username is now set in the Session which indicates the user is logged in. However, the user should be logged out.

If we were to write only the delta, this would not be an issue. However, writing every attribute every time alleviates problems like #311
"	2015-12-04 22:50:47	0.0		1
1233	"Noted
"	2015-12-14 09:25:27	0.0		0
1234	"This is something the GemFire team did with the HTTP Session Management module and something we could implement on behalf of the user.  In GemFire, it is a simple ""flag"" to flush on write.  I could implement something similar with an additional attribute on the @EnableGemFireHttpSession annotation.
"	2015-12-14 09:27:10	0.0		0
1235	"Delta has been implemented in the latest [commit](https://github.com/jxblum/spring-session/commit/bc6eeb22b2d371f4a3099a166c551600441b4def).
"	2015-12-14 09:28:19	0.0		0
1236	"Yes.  There are several reasons:
1. I wanted to have a clean separation between the basic CRUD operations implemented in the concrete class (e.g. GemFireOperationsSessionRepository) and the event handling/translation logic that would be common (literally the same) for all concrete classes.  The GemFire cache event to Spring Session event translation is, or rather should be, consistent across all GemFire SessionRepository implementations.  The concrete implementation should only have to focus on implementing the CRUD operations IMO.
2. Also, the AbstractGemFireSessionRepository handles ""registering"" the GemFireOperationSessionRepository as a ""CacheListener"" on the appropriate GemFire component without the user having to know which component (i.e. the GemFire Region storing Session state).
3. Next, I have just moved the GemFireSession class (along with a new GemFireSessionAttributes supporting class) to the AbstractGemFireSessionRepository class to simplify future SessionRepository implementations based on GemFire.  For instance, another possible implementation might be to use SD's Repository abstraction (i.e. GemfireRepository) to back the SessionRepository based on GemFire.  This was what Vinicius did in his implementation of Spring Session GemFire support, but his approach was quite brittle in how he registered the repo.

There are subtle other reasons, but the 3 points above capture my main intent.  I had thought about naming this class `GemFireSessionRepositorySupport`, but I have not renamed it yet.
"	2015-12-14 09:42:15	0.0		0
1237	"Can the Hamcrest dependencies be removed now that everything has been changed over to AssertJ?
"	2016-01-27 02:28:48	0.0		1
1238	"Yes, and in fact I have just updated the PR again with a couple more changes including the removal of the _hamcrest-core_ testCompile dependency.
"	2016-01-27 02:55:25	0.0		0
1239	"Thanks for the PR! This is merged into master via f1d0350356719597e8cbdca3002df52ea5895e21
"	2015-11-16 17:25:46	0.0		0
1240	"Thanks for the PR! We are trying to target customizing how cookies are written in a more holistic manner via #299. In short, we want a strategy pattern that allows for custom reading/writing of the cookie value. For this reason, I'm going to reject this PR.

NOTE: I'm nearing completion on this issue, so you should see it fixed later this week
"	2015-11-11 04:41:22	0.0		1
1241	"This is now resolved via #299 See http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/guides/custom-cookie.html for details.
"	2015-11-11 22:13:57	0.0		0
1242	"very nice! after implementing my solution we started having an issue on localhost with chrome (and only chrome, strangely) where sessions were ignored by one server... it looks like your solution addresses that. thank you so much!
"	2015-11-12 17:49:32	0.0		0
1243	"Thanks for the PR! This is now merged into master via c701e1877ec9bfa61dd0e00037f9de6a4662b8d6
"	2015-11-09 16:20:10	0.0		0
1244	"We have already released [1.0.2](https://github.com/spring-projects/spring-session/releases/tag/1.0.2.RELEASE) and started on [1.1.0](https://github.com/spring-projects/spring-session/commit/6414d0ddb86db8afd1169ffd2ba75da0d8670818)
"	2015-10-02 20:24:06	0.0		0
1245	"Thanks for PR! This is now merged into master
"	2015-08-31 20:42:29	1.0	2015-08-31 20:42:19	0
1246	"Thanks for the PR!

> Still need to add the configuration for listeners to generate the Session*Events

Right this needs to be done before we can claim we support Hazelcast.

> I assume you don't want yet another sample for this, so if this does get merged, perhaps @manderson23's sample could use the new @EnableHazelcastHttpSession annotation to showcase it.

I think this would be a good idea.

> I wasn't sure which, if any, part of the documentation you want updated with this. Please let me know, and I'd be happy to add anything.
- We need to ensure that the reference contains a EnableHttpHazelcastHttpSession section similar to [EnableSpringHttpSession](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#api-enablespringhttpsession). It should contain details about storage similar to [RedisOperationsSessionRepository](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#api-redisoperationssessionrepository)
- We would want a guide that walks users through setting up Spring Session with the new support.

> Lastly, and maybe it is a long shot, but I would ideally like to get Hazelcast auto-configuration into Spring Boot 1.3 including Spring Session auto-configuration for Hazelcast, which would use the annotation and consequently the configuration added in this pull request.

This will not happen since Spring Session has not even done an RC and Spring Boot is nearly completion. Once we get the support for configuration in Spring Session, we can discuss auto configuration.

Also we need some integration tests of the configuration before we can merge the request. They would likely be similar to [RedisOperationsSessionRepositoryITests](https://github.com/spring-projects/spring-session/blob/db2759c49731fba78689bb9330f400ea49244e2e/spring-session/src/integration-test/java/org/springframework/session/data/redis/RedisOperationsSessionRepositoryITests.java)

Thanks again for the PR!
"	2015-08-24 16:59:53	0.0		1
1247	"@rwinch Understood. I'll get to working on the remaining points and add them to this pull request. Thank you for the guidance. I'm always glad to help.
"	2015-08-25 01:05:21	0.0		0
1248	"Thanks for the updates! I have officially added the [hazelcast-spring](https://github.com/spring-projects/spring-session/tree/master/samples/hazelcast-spring) sample into master.

At the moment the following things are necessary to get this PR merged.
- Add integration tests for the configuration
- Include the listeners from hazelcast-spring sample in Spring Session distribution. Perhaps merging them into a single class that implements all interfaces.
- Update the provided configuration to leverage the listeners
- Update the hazelcast-spring sample to use the new configuration
- Add the documentation I mentioned. Specifically:
  - We need to ensure that the reference contains a EnableHttpHazelcastHttpSession section similar to [EnableSpringHttpSession](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#api-enablespringhttpsession). It should contain details about storage similar to [RedisOperationsSessionRepository](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#api-redisoperationssessionrepository)
  - We would want a guide that walks users through setting up Spring Session with the new support.
- Removal of listeners from the Map when the context is destroyed as mentioned by @manderson23 https://github.com/spring-projects/spring-session/pull/277#issuecomment-134730943
"	2015-08-25 20:20:31	0.0		1
1249	"@rwinch @shakuzen with the Hazelcast annotation should we consider removing the listeners from the map when the context is destroyed? This could be an issue is a webapp context was redeployed while the underlying Hazelcast instance wasn't destroyed? We don't want to end up with orphaned listeners.
"	2015-08-25 20:29:21	0.0		1
1250	"Good call @manderson23 I've added that to the list of things that needs done.
"	2015-08-25 20:33:33	0.0		0
1251	"@rwinch @manderson23 I apologize for my inactivity lately. I have pushed the first set of integration tests for `@EnableHazelcastHttpSession`. I extracted out the `SessionEventRegistry` class that was in `RedisOperationsSessionRepositoryITests` because it seemed generally useful in integration tests handling SessionEvents regardless of the implementation. Furthermore, I wrote the tests so far in a completely agnostic manner to whether it is Redis or Hazelcast underneath. It might be nice if we can have the same set of integration tests run against a config with Redis and Hazelcast without having to duplicate the code (which I did do a little bit). I thought this task might be a bit out of scope for this pull request, though.

Next I will write some IT specific to the Hazelcast implementation. Any hints on how to test that the entry listener is actually removed upon shutdown?

Of course let me know if I've missed anything.

**TODO List**
- [x] Add integration tests that check underlying Hazelcast directly
- [x] Update the hazelcast-spring sample to use the new configuration
- [x] Add the documentation:
  - [x] EnableHttpHazelcastHttpSession section similar to EnableSpringHttpSession.
  - [x] A guide that walks users through setting up Spring Session with the new support.
"	2015-09-29 15:25:39	0.0		1
1252	"@rwinch @shakuzen 

If it were OK testing shutdown and listener removal in unit tests rather than integration tests you could mock HazelcastInstance and IMap since they are both interfaces. Then on shutdown verify that removeEntryListener was called on the IMap mock.
"	2015-09-29 15:36:40	0.0		1
1253	"@shakuzen 

I was integrating this into my code today and ran into an issue where when I had multiple nodes in the cluster I wasn't seeing expiry events.

In my Hazelcast XML I didn't include max-idle-seconds so the default value of 0 was used. I was then overriding in the Java code to set this to 60 seconds. However, I didn't see expiry events when I done this only creation events.

To get it to expire consistently I had to set max-idle-seconds to 60 in the Hazelcast XML. Is there an issue with overriding this in Hazelcast when the map already exists? Have you seen anything like this?
"	2015-10-07 14:26:29	0.0		0
1254	"@manderson23 I have not tested that specifically and it sounds like it will be a good idea for me to add a test that verifies that scenario automatically. I'll take a look into why the overridden value via the annotation isn't being applied. I'm on vacation until Friday and will probably be busy getting caught up at work Friday, so I'll try to get to it Saturday if I can.
"	2015-10-07 16:38:09	0.0		0
1255	"@shakuzen No problems. I'm using my own copy of `HazelcastHttpSessionConfiguration` for now so it isn't anything to do with the value from the annotation being applied. I suspect it is one of two issues
1. I'm not configuring Hazelcast correctly.
2. After creating a map in the XML you cannot override the max-idle-seconds property programatically and have it work correctly.

The strange thing is that JMX seems to report the MapConfig was changed but the expiry events don't happen. I'll try and look into it some more if I get the chance. I just wondered if you had come across any similar issues.
"	2015-10-07 19:34:36	0.0		0
1256	"@shakuzen you can ignore my previous comment. It was a local Spring issue.
"	2015-10-21 11:30:34	0.0		0
1257	"@rwinch I believe the pull request now has all of the requested items. Please take a look when you get a chance, and let me know any feedback you have.
"	2015-10-28 16:36:32	0.0		0
1258	"Thanks for the PR @shakuzen! I merged this into master after I squashed your commits (leaving you as the author) d1c00c60800a91b1bcb5d08378a9cc29c52f6c42 and performed some (mostly cosmetic) polish on it 76d341d6ca1d591650648f259fe3072e283771d7. Please feel free to review my changes and provide any feedback you might have.

Thanks again!
"	2015-11-05 15:39:03	0.0		0
1259	"@rwinch Thank you for taking a look and merging. Sorry for all the formatting issues (stray spaces and tabs) - I'll make sure to clean those up in any future PRs. I'm looking forward to this being included in a release so hopefully I can try it out at work.
"	2015-11-06 00:13:02	0.0		0
1260	"@shazuken thanks for this. Much appreciated.
"	2015-11-06 06:40:10	0.0		0
1261	"@shakuzen Not a problem. Thank _you_ for the PR. In regards to the ""issues"", please don't worry about it. This has been one of the best PR's I have seen in a while!
"	2015-11-06 22:56:17	0.0		0
1262	"Would it be better to have a default of -1 (to indicate it should be ignored) for the case where you would like to use the value defined in an external Hazelcast configuration? Otherwise Spring Session will always overwrite.
"	2015-08-24 08:04:36	0.0		1
1263	"I wanted to maintain the functionality in a very similar way to the Redis equivalent in order to lower the barrier to entry. You are right that Spring Session will always overwrite this value, which can be confusing if you configure the same thing externally. However, Spring Session would only be configuring the specific `Map` used for the `SessionRepository` which seems like it might acceptable and the same as the Redis configuration does, from what I can tell.

If we do want to avoid overwriting, I think we would have to change to an `Integer` and make the default for this `null` (I think -1 would be potentially confusing and could be mistaken for a valid value when it is not). Then only overwrite the value (Hazelcast's default `maxIdleSeconds` is 0) if this is not null.
What do you think?
"	2015-08-24 15:54:47	0.0		1
1264	"> Would it be better to have a default of -1 (to indicate it should be ignored)

I don't like the idea of -1 because in terms of HTTP Servlet specification that means do not expire. From the http://docs.oracle.com/javaee/5/api/javax/servlet/http/HttpSession.html#getMaxInactiveInterval()[Javadoc]:  ""A negative time indicates the session should never timeout.""

> change to an Integer and make the default for this null

Unfortunately Annotations cannot have a type of Integer and they cannot have a default value of null. Are we able to read the configuration that was provided and if it was specified in the configuration, then do not use the value in the annotation?
"	2015-08-24 16:49:20	0.0		1
1265	"I can see the value in consistency across repository implementations. And I also agree that -1 isn't a reasonable value.

I just raised it as a possible concern as I suspect my use case may have the hazelcast configuration externalised from the Spring configuration.

What about if the `maxIdleSeconds` is 0 (the default) we override with the value from the annitation otherwise we leave it and don't use it (like @rwinch suggested).
"	2015-08-24 21:26:29	0.0		1
1266	"@rwinch I'm not sure how we would be able to read the provided configuration. The user could put the configuration in any xml file and include that configuration. Alternatively, they could configure it in Java, reading the values from a properties file, perhaps.

@manderson23 The problem is, as far as I can tell, we have no way to know if the user configured `maxIdleSeconds` as 0 or if they did not configure it and it is just 0 by default. In case they configured it as 0, I think we would want to respect that and not overwrite it.

I'm leaning more towards having to change the default attribute value to 0 to match to default of `maxIdleSeconds`. Then the user can configure it themselves and we will only override if a value is passed to `maxInactiveIntervalInSeconds`. Though this is different than the Redis configuration, I believe. So we have to choose to play it safe and avoid overwriting the user's configuration, or maintain consistency with the equivalent Redis configuration.
"	2015-08-25 01:02:57	0.0		1
1267	"@shakuzen 

> I'm leaning more towards having to change the default attribute value to 0 to match to default of maxIdleSeconds. 

Hazelcast can be used for many things, so setting it to 0 may make sense when there is no context. However, when considered for an HttpSession we should be conscious that the default needs to be secure. A default that prevents expiration is not what I would consider secure.

> Then the user can configure it themselves and we will only override if a value is passed to maxInactiveIntervalInSeconds. Though this is different than the Redis configuration, I believe. So we have to choose to play it safe and avoid overwriting the user's configuration, or maintain consistency with the equivalent Redis configuration.

I'm wondering why this needs to be configured externally vs using the annotation. Can you elaborate?

One option is we could make the maxInactiveIntervalInSeconds attribute a String. If the value was """", then we would use the value configured externally. The default would still be 1800 to preserve a secure by default setting. Thoughts?
"	2015-08-25 12:59:54	0.0		1
1268	"@rwinch as you say Hazelcast can be used for many things and my thoughts were that we should support Hazelcast being configured completely outwith spring (this will probably be the case for me) and by default don't override any of these values.

In this case I can probably handle ensuring this is configured via Spring instead of assuming the Hazelcast configuration value is used but maybe that wouldn't be the case for everyone.
"	2015-08-25 13:09:38	0.0		0
1269	"@manderson23 Does my proposal sound like it will work for you? Specifically something like this would ensure the value configured externally would be used:

``` java
@EnableHazelcastHttpSession(maxInactiveIntervalInSeconds="""")
```

Another advantage to using a String is that users can leverage Spring properties (i.e. `${session.timeout}`) for configuring the timeout as well. Of course the disadvantage is that a String is not necessarily a number.
"	2015-08-25 13:14:15	0.0		0
1270	"@rwinch that would work for me.
"	2015-08-25 13:15:18	0.0		0
1271	"`@ConditionalOnMissingBean` only exists in Spring Boot, so we likely shouldn't include that in our Javadoc (that will confuse users who do not leverage Boot).
"	2015-08-25 13:17:51	0.0		1
1272	":+1: I agree. I meant to remove this in the next commit I made and I just haven't made another one yet.
"	2015-08-25 13:36:55	0.0		0
1273	"If something other than a `Number` is given, the application will fail on startup with a straightforward message, which I figured was sufficient exception handling. Let me know if you want anything else.
"	2015-08-25 14:53:29	0.0		0
1274	"@rwinch and @manderson23 I implemented my understanding of the previous discussion on the default/overriding the session timeout. Let me know what you think. Currently it only mentions the String constant I added `DO_NOT_CONFIGURE_INACTIVE_INTERVAL_STRING`, but perhaps the JavaDoc for this can/should mention the value of that constant as `""""`?
Also let me know if you think of a better name for the constant.
"	2015-08-25 14:58:14	0.0		1
1275	"Sorry, this actually always fails right now. I thought I tested it. I will push a fix after testing...
"	2015-08-25 15:03:03	0.0		1
1276	"At least for now, lets not provide a public constant. Stating empty String in the javadoc should be sufficient since it is very easy to reproduce.
"	2015-08-25 15:13:05	0.0		1
1277	"Updated now as requested.
"	2015-08-25 15:25:49	0.0		0
1278	"I should probably change these to `this.eventPublisher` to match style.
"	2015-09-15 14:26:40	0.0		1
1279	"@manderson23 Thanks for the PR!

> Please let me know if anything else needs to be done.

One issue is that the existing Hazelcast sample was a demonstration that Spring Session could work without any Spring Dependencies. I'd like to keep the existing sample application that way.

One option we could do is remove the Spring dependencies from  your sample application. Although I think that defeats the purpose of the events (which we want).

The other option is to add this as a new sample. I haven't  thought of the name very long, but perhaps something like hazelcast-spring. I think this option is the better of the two. If you have a better idea for the name, I'd love suggestions :)

> There are a couple of places where indentation etc. could be fixed. Do you have an Eclipse format XML file for your coding standard? Or can you point me to a coding standard.

Honestly, I haven't done a great job at this myself. You can use the formatter that I added to etc/eclipse-formatter.xml.
"	2015-08-20 01:50:26	0.0		1
1280	":+1: I would love to see this added as a new `hazelcast-spring` sample. We are currently investigating using Spring Session with Hazelcast at the company I work for. Great work @manderson23 
"	2015-08-20 02:29:54	0.0		0
1281	"@rwinch happy to make the changes you suggested.

For the name of the new sample two other options would be `security-hazelcast` or `hazelcast-security`. Let me know which of the three names you would prefer.
"	2015-08-20 07:28:43	0.0		0
1282	"@manderson23 Thanks!

After some further thought I think I go with hazelcast-spring for the following reasons:
- The primary focus is on Hazelcast so it should go first
- The secondary focus is on Spring (Spring `ApplicationEvent`s and Spring Security)

Does that sounds good?
"	2015-08-20 14:39:17	0.0		0
1283	"@rwinch fine by me.
"	2015-08-20 20:00:03	0.0		0
1284	"@rwinch hopefully all the comments have now been addressed. Let me know if there is anything else to do.
"	2015-08-24 21:53:28	0.0		0
1285	"@manderson23 Can you sign the CLA as described in the (newly added) [CONTRIBUTING guidelines](https://github.com/spring-projects/spring-session/blob/master/CONTRIBUTING.adoc#sign-the-contributor-license-agreement)?
"	2015-08-25 14:22:33	0.0		0
1286	"**PS** This looks ready to go other than the CLA. I did squash your commits (leaving you as the author) and then performed a little additional polish. Once you sign the CLA I can merge this into master. Thanks again for your contributions!
"	2015-08-25 14:29:24	0.0		0
1287	"@rwinch CLA has been submitted.
"	2015-08-25 17:57:39	0.0		0
1288	"@manderson23 Awesome! I have pushed your changes (I squashed the commits preserving your author) into master with e3414ef11eaef6446553c8f9b0ca5e86b94c1f0b. If you care to, you can review my very minor polish in 8b5469ef5ca4e12a64ca7d7ec7a07d44c70b3c7e.

Thanks again so much for your contribution! I know that the Spring Session community will love these updates!

PS: Do you have a twitter handle I could mention for a shout out to you ?
"	2015-08-25 20:14:06	0.0		0
1289	"@rwinch twitter handle is @_mark_a
"	2015-08-25 20:25:53	0.0		0
1290	"The class and test should likely be renamed to something like HazelcastSpringTest (it would reflect the name of the sample that you choose).
"	2015-08-20 01:50:55	0.0		1
1291	"Since this sample relies on Spring, you could leverage Spring's SocketUtils to generate the port
"	2015-08-20 01:52:44	0.0		1
1292	"Master has a newly added `@EnableSpringHttpSession` which will take care of the `SessionRepositoryFilter` and adding a `SessionEventHttpSessionListenerAdapter`. It also allows defaulting and overriding `HttpSessionStrategy`.
"	2015-08-20 01:54:31	0.0		0
1293	"Thanks for the PR @franciscospaeth! At quick glance this looks like an outstanding PR! I will take a look at this sometime next week and get it merged into master. Thanks again!
"	2015-08-14 20:30:09	0.0		0
1294	"Great! Please let me know if something doesn't make sense or could be improved.
"	2015-08-14 20:42:48	0.0		0
1295	"@franciscospaeth Thanks again for this PR! 

I took a look at the PR and have made some [minor changes](https://github.com/rwinch/spring-session/tree/gh-267) in my branch.

I also have a few concerns / comments about the implementation that we could perhaps discuss.

# Possible Inconsistent Session

My concern is that if someone sets the Session on the SessionContextHolder, then it is not reflected on the HttpSession. This seems like it could lead to inconsistencies. For example, if in the service tier someone did the following:

``` java
SimpSessionContext context = new SimpSessionContext();
context.setSession(session);
SessionContextHolder.setContext(context);
```

Then later on in the web tier someone attempted to access the `HttpSession`:

``` java
HttpSession session = request.getSession();
```

The two sessions would not be the same id (thus have different instances).

I'm thinking it may be best to do some refactoring to account for this.

# SessionContext necessary?

With the above refactoring I don't think that SessionContext is necessary. Instead the Session can be set and accessed directly. The HttpSessionWrapper would look up the value in the SessionContextHolder rather than save as a request attribute. I believe there may be instances where it needs to fall back to obtain the Session from the request attribute, but generally it could access the SessionContextHolder.

# TBD

What are your thoughts? If you agree I'm happy to do the cleanup or I am happy to have you send an updated PR.
"	2015-08-17 21:55:31	0.0		1
1296	"Hi @rwinch,

The changes makes sense :+1:.

Regarding the inconsistency, this is a real problem.

About the `SessionContext`, it was introduced to abstract the `SessionContextHolder` from the responsible to provide/create the session instance. Within a http request for example, session should be created only if requested. If `SessionContextHolder.getSession()` is implemented, from my point of view, it should do what `HttpServletRequest.getSession()` does, covering the case in which `getSession()` is first invoked from service tier using `SessionContextHolder`.

I had tried out some things, among them to use `SessionContextHolder` from `ExpiringSessionHttpSession`, but once `SessionContextHolder.getSession()` returns `Session` some ugly unchecked cast to `S` (`<S extends ExpiringSession>`) are required. I will think further about it, but would be happy if there are any ideas/suggestions to solve the problem, maybe I'm just not seeing the big picture.
"	2015-08-18 20:05:59	0.0		1
1297	"Thanks for the response.

> If SessionContextHolder.getSession() is implemented, from my point of view, it should do what HttpServletRequest.getSession() does, covering the case in which getSession() is first invoked from service tier using SessionContextHolder

You bring up a good point. It would be nice to be able to create a new session from anywhere within the application. However, I think we would also need a way to inspect to see if there is a session already.

> but once SessionContextHolder.getSession() returns Session some ugly unchecked cast
> S (<S extends ExpiringSession>) are required.

Given it is a static method there is no way to and the type short of adding a generic type capture to the method. This would be consistent with the way `<T> T Session.getAttribute(String)` works too.

For example, `SessionContextHolder` could be something like this:

``` java
public static <S extends Session> getSession() {
    ...
}
```

Obviously this would still require a cast, but it would be more isolated.

Thoughts?
"	2015-08-19 03:28:52	0.0		1
1298	"Hi @rwinch,

Using `SessionContextHolder` as a central point to hold the session is a good idea, but I'm still trying to understand when should the `Session` be set to `SessionContextHolder`, considering `SessionContext` is removed. 
If it is done within the `doFilter` (`SessionRepositoryFilter.doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)`), we need to try to fetch the session from the repository even if it is not used during the request. And if it is set when it is retrieved from the request object (`SessionRepositoryRequestWrapper.getSession(boolean)`), we wouldn't have the session available before executing `HttpServletRequest.getSession(boolean)`.

Suggestions?
"	2015-08-19 21:40:53	0.0		1
1299	"Sorry this is just a quick response as I won't have time to give this a ton of thought tonight (hopefully holes with this). I was thinking that:
- `SessionRepositoryRequestWrapper.getSession().getSession()` would always look up in the `SessionContextHolder`. If that is null (i.e. on processing an Error), then it would retrieve from the member variable and then populate the `SessionContextHolder`
- `SessionRepositoryRequestWrapper.getSession().setSession(Session)` would write to the `SessionContextHolder`
- If `SessionContext.getSession()` is invoked and the value is null, it would create a new one by invoking `SessionRepositoryRequestWrapper.getSession().getSession()` which would update the `SessionContextHolder`
"	2015-08-20 02:06:31	0.0		1
1300	"I explored the idea to have the session stored at `SessionContextHolderStrategy`, here you will find a possible solution (but is still not mature enough): rwinch/spring-session/pull/1
"	2015-09-02 17:44:41	0.0		0
1301	"@franciscospaeth I am looking into this again. It seems that the PR you have is now gone (due to the fact I had to delete the repository). Do you mind sending it again?

I'm also thinking we should keep SessionContextHolder simple and remove the strategies and just use an `InheritableThreadLocal`. `RequestContextHolder` in spring-web doesn't need the strategies and since we could passively introduce strategies, I'd prefer to wait until we need them.

PS: Sorry for my long delay on this.
"	2016-01-30 04:37:24	0.0		1
1302	"Closing due to lack of feedback.
"	2016-09-12 18:51:17	0.0		0
1303	"I foresee OSGi users crying because of this but this is something normal for them :-)
"	2015-08-16 15:50:52	0.0		0
1304	"As far as I can see this class could be `static`, so it won't keep a reference to its outer. This is preferable most of the time.
"	2015-08-16 15:53:19	0.0		1
1305	"Thanks for the comment. Spring Security does something very similar and it works within OSGi, so this shouldn't be an issue.
"	2015-08-17 20:38:01	0.0		0
1306	"Thanks for your comment. You are right that in many instances it is preferable to have a static class. However, this won't work since the `SessionRepositoryRequestWrapper` is non-static. The reasons `SessionRepositoryRequestWrapper` is non-static is because it needs a reference to the type argument of `SessionRepositoryFilter` to be type safe.
"	2015-08-17 20:39:50	0.0		1
1307	"Thanks for the PR! It seems we should come up with a similar event for deleting sessions (i.e. SessionDeletedEvent). Thoughts?
"	2015-08-11 13:11:42	0.0		1
1308	"So SessionDestroyedEvent would be a base class (abstract?) with specific expired and deleted subclasses?
"	2015-08-11 14:07:44	0.0		0
1309	"@manderson23 That is correct. This would allow receiving either specific event. To me it seems if we allow receiving only expired events users should also be able to only receive deleted events.
"	2015-08-11 14:34:51	0.0		0
1310	"Sounds reasonable. Shouldn't be much more work.
"	2015-08-11 15:30:48	0.0		0
1311	"Further doc updates still to follow.
"	2015-08-11 22:27:49	0.0		0
1312	"@rwinch that should be SessionDeletedEvent complete. Let me know if there are any issues.
"	2015-08-12 15:39:50	0.0		0
1313	"Thanks for the PR! This is merged into master and will be a part of 1.1. I did some very minor polish in https://github.com/spring-projects/spring-session/commit/7518306975f99e5d3095fc6ab6b19aefd0f790b8 but other than that it looked good.

You will note I have also added a `SessionCreatedEvent` #261 to support `HttpSessionListener` #4. I had to do some merging to get that to work with your changes. So you may want to give the snapshot a try and see if it is working for you to double check me :)
"	2015-08-12 22:17:03	0.0		0
1314	"Thanks for the PR. This is merged in via 141aba95262ffa365ddeeaf809d1b1b79e4f3946
"	2015-07-08 13:38:58	0.0		0
1315	"Thanks for the report and the PR! this is now merged into master
"	2015-07-24 21:44:21	0.0		0
1316	"Thanks for the PR! This is now merged into master
"	2015-07-24 21:53:23	0.0		0
1317	"Thanks for the PR! This is now fixed in master
"	2015-07-24 22:02:53	0.0		0
1318	"Thanks for the PR! This is now merged into master

NOTE: The previous URL did work, but it required an extra redirect so I agree it is better to have this change.
"	2015-07-25 12:36:04	0.0		1
1319	"Thanks for the PR! There is a variation of this merged into master that takes into account the find by username functionality too.
"	2015-11-05 15:45:10	0.0		0
1320	"Thanks for the PR. Can you explain your use case in a little more detail? Also, can you explain why this behavior should change? How does the current behavior differ from the standard servlet containers behavior?
"	2015-07-25 12:23:16	0.0		1
1321	"We have a custom implementation for long-polling (http://www.pubnub.com/blog/http-long-polling). Also there is a requirement: the http session must expire, and the user must be logged out. The problem there was, the long polling kept the session alive. With this modification we can define a custom condition for the session manager. In our case this is a pattern matcher for the request url (Implementation included in the PR).

Standard servlet containers behavior cannot be modified to get this work and the solution IMHO is generic enough for being helpful in other cases (although I'm not aware of any :)).
"	2015-08-05 20:10:12	0.0		0
1322	"Thanks again for the PR.

I'm not sure that something like this is something that belongs in the framework. It seems if this was something that users were struggling with this would be solved within the servlet specification. Additionally, it seems weird to me that if a client is making a request that the session last accessed time is not updated (despite that being the reason the attribute exists).

For this reason, I am closing this as won't fix. If others feel that there is a need please comment and we can reconsider.
"	2016-02-23 21:49:40	0.0		1
1323	"Thanks for the PR! This is now merged into master
"	2015-07-25 12:35:24	0.0		0
1324	"Thanks for the report and the PR! This is now merged into master
"	2015-07-25 12:37:43	0.0		0
1325	"Thanks for the PR. This has been merged into master now.
"	2015-04-20 20:09:13	1.0	2015-04-20 20:08:59	0
1326	"Thanks for the PR! This is now merged into master
"	2015-03-31 15:27:02	1.0	2015-03-31 15:23:37	0
1327	"@rwinch just wondering if you are planning to merge this for 1.0.1? Or do you plan to go with #162?

I noticed that there are conflicts with this pull so I'd be happy to update and fix them if you are going to use it.
"	2015-04-14 08:00:21	0.0		1
1328	"@manderson23 Thanks for the reply. We will likely support both mechanisms. #162 will likely just be a way to update the properties on CookieHttpSessionStrategy.

Since this is not a bug fix, it will be in the next feature release (i.e. 1.1 M1).
"	2015-04-14 14:01:27	0.0		0
1329	"@rwinch what is the current schedule for 1.1M1? Shall I leave this in a conflicted state for now then until a time comes when it may be merged? 
"	2015-04-14 15:05:35	0.0		0
1330	"@manderson23 I don't yet have a schedule for M1, so I would leave the PR as is for now. When the time comes, I can merge the changes for you since it is technically ""my fault"". Alternatively, if you like I can ping you when I have 1.1 M1 planned and you can fix them.
"	2015-04-14 15:07:57	0.0		0
1331	"@rwinch are you planning to use this PR for 1.1? If so I'd be happy to update it to remove the conflicts.
"	2015-08-12 21:59:40	0.0		0
1332	"@manderson23 Thanks for reaching out.

I'm certainly thinking we need to do something with allowing for additional cookie attributes to be specified by the user for 1.1. However, I'm not quite certain how we best want to do that. You will see that #162 is providing similar functionality.

So the answer is...I'd wait to remove the conflicts till we decide what we want to do.
"	2015-08-12 22:09:20	0.0		1
1333	"OK. As long as it gets into 1.1. somehow I'll be happy!
"	2015-08-13 07:33:12	0.0		0
1334	"This was resolved as part of #299 
"	2015-11-11 21:47:27	0.0		0
1335	"See http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/guides/custom-cookie.html for details.
"	2015-11-11 22:23:33	0.0		0
1336	"I need to customize secure flag of Cookie as well. 

+1
"	2015-02-26 07:27:47	0.0		0
1337	"@rwinch is there anything missing preventing this to be merged? I would really like to see this in 1.0.1 as right now, we have to provide our own CookieHttpSessionStrategy just to override how certain things in the cookie are set. Thx
"	2015-03-02 00:45:06	0.0		0
1338	"@domdorn Thanks for the quick responses. I am rather busy with getting Security 4.0 GA out right now so haven't had time to look at Spring Session. 

After Security 4.0 GA I will be focusing on a 1.0.1 release. We will make sure something gets in 1.0.1 to resolve your issue.
"	2015-03-06 17:00:59	0.0		0
1339	"I needed this as well. I needed to set the context path to a fixed value so I am glad to see that this is now possible in this PR. 

The `CookiePathCalculationStrategy` is a nice touch but I wonder if it could be made a little more broad (and thus more useful). Clearly the purpose of the `CookieHttpSessionStrategy` class is to manage HTTP sessions via cookies and therefore the `createSessionCookie()` method is of critical importance. Wouldn't it be better to use the strategy pattern on the creation of the cookie itself rather than on only the path? For example:

```
public interface CookieCreationStrategy {
    Cookie createSessionCookie(HttpServletRequest, Map<String, String> sessionIds);
}
```

The default implementation (ie. `DefaultCookieCreationStrategy()`) could be exactly the same code that is currently in `CookieHttpSessionStrategy.createSessionCookie()` but using a strategy pattern would allow one to customize the way the cookie is created including things like setting the cookie domain or setting a custom path. One complication would be that `createSessionCookie()` currently uses some member variables but that isn't insurmountable.

Just a suggestion...but this approach seems a bit more flexible.

OR. Another far simpler approach would be to remove the `final` qualifier from `CookieHttpSessionStrategy` and allow for inheritance (noting the somewhat questionable value of doing so it certainly would be pragmatic).
"	2015-07-16 21:20:22	0.0		1
1340	":+1: 
I need to customize cookie.domain , to allow all sub domains share same sessions.
"	2015-10-18 07:13:58	0.0		0
1341	"Hi,

Any progress on this PR ? It's 8 months since it's been proposed while this functionality is required by many. I for instance have the same issue as @Youmoo. 
"	2015-10-27 13:46:23	0.0		0
1342	"Thanks for the great request! I'm trying to aggregate all the feature requests for cookies, so we can solve this problem more holistically. Therefore, I'm closing this in favor of #299 which takes this feature into account.
"	2015-11-17 17:41:58	0.0		1
1343	"In my opinion, we don't want to have a sample for every permutation of Spring Security (or other projects). If we did this, we would have way too many samples.

Instead, I believe we need to highlight deltas in Spring Session. So the question I'd ask is ""How does _Spring Session_ use change between the basic Spring Security / Spring Session example and this sample?""

Thoughts?
"	2015-02-23 16:27:29	0.0		1
1344	"I agree, maybe we should just call it security-xml .. people can use it as a bootstrap example or compare their existing XML setups and I can add corner cases from our prod-environment to it. 
"	2015-02-23 16:58:47	0.0		0
1345	"Thanks for the fast response. I like the idea of having a basic XML based example of using Spring Security and Spring Session. If you can update the sample to leverage only the basics of Spring Security and to rename the project to security-xml I can merge in the project.
"	2015-02-23 17:21:22	0.0		1
1346	"Wow! You have been real busy! Thanks again for the PR! Keep up the great work :)
"	2015-02-23 16:28:50	1.0	2015-02-23 16:28:28	0
1347	"Thanks for the PR! This is merged into master now.
"	2015-02-23 16:17:46	1.0	2015-02-23 16:17:43	0
1348	"Thanks for the PR @dsyer! It does seem that the cookie should be set if the session id changes. 

Can you elaborate a little more on why one would want to always include the session cookie in the response? I wonder why the client would not just save the user information just like any other piece of data that they are requesting. Sending a response on every request seems to bundle unrequested data in the response. To me this feels like someone requesting /messages/ and getting back information related to /user/current in the response.
"	2015-02-03 16:33:43	0.0		1
1349	"Actually I think always sending the cookie is probably not the best idea for the reasons you say. I was just throwing out ideas really - some stuff I was playing with and it seemed to work so I thought it would be good to discuss it here. The flag to always send cookies is a separate commit, so it ought to be easy to get rid of.
"	2015-02-06 10:07:14	0.0		0
1350	"Thanks I'm closing this in favor of #154 since we do not want the always send cookie flag. I'll cherry-pick the commit and apply it to #154.
"	2015-02-19 22:46:17	0.0		0
1351	"why ignore the pom.xml 
"	2015-02-02 11:13:23	0.0		0
1352	"Because this is a gradle build.
"	2015-02-02 11:36:14	0.0		0
1353	"# tl;dr

Thanks for reporting this and providing a PR! This is now merged into master.

You could also work around this issue using the following:

``` groovy
compile 'org.springframework.session:spring-session-redis:1.0.0.RELEASE'
compile 'org.springframework.boot:spring-boot-starter-redis'
```

The advantage is that this allows Boot to manage as many of the dependency versions as possible

# Details of the Problem...

Digging into this a bit deeper so I could figure out how this issue got past our build...

## Version Mismatch

The issue happens because Spring Boot 1.2.1's [RedisAutoConfiguration](https://github.com/spring-projects/spring-boot/blob/v1.2.1.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java#L76) requires `RedisSentinelConfiguration` which is not available until Spring Data Redis 1.4.0

## Why does Boot allow a version mismatch?

Spring Boot is suppose to manage my versions for me. So how did this happen?

### Boot Gradle only manages unspecified versions

This happens because Spring Boot's Gradle plugin currently only manages unspecified versions (not transitive versions). That means when using Spring Boot 1.2.1 that a configuration like this:

``` groovy
compile 'org.springframework.session:spring-session-data-redis:1.0.0.RELEASE'
```

will bring in Spring Data Redis 1.3.0 resolved from Spring Session Data Redis 1.0.0.RELEASE.

### Additional Workaround

You could also work around this issue using the following:

``` groovy
compile 'org.springframework.session:spring-session-redis:1.0.0.RELEASE'
compile 'org.springframework.boot:spring-boot-starter-redis'
```

Instead of using spring-session-data-redis, we only include spring-session and allow Spring Boot's starter pom to bring in all our Redis dependencies. I created #125 to improve our sample and documentation.

### Spring Boot Gradle 1.3+ Adding Dependency Management

Spring Boot 1.3 is currently scheduled to include the dependency management plugin which will ensure transitive dependencies are also managed. [See spring-boot/issues/2133](https://github.com/spring-projects/spring-boot/issues/2133).

## How did it get past our Build?

So the question is...""How did this get past our build?""

### Samples use Spring Boot 1.10

We do have integration tests and a CI build that verify all of the Spring Session samples work. This includes a Spring Boot sample. However, the Spring Boot sample is on 1.10 version of Spring Boot. Since you are using [Spring Boot 1.2.1](https://twitter.com/danveloper/status/559439175737282560) with spring-session-data-redis you are getting conflicting versions.

### Spring IO Checks

We also certify that Spring Session works with Spring IO 1.1.1 versions (which means it should work with Spring Boot 1.2.1). More concretely, this means we re-run all the tests with the versions found in Spring IO 1.1.1. The reason this works is because the Spring IO plugin changes ALL of the versions to match the versions found in Spring IO. This means that even though we declare a dependency on version Spring Data Redis 1.3.0 within our build when we certify against Spring IO we ensure all the versions are Spring IO versions including Spring Data Redis. This means that our tests will pass.

# Changes in Spring Session?

So what changes should we make to Spring Session? Initially we used Spring Data Redis 1.3.0 as we viewed this as the minimum version of Spring Data that could be used. This ensured that our tests ran against Spring Data 1.3.0 and then re-ran (when using Spring IO Checks) against the latest version.

However, this does seem cause some headaches in transitive versions. It also does not make it easy to follow the best practice of being on the latest and greatest.

Ultimately, I think we should update all of our versions to match the Spring IO Versions #126 and then create additional testing to verify our minimum versions as described in #120 
"	2015-01-26 18:48:36	1.0	2015-01-26 18:47:30	1
1354	"Thanks for the PR @brixtonasias ! This is merged into master now. Keep them coming!
"	2015-01-20 16:10:47	1.0	2015-01-20 16:09:54	0
1355	"@brixtonasias -Thanks for reporting this and submitting a PR! This is now merged into master and should be visible in the [snapshot docs](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/guides/boot.html#boot-running) the next time the documentation is published (within the next hour).
"	2015-01-20 15:01:14	1.0	2015-01-20 14:59:12	0
1356	"Thanks for the PR!

Unfortunately, this doesn't quite resolve the issue since we need to ensure that our documentation is updated. Specifically the [docs/src/docs/asciidoc/guides/boot.adoc](https://github.com/spring-projects/spring-session/blob/ba07c1d5620f290eb5ee8a853c748019182d8345/docs/src/docs/asciidoc/guides/boot.adoc) needs to update the [Spring Configuration](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/guides/boot.html#boot-spring-configuration) section to remove the <2>. It would be good to replace it with something like:

```
NOTE: Spring Boot automatically creates ... In a production environment you
need to ensure to configure your JedisConnectionFactory bean to point to your
Redis instance. <insert link to how to configure>
```

Would you mind updating the PR to contain the documentation updates too? Afterwards I can merge the PR.

Thanks again!
"	2015-01-14 22:38:51	0.0		1
1357	"Hey @rwinch, I updated the docs...I will make sure to check them in future PR's. 
"	2015-01-14 22:56:40	0.0		0
1358	"Thanks for updating the PR! Your commits afc3752b33227e3dfacbf26f90522571eea57814 37aafc51480e12f2742843810e0b205cd45632d5 are now merged into master.

NOTE: I ended up adding a [little polish](https://github.com/spring-projects/spring-session/commit/3f2364312132b65fa12841e7392a01bf38d361c3) to the documentation. Feel free to review and provide any feedback you might have.
"	2015-01-15 17:19:18	0.0		0
1359	"Looks good @rwinch! I look forward to helping out more on this project.
"	2015-01-15 18:50:02	0.0		0
1360	"Thanks for the quick PR!

We want to ensure to include tests for every code change. Can you add a few tests to CookieHttpSessionStrategyTests?

Ideally we would have some additional documentation (i.e. just before [HttpSession & RESTful APIs](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/reference/html5/#httpsession-rest)). Remember a feature doesn't exist unless it is documented. Do you mind adding that to the [docs/src/docs/asciidoc/index.adoc](https://github.com/spring-projects/spring-session/blob/master/docs/src/docs/asciidoc/index.adoc)? You can generate the documentation using ""./gradlew docZip"" and look in docs/build/asciidoctor/html5.
"	2015-01-14 21:23:41	0.0		1
1361	"Sure, I can certainly add some docs. By the way I added a test to the commit.
"	2015-01-14 22:54:23	0.0		0
1362	"Thanks! Once we get the updated docs I can double check everything and merge the PR. Thanks again!
"	2015-01-15 16:07:11	0.0		0
1363	"Hey @llambda any progress on the docs? I'm just in the middle of porting an application to Spring Session that requires a max age on the cookie.
"	2015-02-16 14:53:43	0.0		0
1364	"Sorry, I haven't had time to work on it yet. Also I noticed gradle doc generation fails with Java 8 saying ""FAILURE: Build failed with an exception""
"	2015-02-17 03:09:38	0.0		1
1365	"I could maybe provide a PR with the required documentation changes to get this merged if @rwinch could provide guidance on the level of detail required. Is something like the following enough? OR do you also want code samples?

## Cookies

[CookieHttpSessionStrategy](http://docs.spring.io/spring-session/docs/current-SNAPSHOT/api/org/springframework/session/web/http/CookieHttpSessionStrategy.html) provides the mechanism for overriding default values of the cookie associated with the HTTP session.

The following values are configurable.
- **Name** - The name of the cookie. The default value is SESSION.
- **Maximum Age** - The maximum age of the cookie in seconds. This value has the same behaviour as [javax.servlet.http.Cookie.setMaxAge](http://docs.oracle.com/javaee/7/api/javax/servlet/http/Cookie.html#setMaxAge%28int%29) The default value is -1.
"	2015-02-17 15:37:18	0.0		0
1366	"Any comments on my suggestion re documentation for getting this merged?
"	2015-02-24 08:19:50	0.0		0
1367	"@manderson23 Thanks for offering to document this! There does not need to be a sample application, but I think we should have an example of how to customize it in both XML and Java configuration within the reference. Please note that all code should be tested too. You will find the code from the reference is in [docs/src/test/java/docs|https://github.com/spring-projects/spring-session/tree/master/docs/src/test/java/docs] and then the reference includes the code that has been tested.
"	2015-02-24 15:02:48	0.0		1
1368	"@rwinch given the code requirement how would a pull work? Do I need to fork @llambda repo and work/create a pull against that? If i fork the main repo I assume my build would fail until this pull was merged.
"	2015-02-24 17:16:44	0.0		0
1369	"@manderson23 Thanks for the fast response! Go ahead and create a new PR with multiple commits (i.e. one from @llambda and one from yourself with the additions). Once we accept the other PR we can close this one.
"	2015-02-25 05:54:45	0.0		1
1370	"Thanks for the great request! I'm trying to aggregate all the feature requests for cookies, so we can solve this problem more holistically. Therefore, I'm closing this in favor of #299 which takes this feature into account.
"	2015-11-17 17:43:15	0.0		1
1371	"Thanks @rwinch , appreciate your hard work on this.
"	2015-11-17 18:41:57	0.0		0
1372	"Thanks for the PR This is now merged into master
"	2015-01-14 15:52:16	1.0	2015-01-14 15:52:13	0
1373	"Thanks this is merged into master.
"	2014-12-22 22:40:30	1.0	2014-12-23 23:26:38	0
1374	"Thanks for the PR. I wonder if it might be better to use the bom plugin you created to ensure the Spring IO versions are used in the first place. Thoughts?
"	2014-11-17 18:47:18	0.0		0
1375	"Unfortunately that'll create a circular dependency as you'd want to use the BOM from the version of the Platform that Spring Session will be included in. The plugin's the best answer we have at the moment.
"	2014-11-17 19:40:28	0.0		0
1376	"@wilkinsona Seems like we have a circular dependency between the platform-versions.properties and Spring Session's already. Specifically before I do a release, I must run the Spring IO tests which use the platform-versions.properties to determine the versions of the dependencies for the tests. Is there a reason this is much different than using the platform-version.properties to control the versions that Spring Session uses up front?
"	2014-12-12 03:12:40	0.0		1
1377	"You could use the dependency management plugin to obtain Spring Session's dependencies' versions from an already-released version of the Platform but the Spring IO Plugin provides additional benefit: it lets me check that a Spring Session is compatible with an upcoming version of the Platform as I can easily run your tests on Java 7 and Java 8 using the versions from the upcoming Platform release.
"	2014-12-12 11:24:10	0.0		1
1378	"@wilkinsona This is now merged into master
"	2015-01-05 22:49:09	0.0		0
1379	"Thanks this is merged into master now at 0926df9c545b6ef4f4068919efbc7048f7b8ae1f I also added a test to ensure that this doesn't happen again.
"	2014-11-15 03:19:12	0.0		0
1380	"> I added this HttpSessionStrategy implementation based on your suggestion on how multiple sessions can be handled by a custom HttpSessionStrategy. 

Thanks!

> The idea is pretty much the same as described in issue #48 except the current session cookie stores the session id instead of the index. 

We probably want it to use an index so that we can also extract the index from the URL (more on that later)

> I am not sure how practical this implementation is because it relies very much on the user request including or excluding appropriate cookies to either initiate a new session, use an existing one, delete an existing session etc. 

The thought is that you would need another Filter that interacts with the same API that switches which session you are using.

> Secondly having separate implementations for multiple sessions vs single sessions seems a bit odd too but may be thats ok.

This is a good point...perhaps we should switch this around so it works with a single implementation. The problem is then we complicate our APIs. We want the required API for someone to implement to be as simple as possible. Basically the minimum API should be dead simple so others can provide custom strategies.

> Can you share some thoughts on how automatic url rewriting can help with that. E.g in this implementation, absence of or empty current session cookie suggests the need of a new session so instead may be a request parameter can be specified and SessionRepositoryFilter can invoke another method on HttpSessionStrategy to indicate that a new session is needed regardless of existing valid session.

The idea is that the URL would contain an index of which session we should be using. This way a user could have multiple tabs open at the same time all leveraging different sessions. If the current session is indicated by a cookie, then there can only be one session per browser since cookies would be shared across multiple tabs.

> If this implementation isnt practical please suggest how you are thinking the api can be expanded to accommodate multiple sessions. I would love to help.

I think this is a good start at an implementation, but it may be a bit early. The main reason, as I mentioned previously in #12, the APIs will be changing so we shouldn't implement the current API but wait until #12 is completed.

Fortunately, the thought and comments you have put into this issue will be quite helpful when I implement #12.

In the meantime, lets leave this open as I'm guessing a lot of your work can be easily converted into working with the new APIs once they are rewritten.
"	2014-10-09 02:19:39	0.0		1
1381	"I have pushed support for multiple sessions into master a0805e8411182486c3d11aef0bdcbda019b493b7 For a demo, please give the [users](https://github.com/spring-projects/spring-session/tree/master/samples/users) sample a try.
"	2014-11-17 04:21:49	0.0		0
1382	"Thanks for the PR! This is now merged into master
"	2014-07-25 19:23:30	1.0	2014-07-25 19:23:13	0
1383	"Thanks for the PR! This is now merged into master
"	2014-07-25 19:24:12	1.0	2014-07-25 19:24:02	0
1384	Forgot to mention that I tested using Java 8 (i.e Hibernate 5.2).	2017-04-16 01:19:29	0.0		0
1385	"This looks great, thanks! Before I merge this, did you sign the contributor's license agreement? If not, please do.

https://cla.jboss.org/index.seam
"	2017-04-05 07:24:27	0.0		0
1386	Hi @koentsje, I signed the license agreement.  	2017-04-05 12:40:22	0.0		0
1387	Hi @maxtacco, I have rebased and merged this PR into master, thanks again for your contribution. I hope you don't mind that I have also taken the liberty to port the relevant changes to the 5.x branches. I would be very grateful if you could take the time to create a couple of jUnit tests that show the use of the feature (and guard against future accidental removal). As a last remark, next time you open a PR (maybe the one containing your jUnit test), make sure to open it from a topic branch that you name according to the relevant JIRA issue (e.g. branch HBX-1331) instead of your master branch. Thanks again!	2017-04-11 11:26:34	0.0		1
1388	Hi, @koentsje. I totally fine with you porting to 5.x branches. I'll try to do my best to add some coverage this weekend. Will use a topic branch next time. Thank you!	2017-04-11 13:10:41	0.0		0
1389	"@koentsje I haven't tried to use this in production, but this seems like it solves the immediate issue of casting in the presence of proxies. I think this is a better solution than mine to the immediate problem, and probably the question of whether equals should check that the class is equal is a different PR.
"	2016-05-04 20:08:34	0.0		0
1390	"merged into 5.1 and cherry-picked into 5.0 and master
"	2016-05-09 08:03:50	0.0		0
1391	"In an effort to integrate this and verify the problem, I had cherry-picked commits 78fe14c, 940f192 and 0b53234 into the 5.1 branch. But the resulting test run is successful so I am not sure if the test properly demonstrates the problem of if maybe I missed something?  
"	2016-04-29 05:48:15	0.0		0
1392	"@koentsje I've added (and corrected) the documentation in the two beans associated with the test cases to explain how they are used to demonstrate the problem and the fix. I hope this makes sense now.
"	2016-04-30 01:31:13	0.0		0
1393	"@karlvr Ok, I grok the changes now and it looks good. Only I think that, instead of using fixed pre-created beans, the tests that demonstrate the problem should use the hbm2java generation to generate some code that eventually results in a test that  _fails_ as long as the changes from commit 2ae527c are not applied. Let me look at how we can deal with this.
"	2016-05-03 11:55:39	0.0		1
1394	"@karlvr I also am wondering why you think that it is more correct to have identical classes in the 'equals' implementation than using 'isAssignableFrom()' to check for instances of the class/interface? I'm not sure if it will ever happen but if you define the semantics of 'equals' to be that the ids of both entities should be the same, then the actual class should probably not be identical. 
"	2016-05-03 12:11:06	0.0		0
1395	"@koentsje I wasn't sure about getting hbm2java to revert to the old behaviour, without adding code to make it an option when it probably shouldn't be. Perhaps we could use hbm2java to generate the new beans and verify that _they_ work as expected?
"	2016-05-04 08:23:28	0.0		1
1396	"@koentsje I thought for a while about the equals implementation and I'm not 100% sure either way. I was swayed by the default implementation that Eclipse generates, which checks that the classes are the same.

If the classes _aren't_ the same then it's not equal. I think that's fair actually. In a Hibernate situation I don't _think_ there's a case where an object would be considered equal and not be the exact same class. But it would be possible to setup two separate entities in the database, with separate id spaces, and have the implementation class of one extend the other, in which case `isAssignableFrom()` would be true, and the ids could match as they're separate entity tables, and we'd get a false positive.

So I guess now I am pretty sure that it needs to be equal classes!
"	2016-05-04 08:27:36	0.0		0
1397	"@karlvr I see two problems with this approach. The first and obvious one is that you add a dependency on the Hibernate runtime for the generated entities, which is something we want to avoid. The second problem is that I think that in the context of ORM the equality does not at all require that the classes are the same. Equality in the context of the entities implies that they represent the same row in the database. Two objects that are instances of different classes in the same class hierarchy can very well indicate the same row in a database and hence should be able to be equal. These two reasons is why I prefer to keep the 'instanceof' check. I have tried to solve the problem as I understood it and opened #57. Would you be able to take a look at this PR and see if it solves the problem you are experiencing? The first commit of this PR adds two tests that show the problem, the second commit is the fix.
"	2016-05-04 10:17:46	0.0		1
1398	"@koentsje I can't currently see a situation where the ORM provides two objects that represent the same row in the database that don't have the same class (after resolving proxies). Could you elaborate on that case?
"	2016-05-04 20:07:09	0.0		1
1399	"@karlvr I have integrated #57 in the 5.0, 5.1 and master branches. As for the class equality issue, please take a look at 2279170. Let's continue the discussion there if needed.
"	2016-05-09 11:40:57	0.0		0
1400	"@Danny02 The patch looks good. Did you sign the CLA? https://cla.jboss.org
"	2016-04-20 07:09:31	0.0		0
1401	"yes, I signed the jboss CLA already for the hibernate-orm project
"	2016-04-20 11:10:07	0.0		0
1402	"Merged into master and cherry-picked on the branches 4.3, 5.0 and 5.1. Thanks!
"	2016-04-21 04:42:17	0.0		0
1403	"I created JIRA for this PR https://hibernate.atlassian.net/browse/HBX-1234
"	2015-06-30 17:05:54	0.0		0
1404	"Thank you, I did not have access to JIRA at work.

Your Issue description is not fully correct. The Bug only occurs for the String ""h"".
"	2015-07-01 21:43:40	0.0		0
1405	"@Danny02 Does the fact that you closed the PR mean that the issue is fixed? 
"	2016-04-19 19:06:35	0.0		0
1406	"@koentsje I'm sorry, I don't know what happened here. I don't remember closing this ticket...
Either way, the issue isn't fixed.
"	2016-04-19 19:13:00	0.0		0
1407	"ok cool, i’ll take a look at it tomorrow (finally…)

> Op 19 apr. 2016, om 21:13 heeft Daniel Heinrich notifications@github.com het volgende geschreven:
> 
> @koentsje https://github.com/koentsje I'm sorry, I don't know what happened here. I don't remember closing this ticket...
> Either way, the issue isn't fixed.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/hibernate/hibernate-tools/pull/48#issuecomment-212073575
"	2016-04-19 19:14:09	0.0		0
1408	"@koentsje Now I know. I commited the fixes to my master branch and based the pull request on that.
I worked on another bug fix last week, so I reset the master branch and created a branch for this patch. Github somehow choose to close the pull request after I removed the commits from my master branch through the reset.

I will create another pull request with the new branch and notify you here in a second.
"	2016-04-19 19:20:04	0.0		0
1409	"Apologies for the bump, but I'd love to see this integrated and or work towards integrating it!
"	2014-06-11 01:39:44	0.0		0
1410	"sorry ive been on PTO just going through backlog. @koentsje  could you look at this ?
"	2014-06-15 20:18:56	0.0		0
1411	"I have updated my patches for the 5.1 branch as I am now using this with Hibernate 5.1. I have been using these patches in production for years now, and I still believe they are critical for Hibernate Tools. I'd love to get these into the main release if we can. Happy to discuss more.

I'm not sure what the difference between master and 5.1 branches is. I haven't updated this PR yet, but here is the tree that I have updated:

https://github.com/karlvr/hibernate-tools/tree/proxy-equals-5.1
"	2016-04-29 03:00:21	0.0		1
1412	"Hey karl, I am very sorry that it took such an awful lot of time to take a look at this. I am happy to integrate these patches but would it be possible to rebase this branch and solve the conflicts? Just create a new branch called HBX-1226 (either from 5.1 or master) and cherry-pick the relevant commits that both show and solve the issue and create your PR from this new branch. This PR may then be closed.
At the moment the only difference between 5.1 and master is the use of the 5.1 (currently versioned 5.1.1-SNAPSHOT) versus the master (currently versioned 6.0.0-SNAPSHOT) branches of the Hibernate ORM project.
"	2016-04-29 04:41:12	0.0		1
1413	"i can't find it here right now but didnt you mention the failing testcase was not included or something ? why was that?
"	2014-05-08 10:08:14	0.0		0
1414	"I did mention that. It was actually just that I wasn't sure how to write the test in this project, and was hoping to get away without doing it ;-) I'll make the effort.
"	2014-05-08 10:11:44	0.0		0
1415	"I'm sorry, I kind of stuffed up basing this branch off my previous pull request [#43]. A number of these commits are better covered in that pull request. I would like to close this one and redo it.
"	2014-05-08 10:23:01	0.0		0
1416	"should use -SNAPSHOT here.
"	2014-05-08 10:05:24	0.0		1
1417	"this makes c2j stateful instead of stateless... probably should have had this from beginning but not sure how this will affect users that have extended this class or relied on it being stateless.
"	2014-05-08 10:06:46	0.0		0
1418	"Doh, I am sorry, I'd been using that to deploy releases to my local nexus so we could use it in my projects! I didn't mean to include this file in the commit. I'll try to undo it.
"	2014-05-08 10:06:54	0.0		1
1419	"Yeah, the alternative of passing in the Configuration exploded into something quite complex looking. It all comes down to the need to lookup another PersistentClass in JavaTypeFromValueVisitor, so perhaps there's another way to do this?
"	2014-05-08 10:17:13	0.0		0
1420	"https://hibernate.atlassian.net/browse/HBX-1225
"	2014-04-27 23:34:51	0.0		0
1421	"Could you add a testcase for this ? Not fully following what case you fixing ?
"	2014-04-28 00:12:02	0.0		1
1422	"I can see you have a testcase in the jira - now just add that as a testcase in the test package you are already making updates to.
"	2014-04-28 00:15:03	0.0		1
1423	"Thanks Max, I've just pushed the test case to the repo. This demonstrates that the fix works. It doesn't demonstrate the failure case when you use a class that has been generated with the property referencing the concrete class rather than the proxy.
"	2014-04-30 03:11:08	0.0		0
1424	"Hi Max, further to our comments in #44, I have created a test case that demonstrates the issue that I am trying to solve in this PR.
"	2014-05-08 11:05:29	0.0		0
1425	"I have noticed that I have in fact broken some of the other tests, because my proxy change is also used when generating an hbm.xml, which is wrong. Investigating.
"	2014-05-08 21:06:51	0.0		1
1426	"Okay! I have pushed new commits onto this branch, destroying what was there, because investigating the other test cases I'd broken lead me to discover a much simpler way to implement this fix. No more stateful Cfg2JavaTool. Changes only to BasicPOJOClass. No broken tests. New tests to demonstrate the solution and the problem.

May we start over? :-)
"	2014-05-08 21:44:01	0.0		0
1427	"Apologies for the bump, but I'd love to see this integrated and or work towards integrating it!
"	2014-06-11 01:39:56	0.0		0
1428	"I have updated my patches for the 5.1 branch as I am now using this with Hibernate 5.1. I have been using these patches in production for years now, and I still believe they are critical for Hibernate Tools. I'd love to get these into the main release if we can. Happy to discuss more.

I'm not sure what the difference between master and 5.1 branches is. I haven't updated this PR yet, but here is the tree that I have updated:

https://github.com/karlvr/hibernate-tools/tree/many-to-one-proxy-5.1
"	2016-04-29 02:59:43	0.0		1
1429	"Hey karl, I am very sorry that it took such an awful lot of time to take a look at this. I am happy to integrate these patches but would it be possible to rebase your this branch and resolve the conflicts? Just create a new branch called HBX-1225 (either from 5.1 or master) and cherry-pick the relevant commits that both show and solve the issue and create your PR from this new branch. This PR may then be closed.
At the moment the only difference between 5.1 and master is the use of the 5.1 (currently versioned 5.1.1-SNAPSHOT) versus the master (currently versioned 6.0.0-SNAPSHOT) branches of the Hibernate ORM project.
"	2016-04-29 04:37:17	0.0		1
1430	"I should add that one test fails: testNoConnInfoExport(org.hibernate.tool.ant.AntHibernateToolTest)
with a NPE in the data source provider implementation. 
"	2014-01-28 22:27:49	0.0		1
1431	"That NPE is in the DriverManagerConnectionProviderImpl and it is handled differently in Hibernate 4.2 and 4.3. It is caused by there being no URL configured, but there is a leftover(?) hsqldb URL in there, which fails as we're trying MySQL. So I think this test might need to change for upgraded Hibernates.
"	2014-01-28 22:39:54	0.0		1
1432	"the test is to verify hibernate does not fail wrongly ;/ this sounds like a regression bug in hibernate for me.
"	2014-01-28 23:36:24	0.0		1
1433	"Right, it appears better in 4.3 - it throws an exception about not being able to open the connection. It doesn't appear the test expects this?
"	2014-01-29 00:14:57	0.0		1
1434	"no it is worse in both 4.2 and 4.3 - the test is testing it can work with hibernate models without having an active connection configuration ;/
"	2014-01-29 08:08:12	0.0		0
1435	"so do we need to open an issue with hibernate for this?
"	2014-01-29 12:44:53	0.0		0
1436	"do you have jboss repositories configured in your settings.xml ? i'm surprised master is failing for you since it works for me.
"	2014-01-28 22:12:07	0.0		0
1437	"I have https://repository.jboss.org/nexus/content/repositories/public/ in my settings.xml with releases and snapshots enabled. The issue was the eclipse equinox jar. That doesn’t appear to exist anywhere! Perhaps it’s in your local repository?

I’ve just done a branch for 4.2, which only required a small change in error logging:
https://github.com/karlvr/hibernate-tools/tree/4.2

On 29/01/2014, at 11:12 am, Max Rydahl Andersen notifications@github.com wrote:

> do you have jboss repositories configured in your settings.xml ? i'm surprised master is failing for you since it works for me.
> 
> —
> Reply to this email directly or view it on GitHub.
"	2014-01-28 22:24:42	0.0		1
1438	"So it actually did fails now ;/ @koentsje  can you take a look please ?
"	2014-01-28 23:34:36	0.0		1
1439	"sure i'll take a look
"	2014-01-29 12:39:18	0.0		0
1440	"Thanks for the patch - Hibernate 4.3 is for JPA 2.1 so that is something we need too for JBoss Tools 4.2.x.

We still need to have Hibernate tools working for previous Hibernate versions because they are included in EAP 6. 

Seems the only way to do  that because of the api changes in Hibernate is to create a new hibernate tools 4.3 that we use against 4.3 only.

But are you saying you saw problems when compiling against even Hibernate 4.0 ?  
"	2014-01-28 08:09:05	0.0		0
1441	"I did see issues compiling against Hibernate 4 but they will probably be easy to resolve. I’m happy to go back and do that.

Do you think it would be practical to create a branch for 4.0 and perhaps 4.2 if necessary? Those could then be available for download / maven etc.

On 28/01/2014, at 9:09 pm, Max Rydahl Andersen notifications@github.com wrote:

> Thanks for the patch - Hibernate 4.3 is for JPA 2.1 so that is something we need too for JBoss Tools 4.2.x.
> 
> We still need to have Hibernate tools working for previous Hibernate versions because they are included in EAP 6.
> 
> Seems the only way to do that because of the api changes in Hibernate is to create a new hibernate tools 4.3 that we use against 4.3 only.
> 
> But are you saying you saw problems when compiling against even Hibernate 4.0 ?
> 
> —
> Reply to this email directly or view it on GitHub.
"	2014-01-28 08:13:24	0.0		0
1442	"If we need one for each version that is what we'll have to do ;/
"	2014-01-28 10:24:47	0.0		0
1443	"Hey Karl, again sorry that it took such an awful lot of time before I took a look at this. Is this something that still needs to be integrated in the 4.3 branch? Or is the fix obsolete in the meantime? Is there a corresponding JIRA issue for it? And what about your PRs for the 4.0 and 4.2 branches? Would those still be needed?
"	2016-04-29 04:47:24	0.0		0
1444	"@koentsje no problem, from memory this work was required to get the tools working with Hibernate 4.3. So if they work with it now then there's no need for this PR anymore I think.

What's the plan with supporting old Hibernate versions? A branch for each version?
"	2016-04-30 01:18:04	0.0		0
1445	"interesting. I'm wondering if it was not possible to do this as a pure template you use for the generic exporter ?  (To avoid ""mixing"" java with groovy?)
"	2014-01-16 12:41:13	0.0		1
1446	"I reused the pojo templates as I needed about 90% of what they had already and my thinking was that any future changes to pojo generation would likely apply to pogo generation as well.  I'm happy to rip out my <#if groovy??> stuff though and make a new set of pogo templates.

But I will continue extending the POJOClass tree as there's a lot of functionality in there that I need but also happy to use delegation if you guys prefer.
"	2014-01-16 14:35:06	0.0		0
1447	"To get this in it would be awesome if you actually added a test that would fail without this change.

Add your usecase in one of the hbm2x tests should be sufficient.
"	2013-12-07 08:57:54	0.0		1
1448	"Sounds okey, but can we get a test for it showing the usecase?
"	2013-12-07 08:59:24	0.0		1
1449	"sorry, after ten month is hard to remember. I'll try to figure out why I needed this.
"	2013-12-07 09:30:14	0.0		0
1450	"Any chance you got a test schema/test case you can add in to the Oracle tests ?
"	2012-12-12 01:26:09	0.0		1
1451	"Hi, 

sure I will give it a try. I have managed to create a simple test, but for now it's failing on the table != null assertion.
Maybe you could give me a hint, if I forgot something?

https://gist.github.com/5620977d80dd1c074103

With kind regards,

Thorsten Schäfer
"	2012-12-12 16:04:40	0.0		0
1452	"First guess - Oracle uses uppercase for its tables so use identifier(""ORACLE_REVERSE_ENGINEERING"")
"	2012-12-13 16:29:32	0.0		0
1453	"sorry for not responding earlier but i'm not following what it is you are trying to here. Got an example of what is not working ?

Plus - the fix seem to change many other things (Formatting, dependencies,etc) that seems unrelated. Any chance you can rebase it and clean it up ?
"	2013-12-07 09:02:31	0.0		1
1454	"looks good but dont grok why mysql connector needs to be added for every run - shouldnt it just be in the mysql profile ?
"	2012-09-13 14:54:53	1.0	2012-09-13 18:40:03	0
1455	"This was incorporated in pull request 28 
"	2012-09-13 08:22:23	0.0		0
1456	"This was incorporated in pull request 30
"	2012-09-13 08:24:14	0.0		0
1457	"This was incorporated in pull request 31
"	2012-09-13 08:24:51	0.0		0
1458	"Related: https://github.com/hibernate/hibernate-tools/pull/6
"	2012-08-21 21:20:23	0.0		0
1459	"Nice :)
"	2012-08-22 11:28:58	0.0		0
1460	"this was integrated and applied with pull request 31
"	2012-09-13 08:31:53	0.0		0
1461	"Looks to make sense - no idea how that could have been missed for so long :(

Got a unittest to go with this thing so we don't forget.
"	2012-08-02 14:54:40	0.0		0
1462	"this was integrated and applied:
- on 4.0.x with pull request 31
- on 3.6.x with pull request 30
- on 3.4.x with pull request 28
"	2012-09-13 08:34:31	0.0		0
1463	"It's supposed to be .\* = %

.\* is regular expression
% is JDBC syntax for the same thing.

is only used in file name globbing which is not what was intended here.
"	2012-08-02 14:53:47	0.0		0
1464	"I'm not sure I understand. Are you saying that the existing code in JDBCReader.java is correct? Because it doesn't seem to work as I expect it. But then maybe my expectations are completely wrong of course. It has happened before ;-)
"	2012-08-02 16:32:26	0.0		1
1465	"Yes, I see JDBCReader as being correct.

it converts .\* to ""%"" which matches what the syntax is in all examples, i.e. schema=""MYS.*"" 
"	2012-08-17 11:45:07	0.0		0
1466	"Disregard this pull request, I chose the wrong branch to pull it into.
"	2012-08-02 14:52:03	0.0		0
1467	"It's supposed to be .\* = % 

.\* is regular expression
% is JDBC syntax for the same thing.
- is only used in file name globbing which is not what was intended here.
"	2012-08-02 14:51:44	0.0		0
1468	"this was integrated and applied:
- on 4.0.x with pull request 31
- on 3.6.x with pull request 30
- on 3.4.x with pull request 28
"	2012-09-13 08:35:37	0.0		0
1469	"Added junit test. Please do not forget to switch properties to h2 to check.
"	2012-03-26 13:06:12	0.0		1
1470	"The new test just tests when there is a '.', how about the case where there is a space in the catalog name - removing quoting would harm that case. 
"	2012-09-04 14:39:06	0.0		0
1471	"Do not believe this is a proper fix for this issue.
"	2012-09-04 14:41:16	0.0		1
1472	"I'm closing this pull request as it doesn't seem to solve the issue completely
"	2012-09-13 08:37:51	0.0		0
1473	"Thanks, could you provide a test case patch too ?

/max (sent from my phone)

On 02/03/2012, at 22.45, Shane StClair
reply@reply.github.com
wrote:

> These changes add support for a columnToPropertyGeneration method in ReverseEngineeringStrategy. Also updated org.eclipse.jdt:org.eclipse.jdt.core:3.2.0-v_671 to org.eclipse.tycho:org.eclipse.jdt.core:3.8.0.v_C03, since that's what I could find in the available repos.
> 
> You can merge this Pull Request by running:
> 
>  git pull https://github.com/axiomalaska/hibernate-tools property-generated-support
> 
> Or you can view, comment on it, or merge it online at:
> 
>  https://github.com/hibernate/hibernate-tools/pull/19
> 
> -- Commit Summary --
> - Added support for columnToPropertyGeneration in ReverseEngineeringStrategy
> 
> -- File Changes --
> 
> M pom.xml (12)
> M src/java/org/hibernate/cfg/JDBCBinder.java (27)
> M src/java/org/hibernate/cfg/reveng/DefaultReverseEngineeringStrategy.java (5)
> M src/java/org/hibernate/cfg/reveng/DelegatingReverseEngineeringStrategy.java (5)
> M src/java/org/hibernate/cfg/reveng/ReverseEngineeringStrategy.java (10)
> M src/templates/hbm/property.hbm.ftl (3)
> M src/testsupport/NoopReverseEngineeringStrategy.java (6)
> 
> -- Patch Links --
> 
>  https://github.com/hibernate/hibernate-tools/pull/19.patch
>  https://github.com/hibernate/hibernate-tools/pull/19.diff
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/hibernate/hibernate-tools/pull/19
"	2012-03-03 02:32:18	0.0		1
1474	"I added a simple test to DefaultReverseEngineeringStrategyTest, not sure if there should be more (or where to put additional tests, since column to property generation isn't implemented for reveng.xml).
"	2012-03-03 04:24:54	0.0		0
1475	"I was wondering exactly how to use it if the reveng.xml doesn't support it
"	2012-05-16 03:04:41	0.0		0
1476	"To use it, you would extend the DelegatingReverseEngineeringStrategy and override the columnToPropertyGeneration method. Here's a (very old) example on how to use your own ReverseEngineeringStrategy:

http://jaitechwriteups.blogspot.com/2006/08/custom-reverse-engineering-strategy-in.html

and here's the default columnToPropertyGeneration:

```
public PropertyGeneration columnToPropertyGeneration(TableIdentifier table, String column) {
    return PropertyGeneration.NEVER;
}  
```
"	2012-05-16 03:39:34	0.0		0
1477	"Max informed me that this pull request seems to break API. It will not be included in the upcoming release. If needed we will have to find a proper solution for one of the upcoming releases.
"	2012-09-13 08:42:25	0.0		1
1478	"Releated issue: https://issues.jboss.org/browse/JBIDE-9648
"	2012-09-04 14:07:20	0.0		0
1479	"this was integrated and applied:
- on 4.0.x with pull request 31
- on 3.6.x with pull request 30
- on 3.4.x with pull request 28
"	2012-09-13 08:43:08	0.0		0
1480	"Tried to apply this - all tests fail when doing mvn clean install - something is not right.
"	2012-08-07 11:02:52	1.0	2012-08-07 15:52:32	1
1481	"applied this as is except i'm setting pom.xml to SNAPSHOT for now.
"	2012-08-07 10:41:15	0.0		0
1482	"this pullrequest has much more than just h3.6 changes. Could you please be sure you have rebased with master and only include the relevant changes before submitting ? thanks
"	2012-01-25 04:45:07	0.0		1
1483	"A new pull request is created instead of this.
See https://github.com/hibernate/hibernate-tools/pull/16
"	2012-01-25 12:34:43	0.0		0
1484	"dima - what is the diff between this 3.6 pullrequest and your 3.6 pullrequest ?
"	2012-01-25 04:44:12	0.0		0
1485	"Closing this since using https://github.com/hibernate/hibernate-tools/pull/16 for 3.6.x instead.
"	2012-08-07 10:40:33	0.0		0
1486	"Completely safe and correct - so merging in.
"	2011-10-19 06:59:15	0.0		0
1487	"reopened because faulty apply.
"	2012-09-04 13:54:44	0.0		1
1488	"this was integrated and applied:
- on 4.0.x with pull request 31
- on 3.6.x with pull request 30
- on 3.4.x with pull request 28
"	2012-09-13 08:43:52	0.0		0
1489	"escaping occurs during artifactcollector formatting. 

thus the unit test is not failing and we are obviously not fixing or testing the real bug here. 

Commented on JBIDE-9104 for more feedback.
"	2012-08-07 09:58:14	0.0		1
1490	"closing this for now since test/patch is invalid.
"	2012-08-07 10:00:18	0.0		0
1491	"When changing this to:

if(true) return comment; 

the test still passes.
"	2012-08-07 09:33:43	0.0		0
1492	"Look at https://issues.jboss.org/browse/JBIDE-9174
for details
"	2011-06-16 08:55:37	0.0		0
1493	"safe - merging in.
"	2011-10-19 07:01:07	0.0		0
1494	"Obsolete. See https://github.com/hibernate/hibernate-tools/pull/17
"	2012-02-09 14:01:36	0.0		1
1495	"Outstanding!  Really glad someone stepped up and worked on this.

Curious if you use the new metamodel?  The old classes (org.hibernate.mapping) are still available, but will be removed prior to Final.
"	2011-06-10 14:39:05	0.0		0
1496	"No, Steve, we still use the old metamodel, but if you update hibernate core tests so they use new metamodel this would  defence us from possible mistakes ;)
"	2011-06-13 11:29:27	0.0		0
1497	"More clean pull request is created
"	2011-06-15 08:06:07	0.0		0
1498	"this was partly integrated and applied:
- on 4.0.x with pull request 31
- on 3.6.x with pull request 30
- on 3.4.x with pull request 28
  the autodiscovery part was commented out until we have verified this properly
"	2012-09-13 08:44:51	0.0		0
1499	"Hm... Not hibernate4 commits in this pull request... Where they are? Will close this pull request
"	2011-06-09 11:42:15	0.0		0
1500	"Not going to apply this since it will conflict/add dependency hell for tools with envers - hibernate 4 handles this better done in https://github.com/hibernate/hibernate-tools/pull/24.
"	2012-09-04 13:52:27	0.0		0
1501	"now irrelevant
"	2011-05-30 08:55:19	0.0		1
1502	"Secon commit fixes a HSQDB query problem with table name which should be quoted
"	2011-03-10 14:20:02	0.0		0
1503	"Fix and applied!
"	2011-03-11 12:40:32	0.0		1
1504	"AUTHORIZATION is required by HSQLDB 
"	2011-03-10 14:21:43	0.0		0
1505	"Create role DBA now is required by not hsqldb databases (which doesn't have it built in). The excaprion will be gulped.
"	2011-03-10 14:23:06	0.0		0
1506	"Do not forget to remove the role.
"	2011-03-10 14:23:29	0.0		1
1507	"Removed dialect check method
"	2011-03-10 14:24:08	0.0		0
1508	"Why is a new role needed ? None of our other tests needs/uses that ? Whats so special about this one ?
i.e. src/test/org/hibernate/tool/hbm2x/DefaultSchemaCatalogTest.java seem to work fine without it ?
"	2011-03-10 14:56:25	0.0		1
1509	"done!
"	2011-03-09 21:53:48	1.0	2011-03-09 21:53:28	0
1510	"@yrodiere looks good to me. Did you check that you execute the exact same number of tests with the new inclusions?

If so, it's good to merge!"	2017-05-31 17:57:38	0.0		0
1511	`% 16` would be clearer... Wouldn't it be optimized anyway?	2017-05-30 11:36:36	1.0	2017-05-30 12:15:05	1
1512	"same question as I had myself a couple of years ago :) no it seems JIT doesn't do that specific kind of optimisations. ""%"" is one of the operations we should always avoid according to our friends on OpenJDK."	2017-05-30 11:57:08	1.0	2017-05-30 12:15:05	1
1513	Weird... but good to know :)	2017-05-30 12:03:12	1.0	2017-05-30 12:15:05	0
1514	Actually there's an issue with URL encoding I discovered when trying to create a patch for https://github.com/lucasweb78/aws-v4-signer-java. I'll try to solve that issue first, since it may make this PR a bit simpler.	2017-05-31 14:24:34	0.0		0
1515	... and I got excited about nothing, once again. See https://hibernate.atlassian.net/browse/HSEARCH-2755. We can safely review this PR.	2017-05-31 17:16:48	0.0		1
1516	@yrodiere looks good to me. I already had to tune it before that when we upgraded Es.	2017-05-30 11:12:31	1.0	2017-05-30 11:26:22	0
1517	@gsmet Merged, thanks!	2017-05-30 11:26:27	1.0	2017-05-30 11:26:22	0
1518	great, merged this.	2017-05-30 15:29:52	0.0		0
1519	Jenkins, retest this please	2017-05-30 10:02:31	0.0		1
1520	"rather extreme :D 

but ok, merging.."	2017-05-30 16:11:19	0.0		0
1521	merged! thanks	2017-05-30 15:39:38	0.0		0
1522	"merged!

From a performance perspective I'm not particularly fond of us creating a Map of parameters to then later convert them all and create a new Map of parameters.

But that's having sub-zero priority right now so let's not spend time on it, we'll revisit if we see it's actually a problem during perf tests.

Thanks!"	2017-05-26 12:35:53	0.0		1
1523	">merged!

Thanks!

> But that's having sub-zero priority right now so let's not spend time on it, we'll revisit if we see it's actually a problem during perf tests.

It's especially low priority given that we're talking about bootstrapping code executed at most once per analyzer definition... Granted, bootstrapping code shouldn't be inefficient, but copying a dozen maps is a drop in the ocean."	2017-05-26 13:34:24	0.0		0
1524	"> It's especially low priority given that we're talking about bootstrapping code executed at most once per analyzer definition... Granted, bootstrapping code shouldn't be inefficient, but copying a dozen maps is a drop in the ocean.

Ooops, ok I missed it was in the context of bootstrap. Good thing I merged then ;)"	2017-05-26 14:19:39	0.0		0
1525	Shouldn't it be a boolean and not a string?	2017-05-25 09:52:07	0.0		1
1526	Yes it should, but it's out of my control. Elasticsearch just sends back a string, even though I originally sent a boolean.	2017-05-26 07:09:19	0.0		0
1527	merged! thanks	2017-05-26 19:01:15	0.0		0
1528	"I don't think it's clear what ""static boosts"" mean. What about we simply remove  this paragraph? I think we should stop highlighting what actually works in Elasticsearch, and shift to a mode in which the user is reassured that pretty much everything will work the same - with excetions. We should highlight the exceptions.

Or maybe just a simple ""The `@Boost` annotation will work, but since it's deprecated we suggest to use query time boosting""."	2017-05-26 12:41:40	0.0		1
1529	s/it will be removed starting from Lucene 7/support for this approach will be removed in Apache Lucene since version 7.	2017-05-26 12:43:06	0.0		0
1530	"""static"" ? Why not simply say ""We recommend to use query-time boosting instead : .."" ?"	2017-05-26 12:44:09	0.0		1
1531	static? Same as above.	2017-05-26 12:45:20	0.0		0
1532	static? Same as above.	2017-05-26 12:45:24	0.0		0
1533	Done.	2017-05-26 13:12:35	0.0		0
1534	"As a matter of fact, query-time boosting through our DSL is ""static"" (at least if we give ""static"" the same meaning as in the ""Static index time boosting"" section above): a given field will have the same boost for every document, regardless of the content of each document.

Anyway... I rephrased this so that I don't mention ""static"" at all."	2017-05-26 13:12:44	0.0		0
1535	"Will replace with the same warning as in the ""Dynamic index time boosting"" section."	2017-05-26 13:13:19	0.0		0
1536	"> I don't think it's clear what ""static boosts"" mean

It's the exact same wording as in the ""mapping"" section.

>  think we should stop highlighting what actually works in Elasticsearch

In general I'd say yes, but here the point was that `@Boost` and `@DynamicBoost` are closely related, so I didn't want one to be confused with the other.

> Or maybe just a simple ""The `@Boost` annotation will work, but since it's deprecated we suggest to use query time boosting"".

Done."	2017-05-26 13:14:06	0.0		1
1537	Done.	2017-05-26 13:16:56	0.0		0
1538	Right, missed it. Force pushed an update fixing it.	2017-05-24 14:38:04	1.0	2017-05-26 13:55:01	0
1539	Merged, thanks!	2017-05-26 13:55:08	1.0	2017-05-26 13:55:01	0
1540	"""let the batched work being"" => ""let the batched work be"", unless the Beatles spoke a bad English... ?"	2017-05-24 13:39:00	1.0	2017-05-26 13:55:01	0
1541	@Sanne @yrodiere force pushed an update addressing your comments on the operator list. It should be more clear now.	2017-05-24 12:44:51	1.0	2017-05-24 13:36:49	0
1542	Nice! Since @Sanne's remarks have been addressed too, I merged it.	2017-05-24 13:37:13	1.0	2017-05-24 13:36:49	0
1543	+1 let's keep it consistently capitalized to clarify that it's the proper name of the feature.	2017-05-24 12:28:17	1.0	2017-05-24 13:36:49	0
1544	"could you list also how to do ""prefix, phrase, precedence, fuzzy "" ?"	2017-05-24 12:32:07	1.0	2017-05-24 13:36:49	1
1545	"It's definitely better, but I'm a bit worried that users will understand that `AND`, `OR`, etc. can be used as operators in queries, while in fact they cannot.
Maybe something like ""(AND using `+`, OR using `|`, NOT using `-`)"" would avoid any risk of confusion?"	2017-05-24 12:34:12	1.0	2017-05-24 13:36:49	1
1546	I was just changing it following the above remark of Sanne (and the use of a list to present each option). :)	2017-05-24 12:37:17	1.0	2017-05-24 13:36:49	0
1547	"Nice: it fixed the problem on my laptop.

On the error handling side, though, I couldn't help but notice that this particular test pattern appears at least three times in our tests:

 * `org.hibernate.search.test.engine.worker.WorkerTestCase`
 * `org.hibernate.search.test.performance.optimizer.OptimizerPerformanceTest`
 * `org.hibernate.search.test.performance.reader.ReaderPerformanceTestCase`

I think the last one won't behave well in case of failure, just as `OptimizerPerformanceTest` before your commits.

Perhaps we should fix `ReaderPerformanceTestCase` too? Or maybe we could use `ConcurrentRunner` in all of those tests. It should behave well when errors occur, plus IIRC we spent some time on it in order to make sure it produces usable error messages (with suppressed exceptions and such).

If you disagree, I'll just merge it."	2017-05-24 07:35:18	1.0	2017-05-24 10:05:27	1
1548	"Thanks for merging. To note our resolution regarding the other problems: yes they should be fixed as well, or maybe even evaluated for removal.

But not related with this specific issue and for now we need to focus on the 5.8 tasks, we'll cross that bridge when we'll have a problem."	2017-05-24 10:09:36	1.0	2017-05-24 10:05:27	0
1549	merged! thanks	2017-05-23 16:19:49	0.0		0
1550	retest this please	2017-05-22 11:02:50	1.0	2017-05-23 07:18:58	1
1551	Merged, thanks!	2017-05-23 07:19:27	1.0	2017-05-23 07:18:58	0
1552	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2017-05-19 12:05:02	1.0	2017-05-19 17:34:05	1
1553	ok to test	2017-05-19 12:42:08	1.0	2017-05-19 17:34:05	0
1554	"could one of you add a test as well? I'd hate this to have regressions in the future.

If noone has time for that right now I'm happy to merge this but let's open a JIRA to make sure a test is added in this development cycle."	2017-05-19 13:07:55	1.0	2017-05-19 17:34:05	1
1555	"If possible, i'd like you to merge first because it's really blocking me to complete integration of elasticsearch 5.4 and hibernatesearch in a fully ""secured"" environment. 
I'll have a look for the test asap, but I first need to see & understand how your tests work.
Can you also tell me what kind of test you'd like me to add ?"	2017-05-19 13:28:45	1.0	2017-05-19 17:34:05	0
1556	"> If possible, i'd like you to merge first because it's really blocking me 

Sure that's fine. Also the test is possibly complex in this case, and @yrodiere seems to have some ideas already. I'd normally ask contributors for a test but this is a complex one, let's leave it to him."	2017-05-19 13:33:29	1.0	2017-05-19 17:34:05	0
1557	@yodamad I'm working on the test right now	2017-05-19 13:41:36	1.0	2017-05-19 17:34:05	0
1558	@yodamad Still on it, it will require some hacking... In the meantime, could you please ping me when you signed the CLA? Thanks.	2017-05-19 14:33:20	1.0	2017-05-19 17:34:05	0
1559	@yrodiere I've signed it (mvincent.it@gmail.com)	2017-05-19 14:36:19	1.0	2017-05-19 17:34:05	0
1560	"@Sanne: I managed to set up a test, but due to [HSEARCH-2481](https://hibernate.atlassian.net/browse/HSEARCH-2481) it won't work on CI. It does work locally though (fails before the commit, passes after the commit), so I added it anyway but disabled it. We'll have to take a look at HSEARCH-2481.

@yodamad Thanks! I merged the fix, and a 5.8-SNAPSHOT version with this fix will be available tomorrow (after the nightly build). "	2017-05-19 17:34:11	1.0	2017-05-19 17:34:05	0
1561	great, thanks all!	2017-05-19 17:35:57	1.0	2017-05-19 17:34:05	0
1562	"> a 5.8-SNAPSHOT version with this fix will be available tomorrow (after the nightly build).

On a side note, in order to use snpashots, you must use the JBoss Maven repository. See [settings-example.xml](https://github.com/hibernate/hibernate-search/blob/master/settings-example.xml) for an example of how to do that."	2017-05-22 06:55:37	1.0	2017-05-19 17:34:05	0
1563	Unless I'm mistaken, this should be `ElasticsearchHostsSniffer.DEFAULT_SNIFF_REQUEST_TIMEOUT`.	2017-05-19 12:50:57	1.0	2017-05-19 17:34:05	0
1564	Do I have to do another PR after ammending ?	2017-05-19 13:29:04	1.0	2017-05-19 17:34:05	0
1565	as you prefer. Typically we just force-push on the same branch, that will replace the current code in the same PR.	2017-05-19 13:31:33	1.0	2017-05-19 17:34:05	0
1566	I've just ammend commit (https://github.com/yodamad/hibernate-search/commit/3538cacf0b7d735b8ccdaac4611a6fe9ff4616ec). 	2017-05-19 13:46:33	1.0	2017-05-19 17:34:05	0
1567	Merged, thanks!	2017-05-18 12:06:59	1.0	2017-05-18 12:06:55	0
1568	"If I understand correctly, this does not just ""avoid redundant delegation"".

This has two side effects. We'll take CDI as an example:

1. Before this change, if someone tried to use Hibernate Search during CDI beans initialization, the call would block because Hibernate Search wasn't initialized yet, which would result in a deadlock since Hibernate Search waits for CDI to be initialized. After this change, such calls will simply fail. So in that respect, I guess this change is a good thing.
2. Before this change, if someone tried to use Hibernate Search *just after* CDI beans initialization, before Hibernate Search had the time to fully initialize, the call would block, and resume once Hibernate Search is fully initialized. After this change, such calls will simply fail. And **that** is not a good thing...

So in the end, I'd rather add a (configurable) timeout to the `join()`, so we can get the benefits of your patch (1) without its downsides (2)."	2017-05-17 08:39:37	1.0	2017-05-17 12:23:09	1
1569	"Sounds like you're assume that the two frameworks (Hibernate, CDI) are booting in two different threads running fully in parallel, and in parallel with the end user's app. Is that the case?

With the added synchronizations I've been addressing _visibility_ concerns, in case the two frameworks are initialized _by_ different threads - potentially something some containers will do - but I don't expect the application to be considered ""deployed"" until all frameworks have been initialized. I strongly expect there to be a guard there.

Let me try explain that in other words: I've addressed cross-thread visibility concerns, not timing. The ""happens-before"" rules should apply and I think we'll need to have faith in the containers?"	2017-05-17 08:58:36	1.0	2017-05-17 12:23:09	1
1570	"> we'll need to have faith in the containers?

Having experienced the thrilling task of adding a Wildfly/CDI integration test, I have mixed feelings about this statement :grin:

> I don't expect the application to be considered ""deployed"" until all frameworks have been initialized

If that's true, we shouldn't bother with blocking calls anywhere, not even in `InitializingIntegratorState` for instance... should we?

Also, you seem to assume that the container itself will take care of integration. As we know, this will probably take years, if it ever happens. So I suspect users will have to take care of that for a time, and they may not have access to as much internals as Wildfly developpers, preventing them to control the execution order as delicately.

Anyway... I must admit I don't clearly see why this commit is useful, I thought it was simply code cleanup. If you think it's necessary, then let's go with it. We'll wait for a ticket confirming there is a problem before we try to fix this problem :)"	2017-05-17 11:16:14	1.0	2017-05-17 12:23:09	0
1571	"yes I think that's a reasonable tradeoff.

It's not my typical style to push for integrating a problem and ""let the users report issues"" but in this case I think I'm quite confident on taking the risk, as I believe the timing issue is really not a problem in practice as this won't be run in parallel.

The reasoning is that the variable will be read very often, and beyond a volatile read it's all getting expensive. We'll revisit this (of course) if someone managed to proof I'm wrong on the parallel timings.."	2017-05-17 11:21:50	1.0	2017-05-17 12:23:09	0
1572	"The `InitializingIntegratorState` is different as it is more likely triggered by our own integration points relying on ORM's listeners. This specific case however is meant to serve user threads, which should really not be free to run before we're initialized. In case that happens, I think having the error message is clearer than a deadlock to defend against ""dodgy integration patterns"""	2017-05-17 11:24:23	1.0	2017-05-17 12:23:09	1
1573	"This is not strictly necessary, since the resulting name for this entity will be under 64 characters anyway. But I guess it won't hurt :)
On a side note, we have quite a few other nested classes in other tests, and they seem to be doing just fine without explicit table names. We've probably been lucky not to reach the 64 character limit until now."	2017-05-16 07:03:38	1.0	2017-05-16 08:58:35	0
1574	We have a similar setup `org.hibernate.search.test.query.sorting.SortOnFieldsFromCustomBridgeTest.configure(Map<String, Object>)`. Did you leave it on purpose?	2017-05-16 07:09:23	1.0	2017-05-16 08:58:35	0
1575	I'm not finding that. Are you sure?	2017-05-16 08:56:06	1.0	2017-05-16 08:58:35	0
1576	Looks like that's the one I had already modified in the same commit.	2017-05-16 08:57:54	1.0	2017-05-16 08:58:35	0
1577	Right. Sorry :x 	2017-05-16 09:40:20	1.0	2017-05-16 08:58:35	0
1578	Rebased and merged, nice cleanup!	2017-05-12 16:04:38	0.0		0
1579	Rebased and merged. With one additional commit s/integer/int/ I missed on the first review.	2017-05-12 17:55:11	0.0		0
1580	"It was preexisting, but I think we should use `Hibernate Search` not `Search`.

Maybe a comma after `As of (Hibernate) Search 5` would be in order."	2017-05-12 16:13:39	0.0		1
1581	Looks like `short` and `Short` were already mentioned above in the numeric fields?	2017-05-12 16:14:11	0.0		0
1582	Maybe `allows to define`?	2017-05-12 16:15:47	0.0		0
1583	`**@**DateBridge` to be consistent with above. And maybe mention `@CalendarBridge` too.	2017-05-12 16:18:08	0.0		1
1584	This looks pretty arbitrary and weird. Do we really have a safeguard for this?	2017-05-12 16:18:36	0.0		1
1585	Done.	2017-05-12 17:21:00	0.0		0
1586	You're right: it was a pre-existing mistake. I'll remove those types from the list above.	2017-05-12 17:22:19	0.0		0
1587	Done.	2017-05-12 17:25:21	0.0		0
1588	Done.	2017-05-12 17:25:55	0.0		0
1589	"I can see why we would enforce this: truncating IDs in any way is bad idea.
But no, this doesn't seem to be enforced anywhere: the only places we call `org.hibernate.search.annotations.DateBridge.resolution()` from are the date/calendar bridge providers, and we don't  check anything about the ID.

Maybe I should simply remove this warning... ? After all, you can also shoot yourself in the foot by assigning any custom field bridge to the document ID."	2017-05-12 17:32:27	0.0		1
1590	Yeah, if we don't have specific code to check for this, let's remove this.	2017-05-12 17:51:03	0.0		1
1591	"Funny we have another transient failure when testing this one :).

Jenkins retest this please"	2017-05-12 14:37:35	0.0		1
1592	"> I'd also expect a library like this to have some out of the box support for such kind of tests?

It doesn't seem so. Fortunately, it's easy to do ourselves: we already have a utility just for that.

I removed the increase in the refresh interval in my commit and amended the commit to use polling. On my machine, executing only the `#discovery()` test takes about 5s, while executing the `#simple()` test takes about 2.5s. So we wait for approximately 2.5s.

Knowing that the sniffer cannot be configured to sniff more often than every second (which is quite healthy if you ask me), I don't think we can improve much on that.

Side note: using `mvn surefire:test` instead of `mvn test` in the commands I gave in the PR description will make it run faster, since it won't compile the tests each time."	2017-05-15 11:52:46	0.0		1
1593	merged. Thanks!	2017-05-16 09:23:06	0.0		0
1594	Why do you think raising the refresh time would help?	2017-05-15 10:59:53	0.0		1
1595	"Needing this test to wait `4s` is annoying and I would accept that if it was the only way, but we all know that these figures are going to fail in some other slightly different condition.

Is there no way with this mock library to ""wait until"" the condition is satisfied?

I'm confident you could code that yourself but I'd also expect a library like this to have some out of the box support for such kind of tests?"	2017-05-15 11:02:26	0.0		1
1596	"Because if the refresh occurs less often, it will be less likely to occur between our two requests (the two calls to `doPost`), which will still execute just as fast.
Anyway, that was just to be safe, but you're right, polling will be more efficient."	2017-05-15 11:43:51	0.0		0
1597	@gsmet Right. I amended my commit.	2017-05-12 15:27:22	0.0		0
1598	Rebased and merged. Thanks.	2017-05-12 16:01:37	0.0		0
1599	s/a an/an/	2017-05-12 14:39:01	0.0		0
1600	I think it would be nice to explicitly add the case when you add new entities.	2017-05-12 14:40:08	0.0		1
1601	merged. Thanks!	2017-05-16 10:41:04	0.0		0
1602	merged	2017-05-15 11:18:06	0.0		0
1603	"@gsmet Thanks, I removed the ""asArray"" suffix. I will merge and backport as soon as the CI build succeeds."	2017-05-12 15:38:25	1.0	2017-05-12 16:00:45	0
1604	Merged and backported to 5.6 and 5.7.	2017-05-12 17:47:38	1.0	2017-05-12 16:00:45	0
1605	"Hmmm, it looks weird to limit this to directory based indexes. I would expect this method to work even for RAM based indexes.

I then realized that it was already existing code but I thought I would mention it anyway."	2017-05-12 14:43:29	1.0	2017-05-12 16:00:45	0
1606	"Is the fact that it returns an Array really important? I wouldn't include it in the method name.

And I must admit I preferred the old method name altogether (`getFullTextFilter()`). It's more to the point and doesn't add useless information."	2017-05-12 14:46:38	1.0	2017-05-12 16:00:45	1
1607	RAM-based indexes are directory-based: they use a `RAMDirectoryProvider`. See `BaseDirectoryProviderService`.	2017-05-12 15:30:13	1.0	2017-05-12 16:00:45	1
1608	But you're right: this comment should disappear eventually (why the hell create a TODO in the code without a corresponding ticket???). I created [HSEARCH-2724](https://hibernate.atlassian.net/browse/HSEARCH-2724).	2017-05-12 15:32:54	1.0	2017-05-12 16:00:45	0
1609	"`getFullTextFilter` is much too vague, we could be returning half a dozen different things, and none of them would be handled the same way:

 * `Query`
 * `Filter`
 * `FullTextFilterImplementor`
 * `FullTextFilterDef` (!)
 * `FullTextFilter` (!)
 * etc.

I'll remove the ""asArray"" suffix, though."	2017-05-12 15:35:13	1.0	2017-05-12 16:00:45	1
1610	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2017-05-08 23:03:32	1.0	2017-05-09 11:24:37	0
1611	thanks, good idea!	2017-05-09 11:24:40	1.0	2017-05-09 11:24:37	0
1612	Merged, thanks!	2017-05-04 17:46:12	0.0		0
1613	merged. Thanks!	2017-05-09 11:30:55	0.0		0
1614	merged!	2017-05-10 11:04:52	0.0		0
1615	Merged, thanks!	2017-05-04 14:18:08	1.0	2017-05-04 14:18:03	0
1616	resolving	2017-05-09 15:13:11	1.0	2017-05-04 14:18:03	0
1617	merged! thanks	2017-05-03 16:01:27	1.0	2017-05-03 16:01:22	0
1618	Looks good, but didn't we have more warnings? 	2017-05-03 16:27:17	0.0		0
1619	"@Sanne The others are either questionable or false positives:

 * Suspicious reference equality test of boxed types => We're just checking whether both variables are null, so it's okay
 * Possible confusion of local and field => The first one is legit, but solved in another PR, and the other ones reflect a standard practice in our codebase, so I don't think it's a problem
 * Self assignment => Was already solved in a previous PR (seems the analysis is out-of-date)
 * Result of integer multiplication cast to long => Doesn't seem that critical to me, but I can solve it if you want
 * Non-synchronized override of synchronized method => False positive, we only override methods to throw UnsupportedOperationException so we don't need synchronization
"	2017-05-03 16:31:53	0.0		1
1620	nice. Merged	2017-05-03 17:18:05	0.0		0
1621	@yrodiere could you rebase it and trigger a new build please?	2017-05-03 17:25:32	0.0		1
1622	@Sanne Done, build in progress	2017-05-03 18:03:09	0.0		0
1623	"very nice! Merged it.

I've added one additional change - it's trivial so I don't believe it needed review but feel free to have a look: 61540cce72db5ca2f6243a58494075af0f393370"	2017-05-09 15:10:35	0.0		0
1624	Jenkins, retest this please	2017-05-03 07:05:22	1.0	2017-05-03 07:54:33	1
1625	Jenkins, retest this please	2017-05-03 07:06:14	1.0	2017-05-03 07:54:33	1
1626	Merged, thanks!	2017-05-03 07:54:36	1.0	2017-05-03 07:54:33	0
1627	Probably not worth it for this but at one point I suppose we will need to inject the dialect in the conversion mechanism.	2017-05-03 07:09:59	1.0	2017-05-03 07:54:33	0
1628	You're right. We managed to avoid it until now though, and if we can avoid it until 6.0 we may not even have to do it at all: I'm not sure we'll want to support Lucene => ES conversion once Hibernate Search APIs don't depend on Lucene anymore.	2017-05-03 07:22:30	1.0	2017-05-03 07:54:33	0
1629	"> More seriously, great that you found this. I guess this will was right in your way when trying to benchmark the ES integration?

Yes. It wasn't a big deal as we have other bottlenecks to solve first, but this was a low hanging fruit and  it would become a problem eventually."	2017-04-28 17:52:09	0.0		0
1630	thanks, applied your suggestions and merged. I didn't change the interface, it's in the .impl package anyway.	2017-04-28 18:08:34	0.0		0
1631	"Can this even happen? We're talking about a JsonObject which would contain a null entry, that seems really strange, I'd expect a `NoSuchElementException` instead...

Maybe you should rather check if the entry set is empty?"	2017-04-28 16:47:00	0.0		1
1632	I think constants should rather be defined in a final class with a private constructor, so that nobody will start extending the `Paths` interface, but if you really think this a good idea...	2017-04-28 16:50:14	0.0		0
1633	This should be removed, it is not used. I think it's a copy/paste mistake.	2017-04-28 16:54:33	0.0		1
1634	For your information, incomplete javadoc such as this triggers warnings in the build logs. Not a big deal, but if we could avoid that kind of things to stack up...	2017-04-28 16:58:12	0.0		1
1635	Same as above	2017-04-28 16:58:41	0.0		0
1636	"It would be a bit clearer if we used a dedicated `IndexIdentifier` type, able to return a simple string or an encoded one. Mainly because it's really not obvious why the name is URL-encoded, both here and in the IndexManager.

... but it would once again require two hours of find and replace, so I think we'll stick with this :p "	2017-04-28 17:14:26	0.0		1
1637	"yes I agree with that and I actually was tempted to do it.. but for sake of getting this done I stopped polishing :)

+1 to do such a thing at another round"	2017-04-28 17:48:12	0.0		0
1638	what's the worst thing that will happen if someone implements it? ;)	2017-04-28 18:00:05	0.0		0
1639	I'll remove the javadoc. I feel it's easier to read the one line of code than understanding the explanations I tried to draft...	2017-04-28 18:02:41	0.0		0
1640	merged! thanks	2017-04-28 17:15:07	1.0	2017-04-28 17:14:27	0
1641	merged! thanks	2017-04-27 21:57:15	1.0	2017-04-27 21:56:57	0
1642	"Wow, the JDK9 build now works fine! Great :)
Merged, thanks!"	2017-04-27 08:04:22	1.0	2017-04-27 08:03:37	0
1643	merged	2017-04-26 11:57:07	1.0	2017-04-26 11:56:55	0
1644	The CI is down right now (because of the upgrade to maven 3.5, I think), but the travis build succeeded: https://travis-ci.org/yrodiere/hibernate-search/builds/225892334	2017-04-26 07:25:41	1.0	2017-04-26 09:50:49	0
1645	"> The CI is down right now (because of the upgrade to maven 3.5, I think)

FYI upgrading Maven took 2 seconds and doesn't require any downtime. To clarify: we didn't update all builds to use the new Maven but it's an opt-in so most builds are still using whatever versions they where using before."	2017-04-26 09:39:57	1.0	2017-04-26 09:50:49	0
1646	"This PR looks good and since it's urgent I'll merge it already, but I'm confused about why we need those empty jars in the other modules now.

Assuming that indeed having any module not produce an empty jar will fail the build, then why not declare this in the parent pom as in my other PR?

Finally, do we need to review the ""skipDeploy"" attributes? We don't want to release these empty jars which were added. with the previous PR."	2017-04-26 09:44:06	1.0	2017-04-26 09:50:49	1
1647	merged!	2017-04-26 09:51:01	1.0	2017-04-26 09:50:49	0
1648	"> This PR looks good and since it's urgent I'll merge it already, but I'm confused about why we need those empty jars in the other modules now.

Actually that's the opposite: what I did in the previous PR was to skip the production of JARs when there is nothing to put in it. When skipIfEmpty is true, no JAR will be generated if there is no classes/resources to put in it.

This is an improvement for most modules, since we won't publish empty, useless JARs anymore. We mostly used to for pom-packaging modules and for test-jar artifacts in modules without tests.

But in the case of the ""distribution"" module, this module had no classes and still had a JAR packaging. Maven doesn't like when a module has a JAR packaging and doesn't produce any JAR, so the build started to fail. This PR solves the issue by switching the packaging of this module to POM, which seems to make sense."	2017-04-26 11:43:56	1.0	2017-04-26 09:50:49	0
1649	"yes I agree it makes sense to switch to POM in this specific case.

I'm confused about why it's necessary to skip the jar building of the other modules though, and if so why not declare it on the parent pom rather than re-defining the rule in each individual pom ?

Incidentally several other modules are broken now, I'm sending another follow-up PR."	2017-04-26 11:52:37	1.0	2017-04-26 09:50:49	0
1650	"> I'm confused about why it's necessary to skip the jar building of the other modules though

Because we don't want to publish empty JARs, especially empty tests-jars in modules where there are no tests... do we?

> and if so why not declare it on the parent pom rather than re-defining the rule in each individual pom ?

Well that's what I did... ? I added a default rule to not produce any JAR when there nothing to put in it, and overrode this rule where we need to produce empty JARs for some reason.
"	2017-04-26 11:54:26	1.0	2017-04-26 09:50:49	0
1651	"> Because we don't want to publish empty JARs, especially empty tests-jars in modules where there are no tests... do we?

Fair enough, it's indeed pointless but remember we only publish what gets deployed to Maven central: we can ""skip deploy"" on case by case and still use the jars for other purposes during the build.

> Well that's what I did... ? I added a default rule to not produce any JAR when there nothing to put in it, and overrode this rule where we need to produce empty JARs for some reason.

oh right :) Sorry I got confused by some other patch I've been reviewing doing the opposite."	2017-04-26 12:10:29	1.0	2017-04-26 09:50:49	1
1652	I just rebased this on #1381 , otherwise the build will just fail	2017-04-26 07:49:53	1.0	2017-04-26 11:59:57	0
1653	rebased	2017-04-26 11:58:20	1.0	2017-04-26 11:59:57	0
1654	Merged, thanks!	2017-04-26 12:00:12	1.0	2017-04-26 11:59:57	0
1655	"@Sanne Sorry about that... I think we'd better fix this by declaring the distribution module as a POM module, though. This won't change anything for potential consumers, as the assembly will still produce tar.gz and zip artifacts; we just won't have an empty JAR artifact anymore. Which seems to make sense.
I'm on it, it's currently building and I'll submit a PR as soon as it succeeded."	2017-04-26 07:01:28	0.0		1
1656	Closing for now; superseded by #1381. Feel free to reopen if necessary.	2017-04-26 07:11:53	0.0		0
1657	merged, thanks!	2017-04-25 19:43:26	0.0		0
1658	nice solution, merged!	2017-04-25 14:28:23	0.0		0
1659	Merged, thanks!	2017-04-25 13:17:51	1.0	2017-04-25 13:17:11	0
1660	@Sanne Don't you want to do the same for ES2? As it's an embedded instance, it uses the same configuration as the rest of our tests, though. Maybe the configuration for ES2 should be in `sharedtestresources/src/main/resources/log4j.properties`?	2017-04-25 10:02:54	1.0	2017-04-25 10:34:30	0
1661	"@yrodiere no I'm not too interested in spending time polishing the ES2 tests :)

Speaking of resources, I actually think they shouldn't be in `src/[test|main]/resources` at all as we don't load them from our testsuite.
In fact I had them in the root before, but you moved them in the resources. Having them in `sharedtestresources` seems interesting but that's a task for another day.. not sure if the ES plugin can deal with that."	2017-04-25 10:18:12	1.0	2017-04-25 10:34:30	0
1662	"> Speaking of resources, I actually think they shouldn't be in src/[test|main]/resources at all as we don't load them from our testsuite.

Created https://hibernate.atlassian.net/browse/HSEARCH-2696."	2017-04-25 10:33:18	1.0	2017-04-25 10:34:30	0
1663	Looks good, merged!	2017-04-25 10:34:38	1.0	2017-04-25 10:34:30	0
1664	Thanks @golovnin ! Applied and backported to all 4 actively maintained branches: 5.5 5.6 5.7 (and master, 5.8)	2017-04-23 18:40:47	1.0	2017-04-23 17:59:23	0
1665	Merged, thanks!	2017-04-21 13:32:35	1.0	2017-04-21 13:32:27	0
1666	@Hibernate-CI re test this please	2017-04-21 10:38:18	1.0	2017-04-21 21:46:22	1
1667	Jenkins, retest this please	2017-04-21 13:25:20	1.0	2017-04-21 21:46:22	1
1668	thanks, good ideas. Applied them, then actually differentiated the methods to make sure there's no mistake and merged.	2017-04-21 21:47:33	1.0	2017-04-21 21:46:22	0
1669	"Shouldn't this be ""fileDeleteFailureIgnored""? I don't get why we would use an abbreviation here."	2017-04-21 13:33:44	1.0	2017-04-21 21:46:22	1
1670	"Given the  new behavior, maybe renaming this to ""tryDelete"" would make sense?"	2017-04-21 13:38:53	1.0	2017-04-21 21:46:22	1
1671	thanks yes that's just a typo	2017-04-21 13:43:19	1.0	2017-04-21 21:46:22	0
1672	ok; In that case I would deprecate it.	2017-04-21 13:44:35	1.0	2017-04-21 21:46:22	0
1673	merged, thanks!	2017-04-19 15:44:39	1.0	2017-04-19 15:44:27	0
1674	Merged; thanks!	2017-04-18 13:35:26	1.0	2017-04-18 13:35:18	0
1675	"Lovely pattern. In Infinispan we have a similar one, I believe that's what had inspired Gustavo to add that `Condition` which you now removed (but it wasn't the full thing - I believe Gustavo tried to keep it simple).

I'm not super convinced of the ""step"" parameter: it's not simple to guess an adequate value when writing the test, so it would be even better by using auto-detection. For example hard code an initial step of 100 nanoseconds and double it at each failed attempt.

None of the above are blocking problems - I'd have merged it already if it weren't for the fact that all integration tests are failing."	2017-04-13 22:21:47	0.0		1
1676	@Sanne Thanks, I fixed the assert methods and the deployments. Everything runs fine on Travis now, let's wait for Jenkins to agree.	2017-04-18 10:47:48	0.0		0
1677	nice, merged	2017-04-18 11:24:22	0.0		0
1678	In this case it's fine, but generally speaking remember that such a `QueryParser` is not threadsafe. People will have to be careful when reusing helper methods from this class.	2017-04-13 21:26:19	0.0		0
1679	"why is this check called ""at least one"" but verifies ""exactly one"" ?"	2017-04-13 22:41:57	0.0		1
1680	Right... I'm afraid the problem is widespread though, because I've already seen this pattern (the query parser as a test attribute) multiple times...	2017-04-18 09:46:18	0.0		0
1681	"Right, I got confused with the other ""assert"" method (which I didn't implement right, either. I fixed both methods."	2017-04-18 10:46:40	0.0		0
1682	"Feel free to merge! Still looking at the new query dsl API pr

On Thu, 13 Apr 2017, 15:55 Yoann Rodière, <notifications@github.com> wrote:

> *@yrodiere* approved this pull request.
>
> Looks good to me.
> @Sanne <https://github.com/Sanne> Can I merge, or are you releasing?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/hibernate/hibernate-search/pull/1368#pullrequestreview-32653549>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AACmTUmpr_NhyM6HFbRD7l7cQwEwo1-Xks5rvjdFgaJpZM4M8rje>
> .
>
"	2017-04-13 15:01:22	1.0	2017-04-13 15:02:43	0
1683	Merged! Thanks.	2017-04-13 15:02:50	1.0	2017-04-13 15:02:43	0
1684	retest this please	2017-04-12 16:05:21	1.0	2017-04-13 07:11:07	1
1685	@Hibernate-CI test this please	2017-04-12 16:11:46	1.0	2017-04-13 07:11:07	1
1686	@Sanne About the failure we had sooner, related to a malformed HTTP response: I created a JIRA. https://hibernate.atlassian.net/browse/HSEARCH-2682	2017-04-12 16:16:46	1.0	2017-04-13 07:11:07	0
1687	Jenkins, retest this please	2017-04-12 17:01:24	1.0	2017-04-13 07:11:07	1
1688	Merged. Thanks!	2017-04-13 07:11:28	1.0	2017-04-13 07:11:07	0
1689	merged. thanks!	2017-04-24 16:31:34	0.0		0
1690	merged!	2017-04-12 16:24:27	0.0		0
1691	merged!	2017-04-18 11:56:18	0.0		0
1692	It seems there are problems with this version of Byteman: the build fails, and it's not the usual performance issue. See  http://ci.hibernate.org/job/hibernate-search-PR/org.hibernate$hibernate-search-orm/2066/testReport/junit/org.hibernate.search.test.query.initandlookup/CriteriaObjectInitializerAndHierarchyInheritanceTest/testJoinsAreOnlyOnUsefulEntityTypes/	2017-04-07 12:59:17	1.0	2017-04-19 22:09:09	0
1693	"Interesting, I have been keeping this upgrade locally for a long time and simply thought it was time to merge, as I never had a problem with it. 
Thanks I'll look at it. 
"	2017-04-07 13:02:17	1.0	2017-04-19 22:09:09	0
1694	"My bad, it consistently fails locally as well.
Reported the regression to Byteman: https://issues.jboss.org/browse/BYTEMAN-338

I'll figure out a workaround."	2017-04-07 15:55:07	1.0	2017-04-19 22:09:09	1
1695	"Byteman 4 Beta4 was released to solve our problem :)

Rebased"	2017-04-19 19:05:59	1.0	2017-04-19 22:09:09	0
1696	Note: I just rebased this on #1357, since one commit was already present on that other PR (the fix about queries on dynamically sharded indexes that don't have any shard yet).	2017-04-11 07:12:56	0.0		0
1697	Builds are failing because of some timeouts because the CI is slow (https://hibernate.atlassian.net/browse/HSEARCH-2684). I'll send a PR to fix that first.	2017-04-13 12:04:21	0.0		1
1698	I sent a PR to fix the random test failures (#1369) and rebased this PR on the other. The build should be a bit more stable now.	2017-04-13 17:55:09	0.0		0
1699	Rebased on master following the merging of #1369.	2017-04-18 11:37:46	0.0		0
1700	"Why do you say that the validation on consistent `Similarity` is useless?

It can be configured in many ways - some are legacy - and we had several cases in which people would get themselves into trouble (before introducing this check).

Commits like 5dd7f80 should best be handled in separate PRs, so that it doesn't slow down / distract from the issue we're supposed to solve."	2017-04-18 12:30:05	0.0		0
1701	"> Why do you say that the validation on consistent Similarity is useless?
> It can be configured in many ways - some are legacy - and we had several cases in which people would get themselves into trouble (before introducing this check).

I only see two ways to configure it (see `createSimilarity`): the index-level configuration, and the default configuration. Since entities are not taken into account when retrieving the `Similarity` (only the index and the more global `SearchConfiguration`), I don't see how we could have two entities in the same index with a different `Similarity`... ?
Maybe there _was_ a legacy way to configure similarity, and it got removed?

> Commits like 5dd7f80 should best be handled in separate PRs, so that it doesn't slow down / distract from the issue we're supposed to solve.

Hey, this PR depended on two other fixes, which I did address in separate PRs, so I don't *always* put irrelevant commits in my PRs :) I'll try to be more careful though."	2017-04-18 12:55:01	0.0		0
1702	Jenkins, retest this please	2017-04-19 07:27:40	0.0		1
1703	Jenkins, retest this please	2017-04-19 16:43:01	0.0		1
1704	About the similarity: you're right, sorry I got confused. There were several other options with a focus on the entity, but like you suggested they have been removed already. I remembered deprecating them but forgot we got rid of them.	2017-04-19 19:09:00	0.0		0
1705	"It's taking me a long time to wrap my head around the changes, but I like it so far. Reminiscent of various things that I wished to do in the past but it never was a good time in terms of branch maintenance.

On the kind of Dispatchers: I'm not seeing any specific problem, but remember that there's more going on than simple ""streams of changes"" and ""transactional changes"".

We need to keep in mind also that in different circumstances there are strong expectations about ordering of fired events: order needs to be strictly maintained even in ""async mode"", which means we can't just delegate to a parallel executor at any stage.

To the contrary when doing batch rebuilding (MassIndexer) the strict ordering is a burden which prevents fast index rebuilds. However even in that case, there are some operations which need to be kept in order:
 - the purgeAll before the MassIndexer runs need to happen strictly before the subsequent tasks
 - any final optimisation needs to happen after the last (less critical but still desirable)
 
Finally we need to allow for the ""transactional operations"" and MassIndexer operations to happen concurrently: say the MassIndexer is processing, and in parallel some database changes are performed. Our listeners will have to stack up the events fired from the transactional changes making sure that their relative order is maintained, and also that they overwrite any in-flight work from the mass-indexer. 

In the past it seems I had a clear picture in mind of the backend design, as it was simple enough to reason about this and see that it was correct. I can no longer load the whole picture in mind by simply reading the source code, so I think we should eventually add some tests at least to ensure the ordering properties.

Adding such tests is unrelated with this PR but I felt like sharing the concern already as this new design is making some subtle changes in the area."	2017-04-21 09:22:58	0.0		1
1706	"About the dispatchers, to be honest I just moved some code around so I could reuse it someplace else :) I didn't intend to make any change to work orchestration.> To the contrary when doing batch rebuilding (MassIndexer) the strict ordering is a burden which prevents fast index rebuilds. However even in that case, there are some operations which need to be kept in order:

But I agree work orchestration is quite complex, and thus might need some (more?) tests.

> To the contrary when doing batch rebuilding (MassIndexer) the strict ordering is a burden which prevents fast index rebuilds. However even in that case, there are some operations which need to be kept in order:

It seems to me that such ""synchronisations"" in the work stream are what @gustavonalle added recently, with `org.hibernate.search.backend.impl.batch.DefaultBatchBackend.awaitAsyncProcessingCompletion()`. After sending a `purgeAll` command, we would call this method, and so would we before final optimizations. "	2017-04-21 10:02:14	0.0		0
1707	great work, I've merged it. I applied two additional trivial commits.	2017-04-21 10:03:38	0.0		0
1708	"Traditionally we've been more forgiving about case preferences and trailing whitespaces.

Could you change this strategy from using a map to attempt a ignore-case equals on each enum name, and trim the propertyValue in advance as well?"	2017-04-13 10:07:22	0.0		1
1709	Ideally we'd want some of the configurations to use an intentionally inconsistent case in property value, to make sure it works ;)	2017-04-13 10:09:20	0.0		0
1710	I can just trim and lowercase the property value before passing it to `.get()`, it will achieve the same effect. Will do.	2017-04-13 11:14:12	0.0		0
1711	@Sanne rebased just now	2017-04-13 17:47:56	0.0		0
1712	"> There are a few behavior changes that may prevent us from backporting this PR

Good points. Neither change seems too bad, but in such cases we can simply agree to not backport it, and re-evaluate if there's demand for it."	2017-04-24 16:45:23	0.0		0
1713	"> in such cases we can simply agree to not backport it, and re-evaluate if there's demand for it.

I certainly agree with that. Especially since this fix is the best I could do when [trying to fix another bug](https://hibernate.atlassian.net/browse/HSEARCH-2668?focusedCommentId=92608&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-92608), which unfortunately cannot be fixed without breaking the APIs (I think). So basically nobody asked for this specific fix, but since it was already done...
"	2017-04-24 16:51:29	0.0		0
1714	very nice cleanup! merged	2017-04-24 17:01:09	0.0		0
1715	"shall we call this _getSourcePropertyName()_ ?

I tend to try disambiguate the entity properties from the Lucene fields by calling them respectivelly ""property"" and ""field"" in such cases."	2017-04-24 16:54:05	0.0		1
1716	ah sorry, I'm definitely distracted. this is an index field :)	2017-04-24 16:56:02	0.0		0
1717	"In this specific case, we are actually speaking about a field... See [here](https://github.com/hibernate/hibernate-search/pull/1360/files/8a1cb838838a7435b2e2787e5766ea2d788884bb#diff-2bb3b66e5fbcd04002af53e6f647d57bR33) and the `getFacetQuery` method a few lines below to see why.

Maybe ""Source"" isn't the right term, though. ""Attached""? ""Origin""? I'm not sure how to call it. It's basically whatever we pass to `@Facet.forField`..."	2017-04-24 16:58:38	0.0		0
1718	"> ah sorry, I'm definitely distracted. this is an index field :)

Ah, you were too quick. Yes :)"	2017-04-24 16:59:07	0.0		0
1719	nice ! merged	2017-04-04 08:56:39	0.0		0
1720	very nice! thanks, merged	2017-04-13 13:14:40	0.0		0
1721	why are you changing this? `Indexation` is not the correct term. It needs to be `Indexing`. I know it's wrong in some other places, but don't make it worse :)	2017-04-13 12:23:26	0.0		1
1722	`instanceof` is démodé ?	2017-04-13 12:26:04	0.0		0
1723	ah, it's just moved code. Ok...	2017-04-13 12:26:59	0.0		0
1724	I think I just copy/pasted the comments from FullTextSession, which I guess was more recent. I failed to see this difference.	2017-04-13 13:21:21	0.0		0
1725	Jenkins, retest this please	2017-03-31 15:25:47	0.0		1
1726	"Jenkins, retest this please
"	2017-04-06 12:35:01	0.0		1
1727	The build seems to fail on Jenkins, but not on Travis for some reason... Having a look right now.	2017-04-07 13:06:34	0.0		1
1728	Jenkins, retest this please	2017-04-07 13:43:12	0.0		1
1729	"After a rebase, we only have the same timeout issues as on other branches (including master). Marking as ""Ready for review""."	2017-04-11 09:33:38	0.0		0
1730	nice one. merged! thanks	2017-04-13 11:15:22	0.0		0
1731	"There's no need to use this prefix, we automatically pre-mask all read properties with an appropriate prefix.

More importantly, we should never force this specific prefix usage as other integrators use a custom prefix for the Search component.

But since I see this was an existing problem I'll take the PR and send a follow-up fix."	2017-04-13 10:27:54	0.0		1
1732	"N.B. the query caches its own execution: running it a second time will always return the same ResultSize as above.

I'll change it to use a new query instance."	2017-04-13 10:56:09	0.0		0
1733	"I'll follow your suggestion and change the JIRA to flag ""fixed for"" only on 5.8. We can always backport later if need be."	2017-04-04 08:53:29	0.0		0
1734	merged! thanks	2017-04-04 08:54:17	0.0		0
1735	merged!	2017-03-31 11:23:29	0.0		0
1736	Jenkins, retest this please	2017-03-30 16:15:40	0.0		1
1737	merged! thanks	2017-03-31 09:20:47	0.0		0
1738	merged! 	2017-03-31 09:18:44	1.0	2017-03-31 09:18:21	0
1739	merged, thanks!	2017-03-31 09:31:22	0.0		0
1740	"I'd like to see if we can simplify this PR a bit. I'll start by pushing d34c3ae9ffe7cd5459dc3c51b434cf8d516a34f5 to master already.  [done]

I probably would have sent a preamble PR ""Upgrade Spring integration tests to use a recent Spring Boot version"", but ok don't change it now as I'm almost done understanding it all :)"	2017-04-07 11:32:31	0.0		1
1741	@Sanne Rebased just now.	2017-04-28 07:54:24	0.0		0
1742	"Thanks, let's see if I can merge this today

On Fri, 28 Apr 2017, 08:54 Yoann Rodière, <notifications@github.com> wrote:

> @Sanne <https://github.com/Sanne> Rebased just now.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/hibernate/hibernate-search/pull/1351#issuecomment-297933163>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AACmTTXZdFoksChsdYHDhkCuRpdQCCyKks5r0ZswgaJpZM4MtRlO>
> .
>
"	2017-04-28 08:13:28	0.0		0
1743	@Sanne I just rebased to remove the [empty test I noticed](https://github.com/hibernate/hibernate-search/pull/1351#pullrequestreview-38127235) (it was not needed) and to resolve a conflict in the logger. Nothing changed apart from that!	2017-05-15 17:00:27	0.0		0
1744	cool, thanks	2017-05-15 17:26:36	0.0		0
1745	superseded by #1406 	2017-05-16 21:33:40	0.0		0
1746	@Sanne I think there's something missing here... I'll dive back into it soon and will try to add a proper test if necessary.	2017-05-15 14:12:56	0.0		1
1747	Jenkins, retest this please	2017-03-27 17:22:38	0.0		1
1748	merged & backported. Thanks!	2017-03-28 17:15:41	0.0		0
1749	merged & backported.. thanks!	2017-03-28 15:32:40	0.0		0
1750	@Sanne Rebased, it should work fine now :)	2017-03-29 07:26:29	1.0	2017-03-29 14:43:41	0
1751	"Are you sure that making LuceneLogCategories extensible (rather than an enum) isn't a bit too much?

Was it because you didn't want to add Elasticsearch specific categories to the enum in hibernate-search-engine?

I see it as a nice move as other extension points - like Infinispan - will be able to create their own categories but I don't think an external integrator will actually do this, as they'll have their own logging conventions.

On the other hand, the previous `enum` approach had the nice effect of giving us (and users) a single place to look to have a list of all categories."	2017-03-29 10:27:34	1.0	2017-03-29 14:43:41	1
1752	"> Are you sure that making LuceneLogCategories extensible (rather than an enum) isn't a bit too much?
> 
> Was it because you didn't want to add Elasticsearch specific categories to the enum in hibernate-search-engine?

Yes.

> I see it as a nice move as other extension points - like Infinispan - will be able to create their own categories but I don't think an external integrator will actually do this, as they'll have their own logging conventions.

I did not expect them to do this either, to be honest. Just wanted to avoid leaky abstractions internally.

> On the other hand, the previous enum approach had the nice effect of giving us (and users) a single place to look to have a list of all categories.

It doesn't seems _very_ hard to get a listing of all categories; Ctrl + Shift + G with my cursor on the constructor of `LogCategory` does the trick in Eclipse.

Do you want me to revert the change? I find this cleaner, but either way it will work."	2017-03-29 12:59:45	1.0	2017-03-29 14:43:41	0
1753	"> Do you want me to revert the change? I find this cleaner, but either way it will work.

No, it's ok.

I just wanted to explore the reasoning with you. BTW I don't expect all users to always work with sources open, so we'll have to create a section in the documentation.

I'll merge this when back from lunch.. didn't go yet ;)"	2017-03-29 13:05:43	1.0	2017-03-29 14:43:41	0
1754	"> so we'll have to create a section in the documentation

Pre-existing loggers are already documented [here](https://docs.jboss.org/hibernate/search//5.7/reference/en-US/html_single/#_optimizing_the_query_process) and [here](https://docs.jboss.org/hibernate/search//5.7/reference/en-US/html_single/#lucene-infostream). And I added a section in the Elasticsearch docs in this PR.
But maybe we should have a dedicated section, and make those I just mentioned redirect there?"	2017-03-29 13:20:56	1.0	2017-03-29 14:43:41	1
1755	"> But maybe we should have a dedicated section, and make those I just mentioned redirect there?

Yes that's what I meant. No rush though, just adding ideas for eventually reorganizing the docs."	2017-03-29 14:36:05	1.0	2017-03-29 14:43:41	1
1756	merged! thanks	2017-03-29 14:44:09	1.0	2017-03-29 14:43:41	0
1757	To measure durations don't use `System.currentTimeMillis()`, use System.nanoTime()	2017-03-29 10:31:26	1.0	2017-03-29 14:43:41	1
1758	Right; fixed.	2017-03-29 12:46:48	1.0	2017-03-29 14:43:41	0
1759	"I've updated the modules structure.

I think this reflects now what we want; although to capture issues with the Sniffer module I've opened the follow up HSEARCH-2655

`commons-codec` was missing as well."	2017-03-28 11:55:42	1.0	2017-03-28 15:28:55	0
1760	Merged, thanks!	2017-03-28 15:29:17	1.0	2017-03-28 15:28:55	0
1761	The rest client doesn't depend on gson (unlike Jest), so this should be moved to `org.hibernate:hibernate-search-elasticsearch` just above.	2017-03-27 15:50:09	1.0	2017-03-28 15:28:55	0
1762	Same here, gson should not appear here.	2017-03-27 15:50:54	1.0	2017-03-28 15:28:55	0
1763	Actually the property should be `elasticsearchSnifferVersion`. Or we could remove `elasticsearchSnifferVersion` from the pom if you want, but I'm not 100% sure the release cycles are synchronized.	2017-03-27 15:52:35	1.0	2017-03-28 15:28:55	1
1764	gson should have remained here, *we* use it but the rest client does not.	2017-03-27 15:56:33	1.0	2017-03-28 15:28:55	1
1765	The dependency to `javax.xml.bind.api` should be moved here, since only the sniffer uses that.	2017-03-27 15:56:44	1.0	2017-03-28 15:28:55	0
1766	I don't think we depend on `javax.xml.bind.api`, only the rest client does (the sniffer, actually).	2017-03-27 15:57:30	1.0	2017-03-28 15:28:55	1
1767	No our own hibernate-search-elasticsearch requires it too.	2017-03-28 09:59:48	1.0	2017-03-28 15:28:55	0
1768	"That's not how the modules work :)
Since *we* use it, it should be in a module *we depend on*.

The intent of the isolation is to avoid transitive dependencies: we do export all of `hibernate-search-elasticsearch` to the end user's classpath so that people can use our public API contained in there, but we don't want them to be able to use our `gson` jar as it might conflict with their own copy."	2017-03-28 10:02:03	1.0	2017-03-28 15:28:55	1
1769	"Good point, but I don't want to expose it to our users.

I'll move gson to its own module then.."	2017-03-28 10:03:00	1.0	2017-03-28 15:28:55	0
1770	Hum, ok. I thought this was about laying the groundwork to contribute a Wildfly module to Elastic, but it seems I was confused.	2017-03-28 10:11:38	1.0	2017-03-28 15:28:55	0
1771	Right, in a single class: ElasticsearchDateHelper. 	2017-03-28 10:13:02	1.0	2017-03-28 15:28:55	0
1772	Yes I'll separate gson as I mentioned in the above comment: it doesn't belong in either module.	2017-03-28 10:15:48	1.0	2017-03-28 15:28:55	0
1773	"But I think we still need to add a dependency to a Jackson module here (even if we leave it in `hibernate-search-elasticsearch`). The class `org.elasticsearch.client.sniff.ElasticsearchHostsSniffer` depends on Jackson classes to parse JSON.

... unless modules visible by the `hibernate-search-elasticsearch` module are automatically visible by its dependencies?

Now which module to depend on, I'm not sure. I think `org.jboss.resteasy.resteasy-jackson-provider` would do the trick, but maybe you'll want to be more precise and just depend on `org.codehaus.jackson.jackson-core-asl`, which should be enough."	2017-03-28 10:23:54	1.0	2017-03-28 15:28:55	1
1774	"I was just looking into that :)
Unfortunately the Wildfly provided module uses Jackson `1.9.13` which is way older than what the sniffer expects.

And that's our fault, as we depend on an old version of Avro which requires that version of Jackson :-/

I'm trying."	2017-03-28 10:28:40	1.0	2017-03-28 15:28:55	0
1775	Jenkins, retest this please	2017-03-21 14:06:58	0.0		1
1776	"Jenkins, retest this please
"	2017-03-21 14:31:34	0.0		1
1777	Jenkins, retest this please	2017-03-21 17:19:27	0.0		1
1778	Superseded by #1348	2017-03-29 07:28:12	0.0		0
1779	"I'm having some failures in the ES module:


    Failed tests: 
    SearchFactoryTest.testIndexManagerStoppedAfterIndexInitializationException:147 expected:<1> but was:<0>
    SearchFactoryTest.testIndexManagerStoppedAfterIndexManagerSearchFactorySetupException:207 expected:<1> but was:<0>
    SearchFactoryTest.testServicesStoppedAfterIndexInitializationException:105 expected:<1> but was:<0>
    SearchFactoryTest.testServicesStoppedAfterIndexManagerSearchFactorySetupException:177 expected:<1> but was:<0>
    
    Tests run: 1196, Failures: 4, Errors: 0, Skipped: 27
"	2017-03-20 15:40:29	1.0	2017-03-20 19:12:53	0
1780	Jenkins, test this please	2017-03-20 16:14:25	1.0	2017-03-20 19:12:53	1
1781	merged	2017-03-20 19:33:37	1.0	2017-03-20 19:12:53	0
1782	"not important as it's not an hot code area, but it looks a bit wasteful to add them all to a new collection ?
You could just close them all.

BTW should we invoke each close() method in a try/catch ""log & ignore"" block?"	2017-03-20 15:42:17	1.0	2017-03-20 19:12:53	0
1783	"@Sanne I wanted to use a Stream, but decided against it in order to be able to backport.
I guess I'll add a good old closeAll() method.

> BTW should we invoke each close() method in a try/catch ""log & ignore"" block?

I'll try to do that. Ideally we should throw an exception if anything goes wrong and still close every reference, but in order to do that, we should do it everywhere, and unfortunately we don't: https://hibernate.atlassian.net/browse/HSEARCH-2640"	2017-03-20 15:46:39	1.0	2017-03-20 19:12:53	0
1784	What's the need for this rule? It doesn't look like you need this Flag, you can just omit the condition in the second rule?	2017-03-20 16:48:26	1.0	2017-03-20 19:12:53	1
1785	"I would actually do something here so that the test can assert that the `SearchException` was thrown.

e.g. flip a boolean, so that you can assert on the boolean after the catch block?

Otherwise you have the risk that the Services are indeed released, but just because the failures didn't happen.

I'm being extra paranoid here because the Byteman rules tend to break without us noticing when they rely on specific signatures..."	2017-03-20 16:50:50	1.0	2017-03-20 19:12:53	1
1786	Right, in this particular test this isn't necessary. Removed.	2017-03-20 16:57:39	1.0	2017-03-20 19:12:53	0
1787	There is no reason for the services to be released if the failure didn't happen, since we don't close the factory in this test... But ok, I added a check.	2017-03-20 16:59:35	1.0	2017-03-20 19:12:53	0
1788	Closing, since I added your commit to #1343	2017-03-20 09:07:58	0.0		0
1789	Jenkins, retest this please	2017-03-17 15:39:11	1.0	2017-03-20 19:47:53	1
1790	Jenkins, retest this please.	2017-03-17 17:05:00	1.0	2017-03-20 19:47:53	1
1791	"Jenkins, retest this please.
"	2017-03-17 17:25:38	1.0	2017-03-20 19:47:53	1
1792	Jenkins, retest this please.	2017-03-17 19:06:23	1.0	2017-03-20 19:47:53	1
1793	"The commits look good, I would like to merge this.

But the build is still failing with a similar error:

```
Caused by: java.io.IOException: Too many open files
	at sun.nio.ch.IOUtil.makePipe(Native Method)
	at sun.nio.ch.EPollSelectorImpl.<init>(EPollSelectorImpl.java:65)
	at sun.nio.ch.EPollSelectorProvider.openSelector(EPollSelectorProvider.java:36)
	at java.nio.channels.Selector.open(Selector.java:227)
	at org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor.<init>(AbstractMultiworkerIOReactor.java:142)
	... 65 more
```

Shall I leave the PR open?

It's possible that we simply have to raise the limits."	2017-03-18 22:17:43	1.0	2017-03-20 19:47:53	1
1794	"I have a theory - I couldn't verify yet - but I suspect the problem is simply caused by the fact that the reactive threads of the async http client aren't shut down aggressively but just ""scheduled to close gracefully"".

This graceful shutdown happens rather quickly, but it should take at least a full second as the selector needs to wake up first (and has a 1s timeout by default), so we don't notice any leak when debugging a single test yet I see ~2500+ threads over JConsole during the testsuite.

The testsuite takes longer than 1s but since the amount of threads to be shut down quickly raises in the hundreds, the scheduler isn't going to wake them all up as aggressively so this 1s wakeup time becomes longer.. coumpounding the problem.

I think we either find a way to block and wait for the shutdown to have happened, or we just avoid the explosive scheduling issue by setting a lower setting in the testsuite:


`elasticsearch/src/test/resources/hibernate.properties` :

    hibernate.search.default.elasticsearch.max_total_connection 2"	2017-03-19 00:22:04	1.0	2017-03-20 19:47:53	1
1795	"@Sanne Interesting.
You commit actually reduces the number of leaked file descriptors for each search factory from 64 to 10. It's better, though I don't understand why 10 times less threads translates into 6.4 times less leaked file descriptors.
On the other hand, setting max_total_connection to 2 means we end up with ours tests only being able to perform 2 concurrent calls to Elasticsearch. Which supposedly was what made performance tests fail on the CI, and is what I tried to solve in my first commit...

So I'm a bit torn here: it seems we end up exactly where we started from, and had some luck with the CI... I'll try to see what those 10 leaked file descriptors are, maybe it can shed some light on the issue..."	2017-03-20 09:24:52	1.0	2017-03-20 19:47:53	0
1796	I just rebased to also implement the improvements in `TestElasticsearchClient`. Still investigating, but one intersting thing is that the `TestElasticsearchClient` does not leak threads for some reason: the threads of its `RestClient` are correctly terminated, while those of the main `RestClient` (the one used by the `SearchFactory`) never are. `RestClient.close` is invoked in both cases, though...	2017-03-20 10:18:05	1.0	2017-03-20 19:47:53	0
1797	@Sanne Here, everything should be fine now. The build seems to run fine (no timeout) on ci-slave-4, even after I removed my initial commit that raised the number of I/O reactor threads. So I guess the two remaining commits should be enough...	2017-03-20 19:19:00	1.0	2017-03-20 19:47:53	0
1798	looks good! Testing one last time..	2017-03-20 19:35:49	1.0	2017-03-20 19:47:53	0
1799	thanks! merged	2017-03-20 19:48:17	1.0	2017-03-20 19:47:53	0
1800	tracked as https://hibernate.atlassian.net/browse/HSEARCH-2635	2017-03-13 11:03:20	0.0		0
1801	merged with a couple minor changes. Applied to: master, 5.7 and 5.6	2017-03-13 11:21:38	0.0		0
1802	It's weird to talk about servers now that everything is all cloudy and such.	2017-03-13 10:41:21	0.0		0
1803	IMHO, it's important to mention that's it's the default behavior.	2017-03-13 10:41:41	0.0		0
1804	"In the context of a user reading this on the PDF, calling it ""page"" is a bit confusing no?"	2017-03-13 10:45:05	0.0		0
1805	"You still pay for additional servers on AWS. You even pay for ES when using it ""as a service"".

Feel free to propose a re-wording but I think the point is not negligible ;)"	2017-03-13 10:46:43	0.0		0
1806	good catch!	2017-03-13 10:48:01	0.0		0
1807	True that, force pushed a better formulation.	2017-03-13 10:48:37	0.0		0
1808	Well, you can run your Es service on the same VM/bare metal server. Feel free to ignore this part but I thought it was a bit weird.	2017-03-13 10:51:16	0.0		1
1809	Yes you can do it, but it will require a higher performance server just to deal with the several dozens of additional threads. And you'll need some more for the efficiency lost in the transport & serializations of requests and responses..	2017-03-13 10:54:08	0.0		1
1810	actually I think your change would be misleading: the option is per-index specific, you can choose a different property value for each index.	2017-03-13 10:56:29	0.0		1
1811	To be honest, I made it consistent with the others above.	2017-03-13 10:58:04	0.0		0
1812	ooops :+1: I'll change it in the other direction. Thanks for spotting!	2017-03-13 11:00:51	0.0		1
1813	Shouldn't we add this to `org.hibernate.search.cfg.Environment.DEFAULT_SERVICES_MAP`? `NoopNamedResolver` is not used anywhere, so I don't think it is serving its purpose right now...	2017-03-17 15:27:17	0.0		1
1814	good catch! forgot about that.. not that missing or having it would make much of a difference ;)	2017-03-19 14:09:36	0.0		1
1815	"Build failing:

```
[ERROR] /mnt/jenkins-workdir/workspace/hibernate-search-PR/integrationtest/osgi/karaf-it/src/test/java/org/hibernate/search/test/integration/osgi/SystemTest.java:28:40: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull]
[ERROR] /mnt/jenkins-workdir/workspace/hibernate-search-PR/integrationtest/osgi/karaf-it/src/test/java/org/hibernate/search/test/integration/osgi/SystemTest.java:31:40: String literal expressions should be on the left side of an equals comparison. [EqualsAvoidNull]
```"	2017-03-16 09:04:56	1.0	2017-03-24 13:55:38	1
1816	"Looks like I underestimated the complexity of implementing this check :)

fixed"	2017-03-16 12:21:17	1.0	2017-03-24 13:55:38	0
1817	"Looks like the AWS slaves need reconfiguring as well:
 
    local machine name 'ip-172-30-1-189.ec2.internal' needs to resolve to a localhost address, most commonly as '127.0.0.1' or '127.0.1.1'. It resolved to: '172.30.1.189'. Fix your network configuration to be able to run the OSGi integration tests reliably. (It is possible though that OSGi tests will pass even if this fails.)"	2017-03-20 13:21:17	1.0	2017-03-24 13:55:38	1
1818	"Pushed a new approach ... this should cause less trouble :-D
"	2017-03-24 12:27:58	1.0	2017-03-24 13:55:38	0
1819	"Looks much safer indeed :grin:
Merged, thanks!"	2017-03-24 13:56:14	1.0	2017-03-24 13:55:38	0
1820	merged! thanks	2017-03-27 11:31:46	1.0	2017-03-27 11:31:38	0
1821	merged	2017-03-20 12:44:30	0.0		0
1822	merged	2017-03-14 14:59:45	0.0		0
1823	"Usability question: which combinations of _refreshAfterWrite_ and _sync_ (fields of *ElasticsearchIndexManager*) belong to which use case?

Do we need to clarify in the docs which combinations are suggested?

Finally, do you think any of these combinations are nonsense and should issue a log warning?"	2017-03-27 10:03:50	0.0		0
1824	"Thanks for the summary, it's good to think about these combinations.

I agree with most of your thoughts, but to make sure we're on the same page:

 - remember that by default we send operations to the backend _after_ the database changes are committed. So your first case (sync + refreshAfterWrite) is described correctly as you state, but remember that even if an error gets synhcornously reported it won't abort the database changes. Essentially there's a third parameter for these combinations: happens within the transaction vs happens after commit.

 - for the case ""async + refreshAfterWrite"" - which you agree makes less sense - I believe that ES won't actually perform any periodic refresh on its own if no changes have been applied so even that minor benefit is not really there. Essentially we should agree that this mode is quite pointless, should we warn against it (by logging a warning)? I'm tempted to not to, as it's quite harmless other than being less efficient - but who knows is someone finds better reasons to do this.



"	2017-04-24 17:14:43	0.0		0
1825	"merged!

Opened https://hibernate.atlassian.net/browse/HSEARCH-2693 as an optionally follow-up. I'm happy to wait with it, as I suspect our own experience is about to improve in this area."	2017-04-24 17:35:30	0.0		0
1826	"I suspect this isn't dealing with the `ErrorHandler` in the usual way?

The `org.hibernate.search.exception.ErrorContext` is able to highlight a single failure our of a group, where the group usually was meant to be ""all operations from the current transaction"".

It's probably not easy to apply the `ErrorHandler` in the usual way as it normally would handle a failure as something like ""out of operations [A, B, C] we failed on B "" somehow suggesting that C wasn't executed.

In this case the various operations might have been applied out of order so you should collect all success/fail operations to forge a new kind of error state."	2017-03-27 09:59:38	0.0		0
1827	"I wouldn't consider this a blocker and not inclined to invest too much time on this as we want to evolve the ErrorHandler API.

Since errors are handled individually, users aren't going to miss them.

Just add a comment?
"	2017-03-27 10:01:24	0.0		0
1828	"You are right, but I'm afraid this problem is more general; even in the synchronous work processing, we have one error context per work, not one per list of works. See the two `executeSafely` methods in `ElasticsearchWorkProcessor`.

There's definitely something fishy here, I opened a ticket: https://hibernate.atlassian.net/browse/HSEARCH-2652

I also added a commit to at least mention the issue in comments, and I rebased on master."	2017-03-27 14:30:42	0.0		0
1829	merged! thanks	2017-03-06 17:26:58	0.0		0
1830	Note: we should backport this to 5.7, and maybe also to 5.6.	2017-03-06 12:50:54	1.0	2017-03-06 15:42:43	1
1831	I just spotted another case where we have a similar problem; will push an update.	2017-03-06 13:19:01	1.0	2017-03-06 15:42:43	0
1832	Done; I added a test and fix for HSEARCH-2631.	2017-03-06 13:20:52	1.0	2017-03-06 15:42:43	0
1833	nice. Merged in master, backporting now..	2017-03-06 15:45:23	1.0	2017-03-06 15:42:43	0
1834	"backported to both 5.6 and 5.7 branches. Branch 5.6 needed a little change as `Session` didn't implement the JPA flavoured `getResultList()` method yet.

Thanks!"	2017-03-06 16:17:46	1.0	2017-03-06 15:42:43	0
1835	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2017-03-01 10:44:40	0.0		0
1836	ok to test	2017-03-01 10:52:14	0.0		0
1837	"Hi @vcharmcaster , thanks for sending a patch!

I appreciate you have good intentions to help, but I won't apply this change as it's not necessary: 

- it doesn't fix any problem
- the code quality improvement is questionable.  We prefer the code to be readable.

If you want to help, may I suggest to try having a look at some of these issues?
https://hibernate.atlassian.net/issues/?filter=11250

Some of these might be simple enough for someone new to the project, but it's possible I'm wrong and they might be actually hard. Feel free to try any of these, and change issue if you get stuck.

Also, pick something you're most familiar with. For example I wouldn't try to upgrade JGroups if you're not familiar with using JGroups already.
"	2017-03-01 14:59:50	0.0		1
1838	Any reason to use the name `PARAMS2` instead of just `PARAMS`? Maybe you used an automated tool?	2017-03-01 10:56:46	0.0		1
1839	"there is params variable present, used eclipse to refactor code.
params2 matches more closely to ""params"" value. "	2017-03-01 11:01:30	0.0		0
1840	"@Sanne I think the fix is missing on the Elasticsearch side.

Currently the test passes because the analyzer isn't used in your schema, so the analyzer is instantiated as a Lucene analyzer, and then it reaches your check.
But if you assign the analyzer to a field in the `Sample` entity, the analyzer will be correctly detected as an Elasticsearch one and the check will be bypassed.

I added a commit to demonstrate the issue, feel free to squash it.

I suspect that `org.hibernate.search.engine.impl.ConfigContext.addAnalyzerDef(AnalyzerDef, XAnnotatedElement)` might be a better place to put the check, but I suppose you can also duplicate the check on the Elasticsearch side."	2017-02-28 16:49:28	1.0	2017-04-26 12:06:55	1
1841	"pushed a new version, applying this validation more generally across the code.

It also changes an SPI, but I think that's for the better as I like to keep the annotations out of SPI signatures."	2017-04-25 13:22:00	1.0	2017-04-26 12:06:55	0
1842	re-pushed as I had a mistake in javadoc.	2017-04-25 14:03:41	1.0	2017-04-26 12:06:55	0
1843	Moved to SPI	2017-04-25 20:37:59	1.0	2017-04-26 12:06:55	0
1844	Jenkins, retest this please	2017-04-26 07:54:47	1.0	2017-04-26 12:06:55	1
1845	Merged, thanks!	2017-04-26 12:07:08	1.0	2017-04-26 12:06:55	0
1846	Since this is mainly intended to be used by service providers, maybe we should move this class to `org.hibernate.search.cfg.spi`?	2017-04-25 14:53:40	1.0	2017-04-26 12:06:55	1
1847	Ok I didn't mean to add is an an API. Actually .impl even better?	2017-04-25 14:58:32	1.0	2017-04-26 12:06:55	0
1848	You can, but that's one more OSGi problem, because this must be used in the Elasticsearch module :)	2017-04-25 15:25:30	1.0	2017-04-26 12:06:55	0
1849	@Sanne I think it works too well: the CI is failing :)	2017-02-28 16:53:16	0.0		1
1850	"Ok, interesting.

I've sent a PR to the CI configuration to improve its configuration:
 - https://github.com/hibernate/ci.hibernate.org/pull/42

Let's hope Travis is having a better default?"	2017-02-28 19:24:10	0.0		0
1851	@Sanne I launched a job for your commit on travis, we'll see: https://travis-ci.org/yrodiere/hibernate-search/builds/206522400	2017-03-01 08:37:16	0.0		0
1852	"Unfortunately it doesn't work on Travis, either:

```
testLocalhostResolution(org.hibernate.search.test.integration.osgi.SystemTest)  Time elapsed: 0.014 sec  <<< FAILURE!
org.junit.ComparisonFailure: local machine name 'testing-gce-89719e7d-96d7-4b32-8350-d68cc17fa7d3' does not resolve to '127.0.0.1'. Fix your network configuration to be able to run the OSGi integration tests. expected:<127.0.[0].1> but was:<127.0.[1].1>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.hibernate.search.test.integration.osgi.SystemTest.testLocalhostResolution(SystemTest.java:28)
```"	2017-03-01 11:21:48	0.0		1
1853	"thanks. That suggests they are using a quite old version of Debian :(
I'll find an alternative way to check for ""sanity"" which isn't this strict. "	2017-03-01 14:52:29	0.0		0
1854	Jenkins, retest this please	2017-03-21 09:45:54	0.0		1
1855	"Looks good.

I don't think we'll want to test too many implementation details of the Rest Client but it's good to have the basics.

So the failed nodes are no longer contacted. Do you know for how long? I expect the client to eventually try to see if they recover..

Merging."	2017-03-27 11:53:06	0.0		0
1856	"@Sanne The code handling the blacklisting time is located in `DeadHostState`. It seems to start with 1 minute, and then increase with the number of failures to up to 30 minutes.

```
    private static final long MIN_CONNECTION_TIMEOUT_NANOS = TimeUnit.MINUTES.toNanos(1);
    private static final long MAX_CONNECTION_TIMEOUT_NANOS = TimeUnit.MINUTES.toNanos(30);
```"	2017-03-27 12:58:02	0.0		0
1857	"Note: I just pushed an update which added the commit ""When validating Elasticsearch schemas, use ""default"" as a default value for analyzer references"" and the next one.
I noticed the issue while working on something else, and since the PR hasn't been merged yet... :]"	2017-03-07 16:04:15	1.0	2017-03-24 12:10:00	0
1858	Jenkins, retest this please	2017-03-20 19:15:06	1.0	2017-03-24 12:10:00	1
1859	Jenkins, retest this please	2017-03-21 08:01:35	1.0	2017-03-24 12:10:00	1
1860	"@Sanne This should be ready for review.

About the builds: the previous CI build passed, but the one before failed for no apparent reason, so I'm launching another one to see if it was a transient failure that can be blamed on the slave (concurrent build or whatever) or if there is a randomly occurring problem in Hibernate Search itself."	2017-03-21 08:04:08	1.0	2017-03-24 12:10:00	0
1861	Jenkins, retest this please	2017-03-21 09:45:41	1.0	2017-03-24 12:10:00	1
1862	Jenkins, retest this please	2017-03-21 16:29:52	1.0	2017-03-24 12:10:00	1
1863	Jenkins, retest this please	2017-03-21 17:19:01	1.0	2017-03-24 12:10:00	1
1864	"There are some problems with the Maven profiles:
if I run with profile `elasticsearch-2.2` or `elasticsearch-2.0` the ""start"" goal is no longer valid. I tried to change it to the new goal ""runforked"" as in the new ES5 profile but then there's another failure relating to not being able to find ""org.elasticsearch.plugin:delete-by-query:zip:5.2.1"".

The plugin versions and tasks need to have stricter separation among profiles?"	2017-03-24 10:49:21	1.0	2017-03-24 12:10:00	1
1865	"@Sanne So... This situation is not new,  it's been here since I introduced the elasticsearch profiles.

The elasticsearch-5.0 profile is enabled automatically when the `testElasticsearchVersion` is not defined. I had to do this, because just making this a ""default"" profile means the profile will only be enabled when no other profile is... So, enable ""docs"" and you lose the elasticsearch5 profile :/

Unfortunately, ""a property is not defined"" for Maven means ""not defined explicitly"", and definitions in explicitly enabled profiles do not count. So in your case, you had both the `elasticsearch-2.2` and the `elasticsearch-5.0` profiles enabled, and I suppose the `elasticsearch-5.0` profile defined the `testElasticsearchVersion` property, but `elasticsearch-2.2` defined its own plugin configuration. Which won't work for several reasons.

So, if you want to run 2.0/2.2 tests, you must either:

 * Stick to the instructions in README.md and provide the `testElasticsearchVersion` explicitly:
  ```
   mvn clean install -Pelasticsearch-2.0 -DtestElasticsearchVersion=2.1.0
  ```
 * Or disable the default profile (`elasticsearch-5.0`) explicitly:
  ```
   mvn clean install -P'!elasticsearch-5.0,elasticsearch-2.0'
  ```

I'll see if I can change the poms to make things easier, but I doubt it..."	2017-03-24 11:04:34	1.0	2017-03-24 12:10:00	1
1866	ah right! Sorry I forgot about that. No rush with improvements, I'd like to integrate this first and the README instructions are good enough for now.	2017-03-24 11:23:43	1.0	2017-03-24 12:10:00	0
1867	"awesome work!
It's merged. 

I added one commit to address a couple of super trivial javadoc copy/paste errors."	2017-03-24 12:11:13	1.0	2017-03-24 12:10:00	0
1868	"> I tried to organize the changes in atomic commits, so that they can be more easily reviewed. If you think I should reorganize some of it so that it's easier to review, please say so, I'll see what I can do (I'll need a hint though ;) ).

Nothing important, but I was confused by the change of directions. In the second commit you introduce an `NoOpBackendRequestResultAssessor` Service, but then it's removed again.

Not worth spending time to polish the commit history; I just mention it in as when I notice such things on my own PRs it typically suggests I've been experimenting but didn't re-start with a clear purpose."	2017-03-06 10:52:57	1.0	2017-03-08 11:30:13	0
1869	"> Nothing important, but I was confused by the change of directions. In the second commit you introduce an NoOpBackendRequestResultAssessor Service, but then it's removed again.

Yes, it was either that, or I had to squash this commit and the following one, but they have slightly different purposes. Maybe next time I should squash them anyway?"	2017-03-06 11:03:18	1.0	2017-03-08 11:30:13	0
1870	"> Maybe next time I should squash them anyway?

Maybe. It's a tradeoff, I understand it's not always worth to re-work the commits extensively.. I trust you on that. I'm only highlighting it to make sure it's your choice and not by accident ;)

For the record, I'm having massive changes locally which I never sent a PR for as I wanted to polish them more; the reality is I'll have to do the work over as I waited too long and it's easier to re-do the work than fixing conflicts. So, lesson learned .. better to merge fast unless it's easy.

I see other similar cases now, like `ElasticsearchDialectProvider`.. I guess you changed direction after we talked more about Services :+1: 
"	2017-03-06 11:16:27	1.0	2017-03-08 11:30:13	0
1871	"`org.elasticsearch.client.sniff.Sniffer` : why is there support to create these things?
I don't see it ever being used, I'm probably missing something."	2017-03-06 11:21:08	1.0	2017-03-08 11:30:13	0
1872	"> org.elasticsearch.client.sniff.Sniffer : why is there support to create these things? I don't see it ever being used, I'm probably missing something.

It spawns a thread that does all the work. You don't need to ""use"" it, which is why we don't: we just create it and close it when it's not needed anymore.
"	2017-03-06 12:19:32	1.0	2017-03-08 11:30:13	0
1873	merged !	2017-03-08 11:30:28	1.0	2017-03-08 11:30:13	0
1874	It looks like this wasn't needed?	2017-03-06 11:01:11	1.0	2017-03-08 11:30:13	1
1875	Right; I added a fixup commit. Will `rebase --autosquash` when you're done reviewing, I don't want to mess with the commit hashs until then.	2017-03-06 12:24:05	1.0	2017-03-08 11:30:13	0
1876	"they don't have to ? Can you qualify? I guess it's missing something like ""to be sorteable"""	2017-02-22 12:20:27	1.0	2017-02-22 14:03:58	1
1877	"I was trying to say that if, through the Sort DSL, you target fields that are populated by custom field bridges, then those field bridges must implement `MetadataProvidingFieldBridge`.

But I see now that my warning isn't right after the Sort DSL example, like it should be. I pushed an update and rephrased the warning a bit. Is it better?"	2017-02-22 12:38:25	1.0	2017-02-22 14:03:58	0
1878	"@yrodiere we also use the dist profile in the regular master job.

The dist profile only generates aggregated javadoc so you won't have any issue if this particular javadoc is not included. To be completely thorough, when the aggregated javadoc is built, it builds the javadoc of all the modules but it only reports errors for the modules included in the final output. In the log file of the CI job, you can see there was an error generating the elasticsearch javadoc but as it wasn't included in the aggregated output, it wasn't reported.

In the release job, we use `-DperformRelease=true` to generate the sources jars and the javadoc jars (in HV, they are disabled with an explicit `maven.javadoc.skip` `true` directive).

It should be tested but I'm not sure generating the individual javadocs + the aggregated one will take much more time as it looks like the aggregate task looks for already generated javadoc before generating them. If it's confirmed, we would only have to add `-DperformRelease=true` to the CI job to be on the safe side."	2017-02-22 08:43:30	0.0		1
1879	"Thanks!

+1 to keep building javadocs. Just correctly ;)

I'm interested in keeping the builds fast locally - during dev - as that's the moment we all might need quick experiments.
I see no reason to disable such validations on CI jobs? We're talking about a couple of seconds, right?

I'd prefer to document a switch for local builds (default builds) so that I remember how I can *opt in* to check for verifications."	2017-02-22 08:49:34	0.0		0
1880	@Sanne it's more like one minute more for the entire build. No biggie IMHO. I'll update the CI jobs. BTW, you don't have a CI job for branch 5.6, I'll create one too.	2017-02-22 08:57:21	0.0		0
1881	@gsmet nice. While on it, create one for 5.7 as well? Master is now 5.8 ..	2017-02-22 09:00:02	0.0		0
1882	"@Sanne right.

So, I created CI jobs for 5.6 and 5.7.

 * master, 5.6 and 5.7 runs with -DperformRelease=true (to be sure the javadoc is OK) and -Pdocumentation-pdf (to be sure we can generate the PDF doc - we might have issues with special characters or things like that)
 * PR job runs with -DperformRelease=true

JIRA also needs some love on the fixVersion front but I'll let you do that as you like it :).

This PR should be:
 * included in master
 * backported to 5.7 as is
 * adapted for 5.6 but it shouldn't be too hard ;)"	2017-02-22 09:11:25	0.0		1
1883	Pushed to 5.6, 5.7 and master.	2017-02-27 13:06:46	0.0		0
1884	Well spotted. Maybe we should also update the Lucene doc link to `5_4_1`? It seems there isn't any javadoc for later `5.x` versions, though...	2017-02-22 08:08:52	0.0		1
1885	Yeah, I tried 5.4.4 and it wasn't there so I left it alone. To be honest, I find it less disturbing to have 5.4.0 rather than 5.4.1 if we don't have 5.4.4. But I dont really care :).	2017-02-22 08:35:41	0.0		0
1886	http://lucene.apache.org/core/5_5_4/core/	2017-02-22 08:46:08	0.0		0
1887	@Sanne nice detective job :).	2017-02-22 08:48:19	0.0		0
1888	"> http://lucene.apache.org/core/5_5_4/core/

Right, it's 5.*5*.4, not 5.*4*.4..."	2017-02-22 08:48:28	0.0		0
1889	Yeah, they were really *way* outdated :) I'll push another commit.	2017-02-22 08:50:27	0.0		0
1890	Merged, thanks!	2017-02-21 17:33:19	1.0	2017-02-21 17:33:10	0
1891	Should be `PropertiesBased` instead of `Propertiesbased`?	2017-02-21 16:55:40	1.0	2017-02-21 17:33:10	1
1892	Don't forget to also rename in the `META-INF/services` file :)	2017-02-21 16:57:33	1.0	2017-02-21 17:33:10	1
1893	"There was an inconsistency between the property name being documented vs. the one being used:
- hibernate.search.default.elasticsearch.discovery.scheme
- hibernate.search.default.elasticsearch.discovery.default_scheme

I picked the second one. Hope it's good?"	2017-02-21 18:37:10	0.0		0
1894	merged	2017-02-21 18:46:21	0.0		0
1895	"> There was an inconsistency between the property name being documented vs. the one being used:

Ha, I had trouble making my mind about this. I guess my subconscious didn't agree with me :) Thanks for spotting this!

> I picked the second one. Hope it's good?

It's currently a bit less appropriate, since currently there's no way to define a per-node scheme, but it's also more future-proof. So let's say it's the best one :)"	2017-02-22 08:35:58	0.0		0
1896	"Good to hear! Because it's released ;)

On Wed, 22 Feb 2017, 08:36 Yoann Rodière, <notifications@github.com> wrote:

> There was an inconsistency between the property name being documented vs.
> the one being used:
>
> Ha, I had trouble making my mind about this. I guess my subconscious
> didn't agree with me :) Thanks for spotting this!
>
> I picked the second one. Hope it's good?
>
> It's currently a bit less appropriate, since currently there's no way to
> define a per-node scheme, but it's also more future-proof. So let's say
> it's the best one :)
>
> —
> You are receiving this because you modified the open/close state.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/hibernate/hibernate-search/pull/1323#issuecomment-281603566>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AACmTWJXV7xkOB891kzdL6z2ce8fOaD_ks5re_NugaJpZM4MHeUr>
> .
>
"	2017-02-22 09:23:01	0.0		0
1897	fixed the camel-casing and merged	2017-02-21 14:20:34	0.0		0
1898	"Should be `setEnableJPAAnnotationsProcessing` (no capital 'R').
Also, given the setter just above, shouldn't it rather be `setJPAAnnotationProcessingEnabled`?"	2017-02-21 13:59:32	0.0		0
1899	"Not related to this PR, but it seems we're introducing two different naming schemes in this class for option setters:

 * `withMultitenancyEnabled`, `withIdProvidedImplicit`, ...
 * `multipleInstances`, `enableJPAAnnotationsProcessing`, ...

No need to change this PR, but just so I know, do you have a preference? "	2017-02-21 14:02:44	0.0		0
1900	thanks	2017-02-21 14:14:30	0.0		0
1901	"I find the new name more suited for this specific case, as it has an imperative effect on a ""toggle"".

You're right it's inconsistent though. I think the only (weak) justification I can think of is that the multi-tenancy and provided-id-strategies need to be plugged in additional strategies to work."	2017-02-21 14:19:19	0.0		1
1902	Rebased and merged; thanks!	2017-02-21 08:36:18	1.0	2017-02-21 08:35:37	0
1903	In my latest release announcement, I mentioned 5.2.7, but indeed I can't find any reason why 5.2.3, 5.2.4, 5.2.5 or 5.2.6 shouldn't work. @Sanne could you confirm this? Maybe I should correct the blog post?	2017-02-21 08:32:22	1.0	2017-02-21 08:35:37	0
1904	I confirm, it should work fine since 5.2.3+. I actually tested the whole range ;)	2017-02-21 08:39:58	1.0	2017-02-21 08:35:37	0
1905	Thanks. I fixed the blog post.	2017-02-21 14:12:27	1.0	2017-02-21 08:35:37	0
1906	Thanks; merged.	2017-02-20 15:39:24	1.0	2017-02-20 15:39:15	0
1907	Seems integration tests are failing, we should have a look...	2017-02-20 14:00:08	1.0	2017-02-20 14:36:27	1
1908	retest this please	2017-02-20 14:13:27	1.0	2017-02-20 14:36:27	1
1909	"It failed because there's a WildFly instance running on CI which wasn't property terminated by some other job.
It works locally; you can ignore it."	2017-02-20 14:28:45	1.0	2017-02-20 14:36:27	0
1910	Thanks; merged.	2017-02-20 14:36:38	1.0	2017-02-20 14:36:27	0
1911	Jenkins, retest this please	2017-02-23 10:28:10	0.0		1
1912	"@yrodiere I think I addressed all your comments and we should be on the same page regarding this feature. The first 2 commits should probably be squashed after review.

As for the build status, the failure looks unrelated."	2017-04-07 15:57:08	0.0		0
1913	Jenkins, retest this please	2017-04-10 07:45:40	0.0		1
1914	"@yrodiere I pushed a new version:
* squashed the 2 first commits
* added one commit to rename useAnd...
* added one commit to add lucene-queryparser to OSGi and distribution. It was already present in the WildFly modules."	2017-04-10 15:07:16	0.0		0
1915	"Great work!

Looks very good. The only detail I'm not convinced of is the starting point of the DSL: 

`qb.simpleQueryString()`

It feels a bit at odds with the other methods, but not having a better idea I merged it.

Proposal: let's post a dedicated blog to present / explain the feature and see if someone has a better name to offer.

Merged!"	2017-04-13 15:56:53	0.0		0
1916	"Maybe we could call this ""native"" queries instead of ""plain text"" queries? Granted, it would be less obvious that these queries are not ""type safe"", but the ""native"" keyword seems to fit quite well, especially when you consider native queries in JPA.

Also, we may not allow the same syntax for every indexing service. I see you plugged this to Elasticsearch's [simple query strings](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html), whose syntax is similar, but it probably has some differences. So, the word ""native"" would warn users about that issue."	2017-02-28 09:16:38	0.0		1
1917	"Following my suggestion above, ""text()"" would become ""nativeQuery"" or something like that. ""native"" is a Java keyword, unfortunately. I guess ""native$"" or ""native_"" are not something we can consider.

In any case, I think ""text"" is prone to error; it gives the impression this is the only full-text enabled query, which is wrong. I understand what we're trying to say is that the query definition will be textual, but it's ambiguous.

Some suggestions (if you don't like `nativeQuery`):

 * `parsed`
 * `queryString`
 * `fromString`"	2017-02-28 09:55:26	0.0		1
1918	"This is a bit clumsy.

So...:

 1. `defaultOperator(Operator.AND)` isn't much better
 2. `or()`/`and()` lack some context
 3. I guess `.conjunctive`/`.disjunctive` are a tad too obscure

If nobody finds a better option, I think I'd say we go for 1... Even though it's far from ideal."	2017-02-28 10:04:24	0.0		1
1919	It's `default_operator`, not `defaultOperator`. It may work in ES2, but I've seen cases where ES5 dropped such undocumented syntax, so we should stay away from such syntax.	2017-02-28 10:10:22	0.0		1
1920	This javadoc should be rephrased: the value is parsed, it's not analyzed by the field analyzers. Only part of it is actually analyzed.	2017-02-28 10:12:51	0.0		0
1921	This javadoc seems wrong; we can target any field, regardless of its type. We may want to warn users that queries apply on the bridged data, though (so dates may have a weird format, for instance).	2017-02-28 10:22:00	0.0		1
1922	"We don't pass the reference to the analyzer here... If I understand correctly, this is because we can't define per-field analyzers in Elasticsearch's `simple_query_string`. We only have one global `analyzer` parameter.

Maybe this should be documented? Users may be surprised when they write:

```
searchFactory.buildQueryBuilder().forEntity( MyEntity.class ).overridesForField( ""foo"", ""someQueryAnalyzer"" ).get()
    .text().forField( ""foo"" ).matching( ""blah blah"" ).createQuery();
```

... and the resulting query doesn't use the overridden analyzer.

Maybe we should also support the case where there's only one field, and throw an error if there are multiple fields with different analyzers?"	2017-02-28 10:23:50	0.0		1
1923	Maybe we should add something to the Elasticsearch integration doc, to mention that the syntax there is the one for `simple_query_string` (which may be slightly different, at least in the future).	2017-02-28 10:27:13	0.0		1
1924	"From what I can see above, `overridingRemoteAnalyzerName` is already in the `analyzers` set, so we could just pass the set to the logger method (if you made the parameter a `Collection`, that is :grin: )

```java
			analyzers.add( queryRemoteAnalyzerName ); // Value added to the set here
 			if ( !queryRemoteAnalyzerName.equals( originalRemoteAnalyzerName ) ) {
 				if ( overridingRemoteAnalyzerName == null ) {
 					overridingRemoteAnalyzerName = queryRemoteAnalyzerName; // Same value put into overridingRemoteAnalyzerName here
 				}
```"	2017-04-10 08:06:44	0.0		1
1925	"Should probably be ""Build a query from a simple query string""... ? Same for the `@return` below."	2017-04-10 08:09:36	0.0		1
1926	"Same here, should be about a ""simple query string"" rather than a ""plain text query"", since we decided to use that terminology."	2017-04-10 08:10:45	0.0		0
1927	Copy/paste error here, it's not a term query	2017-04-10 08:11:10	0.0		1
1928	Copy/paste error here, it's not a term query	2017-04-10 08:11:29	0.0		1
1929	"`withAndAsDefaultOperator`, maybe? This would make the DSL feel a bit more natural: ""simple query string, on field 'foo', with 'and' as default operator, matching 'bar'""
It's just a suggestion, I don't mean to argue about this. Ignore it if you don't like it."	2017-04-10 08:15:18	0.0		0
1930	Well spotted, fixed.	2017-04-10 14:05:19	0.0		0
1931	Yup, fixed.	2017-04-10 14:05:33	0.0		0
1932	Fixed.	2017-04-10 14:05:51	0.0		0
1933	Fixed, sorry about that.	2017-04-10 14:06:02	0.0		0
1934	Fixed, sorry about that.	2017-04-10 14:06:05	0.0		0
1935	Done.	2017-04-10 14:06:13	0.0		0
1936	Note: this should be backported to 5.6.	2017-02-16 17:22:20	1.0	2017-02-16 23:31:37	0
1937	@yrodiere looks good, just push it.	2017-02-16 17:47:59	1.0	2017-02-16 23:31:37	0
1938	merged, great find!	2017-02-16 23:37:38	1.0	2017-02-16 23:31:37	0
1939	Jenkins, test this please	2017-02-17 08:52:10	0.0		1
1940	Jenkins, retest this please	2017-02-17 13:44:08	0.0		1
1941	Rebased and merged. And backported to 5.6. Thanks!	2017-02-17 15:30:07	0.0		0
1942	Jenkins, retest this please	2017-02-21 15:41:04	0.0		1
1943	thanks, merged it. Including the deprecation, I agree with that.	2017-02-21 17:44:18	0.0		0
1944	merged, thanks! I rename that method and removed the unwrapping.	2017-02-17 00:25:06	0.0		0
1945	"there's no need to unwrap ?
I guess the `getFactory` method should be renamed."	2017-02-17 00:11:09	0.0		0
1946	Jenkins, retest this please	2017-02-14 10:20:21	0.0		1
1947	merged	2017-02-20 14:12:03	0.0		0
1948	"I've been trying to understand this but couldn't figure out why this is necessary :-/

@emmanuelbernard @hferentschik @gunnarmorling ? You all are the generics gurus..

In case we have to integrate this, will it cause runtime compatbility issues with our previous signature?
(I think not, as our API on the interface is still the generic one... but that just makes it even more odd)"	2017-02-20 12:13:22	0.0		0
1949	"@Sanne From what I understand of type erasure, my code should be strictly equivalent to the previous code.
I can have a try if you want, compile a small application against 5.6 and then try to run it against 5.7?"	2017-02-20 13:24:26	0.0		0
1950	"thanks @yrodiere, no need. I'll soon test this and other integrations with a previous build of Infinispan and I'm quite optimistic.

I'll merge this for now so we can move on, but if someone knows I'd be interested.. looks like a Java compiler bug, but then again it would be quite a coincidence that both javac and the Eclipse compiler have the same quirk."	2017-02-20 13:57:49	0.0		0
1951	I just force-pushed an update to solve a dependency convergence issue. Hope this will fix the build...	2017-02-13 11:45:52	0.0		0
1952	"looks great! Thanks for researching this, feels much better.

Testing now.."	2017-02-13 11:49:01	0.0		0
1953	"there's some problem with the dependencies, I guess caused by the exclusions you had to add.

```
Tests in error: 
  JestClientTest.authentication:163 » NoClassDefFound com/fasterxml/jackson/data...
  JestClientTest.multipleHosts:122 » NoClassDefFound com/fasterxml/jackson/datab...
  JestClientTest.simple:69 » NoClassDefFound com/fasterxml/jackson/databind/Json...

```"	2017-02-13 12:00:46	0.0		1
1954	"@Sanne Solved, sorry about that.
So in the end, there were two issues:

 * a dependency convergence between wiremock and jest
 * a dependency convergence within jackson itself (jackson-databind 2.6.1 depends on jackson-annotations 2.6.0, go figure...), which wiremock depends on"	2017-02-13 14:02:41	0.0		0
1955	merged! thanks. I'll backport as well.	2017-02-13 23:12:32	0.0		0
1956	Jenkins, retest this please	2017-02-10 21:12:52	0.0		1
1957	thanks, merged!	2017-02-13 11:45:55	0.0		0
1958	"Actually, I'm not sure whether we should backport this to 5.6 or not... Against what version do we want to check version x.y.z? The latest `x.(y-1).*.Final`? Or simply the previous `*.*.*.Final`?
In https://developer.jboss.org/wiki/ReleasingHibernateSearch I stated ""the latest `x.(y-1).*.Final`"", which would mean we don't want to backport this to 5.6."	2017-02-09 15:33:41	1.0	2017-02-09 16:09:42	1
1959	I'll not backport it. Those ships have sailed..	2017-02-09 16:16:31	1.0	2017-02-09 16:09:42	0
1960	merged, thanks!	2017-02-09 16:16:39	1.0	2017-02-09 16:09:42	0
1961	thanks! merged it	2017-02-13 11:07:57	1.0	2017-02-13 11:06:40	0
1962	and backported	2017-02-13 11:28:35	1.0	2017-02-13 11:06:40	0
1963	hostname and port? Looka like a copy/paste error	2017-02-09 18:02:49	1.0	2017-02-13 11:06:40	1
1964	"I'm confused about the ""e.g."" usage here. You say it has to be global, but then you make an example which uses an index-specific property.

(I understand the reasons, just pointing out the explanation is oddly phrased)"	2017-02-09 18:05:44	1.0	2017-02-13 11:06:40	0
1965	"same issue with ""e.g."" here"	2017-02-09 18:06:26	1.0	2017-02-13 11:06:40	0
1966	what if the username is non-empty, but the password is. Would that be valid or should we warn / ignore?	2017-02-09 18:08:32	1.0	2017-02-13 11:06:40	0
1967	so a zero-length string would disable it? Should we rather check for not-null, or is that going to be all the same for ES?	2017-02-09 18:09:42	1.0	2017-02-13 11:06:40	0
1968	Would be nice to log a WARN at boostrap about this?	2017-02-09 18:11:29	1.0	2017-02-13 11:06:40	0
1969	"I just copy-pasted the phrasing from other properties that have been here for a long time (`SERVER_URI` for instance, but practically every other ES property has a similar phrasing). The example is supposed to make it clear that you can only use `default` and not an index name. But you still have to include `default` because we were expecting to support defining it per index in the future.

I think it's supposed to mirror the phrasing for core Hibernate Search settings, e.g. `org.hibernate.search.cfg.Environment.LOCKING_STRATEGY`:

```
	 * Can be given globally or for specific indexes:
	 * <ul>
	 * <li><code>hibernate.search.default.locking_strategy=simple</code></li>
	 * <li><code>hibernate.search.Books.locking_strategy=org.custom.components.MyLockingFactory</code></li>
	 * </ul>
```

Or `org.hibernate.search.cfg.Environment.INDEX_BASE_PROP_NAME`:

```
	 * Option for setting the base directory for storing Lucene indexes when working with file-system based directories.
	 * To be given globally:
	 * <p>
	 * <code>hibernate.search.default.indexBase=/var/lucene/indexes</code>
```

I replaced the current phasing with something like that, without an example:

```
	 * To be given <b>globally</b> only (i.e. prefixed with {@code hibernate.search.default.}).
	 * <b>Cannot</b> be specified per index (e.g. {@code hibernate.search.myIndex.elasticsearch.username}).
	 * This limitation will be removed in a future version of Hibernate Search.
```

Is it better?"	2017-02-10 08:29:57	1.0	2017-02-13 11:06:40	0
1970	Same answer :)	2017-02-10 08:31:19	1.0	2017-02-13 11:06:40	0
1971	Right, thanks. Fixed.	2017-02-10 08:39:35	1.0	2017-02-13 11:06:40	0
1972	Right, I added a warning.	2017-02-10 09:13:42	1.0	2017-02-13 11:06:40	0
1973	I don't see how an empty-string username would make sense... But ok, I changed that to a null check.	2017-02-10 09:23:45	1.0	2017-02-13 11:06:40	0
1974	Users will get an authentication error if the password is invalid (empty or non-matching). At some point we have to trust the backend...	2017-02-10 09:26:50	1.0	2017-02-13 11:06:40	0
1975	+1	2017-02-10 11:13:04	1.0	2017-02-13 11:06:40	0
1976	My question was meant as a question, not a demand :) 	2017-02-10 11:13:40	1.0	2017-02-13 11:06:40	0
1977	"Ok, sorry. There is no particular check in Jest or the Apache HTTP Client, so I guess an empty string is propagated to ES as is. From my tests, ES rejects empty usernames:

```
$ curl -XGET ':password@localhost:9200/_cat?pretty'
{
  ""error"" : {
    ""root_cause"" : [ {
      ""type"" : ""security_exception"",
      ""reason"" : ""missing authentication token for REST request [/_cat?pretty]"",
      ""header"" : {
        ""WWW-Authenticate"" : ""Basic realm=\""shield\"" charset=\""UTF-8\""""
      }
    } ],
    ""type"" : ""security_exception"",
    ""reason"" : ""missing authentication token for REST request [/_cat?pretty]"",
    ""header"" : {
      ""WWW-Authenticate"" : ""Basic realm=\""shield\"" charset=\""UTF-8\""""
    }
  },
  ""status"" : 401
}
```"	2017-02-10 13:48:19	1.0	2017-02-13 11:06:40	1
1978	It seems there's a conflict. I'll rebase.	2017-02-14 08:00:29	1.0	2017-02-15 14:56:00	1
1979	Rebased on master just now.	2017-02-14 08:13:29	1.0	2017-02-15 14:56:00	0
1980	"Could you add javadoc to the interfaces in the public API?

- org.hibernate.search.elasticsearch.analyzer.definition.ElasticsearchAnalysisComponentDefinitionContext
- org.hibernate.search.elasticsearch.analyzer.definition.ElasticsearchAnalysisDefinitionRegistryBuilder
- org.hibernate.search.elasticsearch.analyzer.definition.ElasticsearchAnalyzerDefinitionContext
- org.hibernate.search.elasticsearch.analyzer.definition.ElasticsearchAnalyzerDefinitionWithTokenizerContext
- org.hibernate.search.elasticsearch.analyzer.definition.ElasticsearchTypedAnalysisComponentDefinitionContext"	2017-02-14 10:40:57	1.0	2017-02-15 14:56:00	1
1981	"great! merged.

I did two last changes:
 - marked the new DSL as experimental, so we can change it in the next minor with more flexibility.
 - changed the JIRA description as the text implied we'd introduce a `Service` (literally) but it's not one."	2017-02-15 14:58:29	1.0	2017-02-15 14:56:00	0
1982	"I'm ok to change this, but TBH I always thought it was weird that you would create `LOG` instances... traditionally we've always just called them `log`, as it's not really a constant (it's a mutable object).

No reason to amend the PR of course."	2017-02-13 23:40:40	1.0	2017-02-15 14:56:00	0
1983	"True, we could consider that loggers are output streams, and as such they can be considered ""mutable"" as `System.out` for instance.
I've always followed the rule ""static final => capital case"", but there's no real reason beyond consistency. And it seems I was wrong in thinking ""LOG"" is more common: we have 163 occurrences of ""static final Log log"" vs. 72 occurrences of ""static final Log LOG"".
Maybe I should try and rename all those loggers to ""log""... one day... In the meantime, I'll remember to name them ""log""."	2017-02-14 08:09:44	1.0	2017-02-15 14:56:00	0
1984	FYI, we're renaming them to `LOG` in HV.	2017-02-14 08:26:28	1.0	2017-02-15 14:56:00	0
1985	"I have no strong opinion, for the sake of sharing my view:

- the new LOG ones are the ones you created, I simply didn't complain before but they looked odd ;-)
- I definitely prefer smaller PRs when possible, as my main problem is not to find 3 hours to review PRs, but to find 3 contiguous uninterrupted hours."	2017-02-14 09:50:09	1.0	2017-02-15 14:56:00	0
1986	why not using `boolean` (lowercase) ?	2017-02-14 10:41:45	1.0	2017-02-15 14:56:00	1
1987	I was wondering why the String parameter has a vararg option, and the others don't. I guess you have a specific analyzer need example in mind?	2017-02-14 10:43:12	1.0	2017-02-15 14:56:00	1
1988	could you use `ClassLoaderHelper.instanceFromName` instead ? It would provide more sanity checks and errors consistent with other services.	2017-02-14 10:50:22	1.0	2017-02-15 14:56:00	1
1989	"""if your"" seems a typo. ""If you"" ?"	2017-02-14 11:05:37	1.0	2017-02-15 14:56:00	1
1990	same typo	2017-02-14 11:05:45	1.0	2017-02-15 14:56:00	1
1991	same typo	2017-02-14 11:05:55	1.0	2017-02-15 14:56:00	1
1992	same here. Could you use `ClassLoaderHelper.instanceFromName` instead?	2017-02-14 11:19:22	1.0	2017-02-15 14:56:00	1
1993	"- you need a space just before `set to value`.
- maybe better to quote the Environment.ANALYZER_DEFINITION_PROVIDER with single quotes?
- I'd not request ""must not throw any exception"", seems redundant. Also a bit scary.. will the data center blow up if an OOM happens in there?
- optional alternative: may be more useful to remind that a public, no-argument constructor is expected."	2017-02-14 11:24:06	1.0	2017-02-15 14:56:00	1
1994	"`ReflectionHelper.createInstance` below allows the use of factory classes with the `@Factory` annotation. It seems useful in this particular case, but it won't work well with `ClassLoaderHelper.instanceFromName`.
Did you mean I should drop the `@Factory` support entirely?"	2017-02-14 11:39:21	1.0	2017-02-15 14:56:00	0
1995	"interesting idea, I wasn't thinking of `@Factory`. The checks I was thinking of are the ones provided by 

- org.hibernate.search.util.impl.ClassLoaderHelper.verifySuperTypeCompatibility(Class<T>, Object, Class<?>, String)
- org.hibernate.search.util.impl.ClassLoaderHelper.checkHasNoArgConstructor(Class<?>, String)
- org.hibernate.search.util.impl.ClassLoaderHelper.checkClassType(Class<?>, String)

I guess you can leave the `@Factory`, it looks good to have it. We probably should unify the two approaches in a follow-up improvement.
"	2017-02-14 11:47:32	1.0	2017-02-15 14:56:00	1
1996	Yes, there are some analyzer types that have string array parameters. I didn't see any with number or boolean arrays, though. But you're right, we may as well avoid bad surprises: I'll add a vararg version for other parameter types.	2017-02-14 12:57:36	1.0	2017-02-15 14:56:00	0
1997	No particular reason. Fixed.	2017-02-14 12:58:07	1.0	2017-02-15 14:56:00	0
1998	Fixed.	2017-02-14 12:59:50	1.0	2017-02-15 14:56:00	0
1999	Fixed.	2017-02-14 12:59:55	1.0	2017-02-15 14:56:00	0
2000	Fixed.	2017-02-14 12:59:59	1.0	2017-02-15 14:56:00	0
2001	"Fixed. I also fixed the similar message for Elasticsearch.
New version:

```
	@Message(id = 329, value = ""Property '"" + Environment.ANALYZER_DEFINITION_PROVIDER + ""' set to value '%1$s' is invalid.""
			+ "" The value must be the fully-qualified name of a class with a public, no-arg constructor in your classpath.""
			+ "" Also, the class must either implement LuceneAnalyzerDefinitionProvider or expose a public,""
			+ "" @Factory-annotated method returning a LuceneAnalyzerDefinitionProvider."")
```"	2017-02-14 13:11:33	1.0	2017-02-15 14:56:00	0
2002	"It looks like - if I'm interpreting this right - that you expect the annotations to override the configuration.
Could you explain the rationale?"	2017-02-15 11:39:59	1.0	2017-02-15 14:56:00	1
2003	"BTW the comment on line 80 mentioned ""fetched from the integrator"" so that's not consistent."	2017-02-15 11:59:33	1.0	2017-02-15 14:56:00	1
2004	(same question applies to the override() test in LuceneAnalyzerDefinitionProviderTest)	2017-02-15 12:00:03	1.0	2017-02-15 14:56:00	0
2005	"About the comment: the code actually fetches the analyzer reference from the integrator, so technically the comment is correct. The integrator is not the analyzer provider. Maybe you have a better wording in mind?

The rationale behind override is you mentioned (initially) that we could have a ""default"" provider that would add some common analyzers. If we don't make `@AnalyzerDef` override definitions from the provider, on existing applications the introduction of those default definitions might change analyzer definitions without the users knowing about it. For instance if we introduce a definition for ""standard"" and the user already has an `@AnalyzerDef` named ""standard"".

The other solution would be to forbid analyzer overrides completely (throw an exception), but then again that would mean breaking compatibility with existing code if we have default analyzer definitions.
Also, I suspect we'll need to support overrides at some point, especially when we'll handle index-scoped analyzer providers."	2017-02-15 12:50:37	1.0	2017-02-15 14:56:00	1
2006	test this please	2017-02-07 09:58:26	1.0	2017-02-07 11:08:43	1
2007	"> test this please

nevermind, this had been triggered normally."	2017-02-07 09:59:02	1.0	2017-02-07 11:08:43	1
2008	"Are we absolutely sure that this class won't change or (more importantly) get repackaged somewhere else before ORM 6.0? Just asking because of what happened in ORM 5.2...

It would be a shame that some previous version of Search ends up non-compatible with a new (possibly micro) version of ORM just because we wanted to get rid of a warning..."	2017-02-07 09:11:10	1.0	2017-02-07 11:08:43	0
2009	"no we're not absolutely sure, but this class has been there for ~10 years.

As soon as the 5.7 final is out we'll set up CI jobs, to discuss with the ORM team any breaking changes.

Getting rid of the warning is quite important, both from performance and user confusion perspective, and I couldn't find a better solution.

One alternative would be to patch ORM to introduce an explicit SPI level contract for this, but then you'd need to bump the requirement to > 5.2.8 ... I prefer this solution."	2017-02-07 09:42:05	1.0	2017-02-07 11:08:43	0
2010	Ok then, merging. Thanks!	2017-02-07 11:09:05	1.0	2017-02-07 11:08:43	0
2011	Jenkins, test this please	2017-02-07 08:53:13	1.0	2017-02-07 11:04:28	0
2012	"> I suppose you created this ticket following performance testing in Infinispan?

I have been busy with performance testing, but actually not (yet) with Infinispan..

It's actually amazing what a difference this small change makes: we have a flaw in our container based performance tests, which triggers an occasional deadlock in H2 when we're ""too fast"". After this change, that test fails much more frequently (from ""almost never"" to ""almost all the time"" .. on my pc at least)."	2017-02-07 09:44:54	1.0	2017-02-07 11:04:28	0
2013	"> I have been busy with performance testing, but actually not (yet) with Infinispan..

So you used the existing performance testing project from our own code? Great :)

> After this change, that test fails much more frequently (from ""almost never"" to ""almost all the time"" .. on my pc at least).

I suppose there's no way to fix this? Maybe upgrade H2? It would be a shame if, after merging this PR, our CI became useless because it would always fail..."	2017-02-07 09:53:17	1.0	2017-02-07 11:04:28	1
2014	"> I suppose there's no way to fix this? Maybe upgrade H2? It would be a shame if, after merging this PR, our CI became useless because it would always fail...

Yes, let's keep an eye on this.. I hope not as CI is quite slow. let's not upgrade it! :D More seriously, yes fixing the test is on my watchlist..

> So you used the existing performance testing project from our own code? Great :)

I have some more perf tests as well, being developed. Will need to tidy them up eventually and share, it's currently a mess of experiments and various branches trying different things, e.g. different combinations of dependencies.

Moving ahead we'd want to have nightly performance regression reports built by CI.
"	2017-02-07 09:57:19	1.0	2017-02-07 11:04:28	0
2015	"Merged, thanks!

We'll see how well the CI behaves and prioritize this H2 locking bug accordingly."	2017-02-07 11:05:32	1.0	2017-02-07 11:04:28	0
2016	Jenkins, test this please	2017-02-07 08:48:53	1.0	2017-02-07 11:04:28	0
2017	Merged, thanks!	2017-02-07 11:05:37	1.0	2017-02-07 11:04:28	0
2018	I pushed an improvement.	2017-02-03 17:01:33	1.0	2017-02-06 12:26:58	0
2019	"> Here's an error I noticed while reading through the changes.

From now on, you shall be remembered as ""eagle eye Yoann"" :+1: "	2017-02-03 21:59:32	1.0	2017-02-06 12:26:58	0
2020	"I noticed as well, but came to the same conclusions. `TikaBridge` has also an uncertain future IMO: I like the functionality it provides but it brings too many dependencies; I'd like to use it as an example of how we might be able to tightly integrate with ""advanced bridges"", including possibly having their own annotations, yet have these live in a separate module so that we can isolate the dependencies properly. This might be a strong requirement for producing Jigsaw modules..

In short, I'd not see the benefit on opening new tickets for now."	2017-02-06 11:31:46	1.0	2017-02-06 12:26:58	1
2021	"Merged! Thanks.
And ok to look at TikaBridge again for HSearch 6.0."	2017-02-06 12:27:45	1.0	2017-02-06 12:26:58	0
2022	There's an extra comma here.	2017-02-03 17:13:35	1.0	2017-02-06 12:26:58	0
2023	thanks, fixed!	2017-02-03 21:58:01	1.0	2017-02-06 12:26:58	0
2024	"@Sanne If understand correctly, we were trying to detect failures over a loopback interface?
If so, then yes, this is probably a bit too much for tests.
Merged, thanks!"	2017-02-03 14:51:54	1.0	2017-02-03 14:51:34	0
2025	"yes that's right. Even worse, it was using the ""actual"" network interface for that, while we are using the LOOPBACK protocol which is just a static hashmap to avoid trouble with setting up the network interfaces correctly for it.. "	2017-02-03 17:04:59	1.0	2017-02-03 14:51:34	0
2026	"Looks nice, and +1 to backport: I see no significant risk.

Minor question: why did you opt for `org.hibernate.search.elasticsearch.impl.JestAPIFormatter` to be a Service?

(I couldn't test & build it yet, still figuring out what's wrong with my machine..)"	2017-02-02 11:46:16	1.0	2017-02-02 13:35:16	0
2027	"> Minor question: why did you opt for org.hibernate.search.elasticsearch.impl.JestAPIFormatter to be a Service?

Because it needs access to `GsonService`. I guess I could have made it a constructor parameter, but users would still have had to request/release an instance of `GsonService` (instead of `JestAPIFormatter` right now), so it wouldn't have been simpler in the end."	2017-02-02 12:33:10	1.0	2017-02-02 13:35:16	0
2028	merged on master and 5.6	2017-02-02 14:12:47	1.0	2017-02-02 13:35:16	0
2029	s/FOUNT/FOUND/	2017-02-02 10:22:27	1.0	2017-02-02 13:35:16	0
2030	No need for the `super()` here.	2017-02-02 10:22:55	1.0	2017-02-02 13:35:16	1
2031	Fixed.	2017-02-02 11:10:16	1.0	2017-02-02 13:35:16	0
2032	I'll remove it, but I seriously don't know what's the problem with this.	2017-02-02 11:10:25	1.0	2017-02-02 13:35:16	0
2033	backported as well.	2017-02-02 14:13:30	1.0	2017-02-01 21:49:00	0
2034	@anistor this is looking good to me. Do you want to try it out on Infinispan to see how it works in practice?	2017-02-03 11:30:33	0.0		0
2035	I'm trying it out now. Might now have results until later today (as we have long planning meeting today).	2017-02-03 14:44:57	0.0		0
2036	@anistor Any news on this?	2017-02-08 13:43:12	0.0		0
2037	Doesn't seem very dangerous; I'll merge it, so we can keep working with minimal conflicts. @anistor will be able to open bugs as needed.	2017-02-09 19:30:32	0.0		0
2038	Actually it seems some plugin upgrades are required to support Java 8 code. Investigating.	2017-01-31 17:57:35	0.0		0
2039	"@Sanne It works, at last... Here's a proof, a build based on this PR that also adds some lambdas: https://travis-ci.org/yrodiere/hibernate-search/builds/197313903

Please note that I also had to fix HSEARCH-2571, which involves many maven plugin upgrades. I didn't test the release scripts. I'm not sure whether it's possible to run those in an isolated environment... ?"	2017-02-01 15:00:02	0.0		0
2040	TODO: when this will be merged, see https://github.com/yrodiere/hibernate-search/commit/a62a9e2e31edbb31f83ee3b893afb43b19659c42#commitcomment-20699212	2017-02-01 16:50:10	0.0		0
2041	"interesting, building this branch crashes my JVM.. good luck debugging that :D

```

 A fatal error has been detected by the Java Runtime Environment:

  SIGSEGV (0xb) at pc=0x00007f216dd86b84, pid=32512, tid=0x00007f216eaf7700

 JRE version: OpenJDK Runtime Environment (8.0_92-b14) (build 1.8.0_92-b14)
 Java VM: OpenJDK 64-Bit Server VM (25.92-b14 mixed mode linux-amd64 compressed oops)
 Problematic frame:
 C  [libc.so.6+0x90b84]  __memcpy_sse2_unaligned_erms+0x1a4

 Core dump written. Default location: /home/sanne/workspaces/hibernate/hibernate-search-root/core or core.32512

 An error report file with more information is saved as:
 /home/sanne/workspaces/hibernate/hibernate-search-root/hs_err_pid32512.log

```"	2017-02-01 20:32:56	0.0		1
2042	"regarding the release scripts: yes I'm quite sure something will break there, but since we plan to release a CR and have no strict deadline we can cross fingers.
I think we can in theory test the process, by having Jenkins not push to the repository its changes (nor tags), and then delete the directory from sourceforge. Not sure about the documentation.

I'd say let's just cross fingers."	2017-02-01 20:35:57	0.0		1
2043	"@Sanne It doesn't crash mine... I'm using a slightly more recent version of the JDK, though (u101). The newest is u121, by the way.
I'm trying u92 right now. Could you please try the most recent JDK, and if it still fails provide the error report file? Thanks."	2017-02-02 09:09:33	0.0		0
2044	@Sanne Works for me even with 1.8.0_92-b14 with the exact same architecture... Are you able to reproduce it consistently?	2017-02-02 09:19:11	0.0		0
2045	"""almost consistently"": approximately 50% chance it triggered, last night on my workstation.. Switching hardware now to rule out deeper issues.. not that I have much choice, I need to be in the office today, so laptop it is."	2017-02-02 11:55:48	0.0		0
2046	Ok, I'm running the build on 1.8.0_92-b14 in a loop. I'll keep you updated.	2017-02-02 12:39:12	0.0		0
2047	"whoa, same failure on the laptop. That starts to look like unlikely to be related to hardware issues..

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f6d7728b711, pid=11965, tid=0x00007f6d77f42700
#
# JRE version: OpenJDK Runtime Environment (8.0_92-b14) (build 1.8.0_92-b14)
# Java VM: OpenJDK 64-Bit Server VM (25.92-b14 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# C  [libc.so.6+0x14f711]  __memmove_avx_unaligned_erms+0x211
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /home/sanne/workspaces/hibernate/hibernate-search-root/hs_err_pid11965.log

```"	2017-02-02 14:16:46	0.0		1
2048	"> whoa, same failure on the laptop.

Still nothing on mine :/
Nothing of interest in `/home/sanne/workspaces/hibernate/hibernate-search-root/hs_err_pid11965.log`?
"	2017-02-02 14:22:37	0.0		0
2049	merged, thanks!	2017-02-02 16:00:52	0.0		0
2050	"What is the value in ""not checking"" at all - even not for index existance?

It's not that Hibernate ORM can start when there's no database.."	2017-01-31 16:47:02	1.0	2017-01-31 16:58:09	0
2051	"> What is the value in ""not checking"" at all - even not for index existance?

The only use case I see is mentioned in the ticket: a user wanting to create the index himself, but after HS started. Strange, but then I guess using `NONE` is also quite strange to begin with...

> It's not that Hibernate ORM can start when there's no database..

True, but that's not particularly because of HBM2DDL. So if we want to mirror that behavior, we shouldn't try to check the index existence inside our strategy."	2017-01-31 17:49:14	1.0	2017-01-31 16:58:09	0
2052	ok, yes I had merged it after reading Alex Laptseu's comments, but .. I agree it's strange.	2017-01-31 18:04:22	1.0	2017-01-31 16:58:09	0
2053	"To be discussed. The main argument against this change, in my opinion, is that we already released those artifacts in version 5.7.0.x, for instance 5.7.0.CR1.
But, really, why would someone depend on these artifacts?"	2017-01-30 16:58:58	0.0		0
2054	"These modules already have the ""skip deploy"" property enabled. Did you find them in the Maven central repositories?"	2017-01-30 17:30:08	0.0		0
2055	"You're right... I saw [this folder](http://repo1.maven.org/maven2/org/hibernate/hibernate-search-integrationtest-osgi/) and failed to check inside, but this is actually only a remnant of some alpha releases.
Sorry about that, closing."	2017-01-30 17:59:52	0.0		0
2056	"I tried it locally: works fine and looks great :+1: 

Looking forward to be able to merge it."	2017-01-31 17:40:04	0.0		0
2057	@Sanne it's ready for review!	2017-02-07 19:53:23	0.0		0
2058	looks great! One doubt, I didn't double-check.. is the output going to be in the same location, especially for e.g. the release scripts to upload them still correctly?	2017-02-09 16:57:54	0.0		0
2059	merged, thanks!	2017-02-09 17:17:27	0.0		0
2060	@Sanne yes, everything is already taken care of, in the assembly and in the release scripts. We already did one release of HV with the new documentation.	2017-02-09 17:47:51	0.0		0
2061	It's so secondary I feel bad to mention it, but the other property names below have a hyphen before the `dir` keyword, so maybe this should be `base-output-dir`?	2017-02-09 12:32:02	0.0		1
2062	Also, about the value of this property, didn't you say you were going to remove the `/en-US` part in because we don't translate the doc anyway? For consistency?	2017-02-09 12:47:47	0.0		1
2063	"Yeah, it's mostly because I don't want to change the hierarchy on the website and the stable URL of the documentations.

I fixed the dir issue (and a small other one I didn't notice before) and force pushed an update."	2017-02-09 14:13:22	0.0		0
2064	merged, in 5.7 exclusively.	2017-01-26 19:03:57	0.0		0
2065	thanks! merged	2017-01-26 19:17:28	0.0		0
2066	Caution: we'll have to merge this into 5.7, too.	2017-01-25 14:23:36	1.0	2017-01-25 14:43:43	0
2067	merged on both. Thanks!	2017-01-25 14:44:32	1.0	2017-01-25 14:43:43	0
2068	Jenkins, test this please	2017-01-20 20:23:54	0.0		0
2069	merged, thanks! Just added two trivial commits	2017-01-22 00:22:13	0.0		0
2070	"there's a short version for that:

    Boolean.getBoolean( ""org.hibernate.search.fail_on_unreleased_service"" );"	2017-01-20 23:16:43	0.0		0
2071	"the wrapper needs to be synchronized here, like the original method which you're inlining now.
Failing to do so might expose you to a service instance to increment its usage counter during this stop operation for a legitimate usage, and yet throw the exception (or log the warning).

It's extremely unlikely as we'd be shutting down anyway.. but it's in theory possible if e.g. a service is needed to perform a clean teardown.
I'll fix that."	2017-01-21 23:46:24	0.0		1
2072	Nice! Merged.	2017-01-20 16:37:32	1.0	2017-01-20 16:37:27	0
2073	"@Sanne By the way, the ticket states ""When doing this, consider removing the workaround for issue HHH-11309: we added ByteBuddy to the OSGi dependencies in the features file as it was not listed optional."".
Did you decide against removing the workaround?"	2017-01-20 16:40:10	1.0	2017-01-20 16:37:27	0
2074	"right, I decided to not remove that. Sorry should have commented.

By keeping bytebuddy people can choose if they want to use it ;)"	2017-01-20 16:43:06	1.0	2017-01-20 16:37:27	0
2075	"> we used to allow an @IndexedEmbedded on a property b of type B to include paths that were not included in type B. See the test for an example.
I think this should be forbidden, mainly because it feels like a violation of encapsulation to me, but also because the current behavior of @ContainedIn will not work well with such setups.

That's a very interesting point. From one side, I agree with you that this shouldn't happen. On the other, I can see how someone needing to ""fine tune"" things might want to do that, so if we ""fix"" it by not doing it, we might need to introduce a specific feature for such a mapping.

You guessed right I don't think we should merge the second change at this stage; could you split that in its own issue, so then we can decide if it's material for 6?"	2017-01-17 22:32:43	0.0		1
2076	"I guess the culprit is to clarify if `@IndexedEmbedded(includePaths)` is a _narrowing_ filter, or indicative.

When creating it I strictly had the _narrowing_ idea in mind, but I can see how the _include_ Paths terminology might have misled some people. For what it's worth, I realize this feature has been around for some time but I still feel like it's ""bolted on"" as we never revisited it from the first POC.. it's been a long time that I want to rethink the whole DocumentBuilder process from scratch."	2017-01-17 22:41:04	0.0		0
2077	"I've merged the first two commits, which resolve the ticket. 

@yrodiere don't throw the useful work of the other two commits away :)"	2017-01-17 23:28:10	0.0		0
2078	"This could be:

    return pathsEncounteredState.containsKey( path );"	2017-01-17 22:47:14	0.0		0
2079	contains commits from September & October last year :-/	2017-01-13 15:38:08	1.0	2017-01-16 17:32:37	0
2080	"@yrodiere thanks for the review. I addressed your remarks and added one more commit to solve 

 - https://hibernate.atlassian.net/browse/HSEARCH-2551"	2017-01-16 12:56:25	1.0	2017-01-16 17:32:37	0
2081	Merged. Thanks!	2017-01-16 17:33:06	1.0	2017-01-16 17:32:37	0
2082	"Wouldn't it be simpler to use `FullTextQuery<R>` here? (and in the next diff)
It would have the advantage of making `FullTextQueryImpl` also compatible with Hibernate ORM 5.2.3 and lower, but I guess it's irrelevant because we have to introduce incompatibilities in other places (`FullTextSharedSessionBuilderDelegator.java` in particular)."	2017-01-16 10:26:01	1.0	2017-01-16 17:32:37	1
2083	"So I reckon this is not the solution you found when discussing the issue with the ORM team?
I solved the issue a bit differently when I worked on the upgrade (without knowing you already were working on it): https://github.com/yrodiere/hibernate-search/commit/440297be4ea9e206f906e6f2bd2e417a6d211a21 ([the build passes on Travis](https://travis-ci.org/yrodiere/hibernate-search/builds/192311735)).
Not sure it's good enough, but at least it wouldn't require copying a Hibernate ORM file."	2017-01-16 10:34:42	1.0	2017-01-16 17:32:37	0
2084	"Judging from the code in `org.hibernate.internal.SessionFactoryImpl.buildCurrentSessionContext()`, the value ""jta"" would achieve the same effect while being a bit more future-proof (since `JTASessionContext` is an internal class).
Or is there a particular reason to reference the class explicitly?"	2017-01-16 10:43:02	1.0	2017-01-16 17:32:37	1
2085	The commit message seems to be missing a word; maybe it's `HHH-11394`?	2017-01-16 10:47:13	1.0	2017-01-16 17:32:37	0
2086	"By the way, shouldn't all commits containing fixes related to the ORM version bump be squashed into a single commit including both the version bump and the fixes?

I understood you wanted to always add tests after the fix so as not to confuse `git bisect`. Following the same reasoning, having separate commits here could also lead to test failures when running `git bisect`... Or is it alright in this case?
"	2017-01-16 10:49:54	1.0	2017-01-16 17:32:37	0
2087	"I agreed with Steve that we should move the `DdlTransactionIsolatorTestingImpl.java` file to ORM testing utilities, so we'll be able to depend on it. Not least, it means they'll fix the file in case there's need for further changes ;)

So I prefer to use a plain copy of their class, to that now I know which class exactly I need to move."	2017-01-16 11:22:28	1.0	2017-01-16 17:32:37	1
2088	"Why would that be simpler?

I didn't put a great deal of thought here, as both alternatives are deprecated, and we don't even implement it ;)"	2017-01-16 11:26:43	1.0	2017-01-16 17:32:37	0
2089	"> Or is there a particular reason to reference the class explicitly?

Yes, me not knowing about the `jta` configuration option ;-)

Thanks, I'll change it."	2017-01-16 11:31:46	1.0	2017-01-16 17:32:37	0
2090	right, thanks!	2017-01-16 11:43:56	1.0	2017-01-16 17:32:37	0
2091	"I didn't mean it as a strict rule, more like something to keep in mind.

New rule:
 - there never are strict rules.

I typically see value in keeping `git bisect` working fine; this is more valuable in maintenance branches as the likelyhood for it to be broken anyway during a large feature sprint is high.

There's also value in keeping changes indipendent. In this case I felt keeping each step of the ORM upgrade independent was making it clearer both for you to review, and for future reference.

If you feel strongly about it I can squash them all; what do you prefer?"	2017-01-16 11:47:42	1.0	2017-01-16 17:32:37	0
2092	"It would be simpler because `FullTextQuery` is what we want to implement in this file, while `org.hibernate.query.Query` is something we happen to inherit from indirectly. And that has the same name as another class we already reference in the same file.

Anyway, it's no important enough to argue about it... Let's keep it that way."	2017-01-16 12:19:52	1.0	2017-01-16 17:32:37	0
2093	I don't mind either solution. I just thought you may have overlooked this potential issue with `git bisect`, but obviously you haven't. So let's keep it that way :)	2017-01-16 12:23:19	1.0	2017-01-16 17:32:37	0
2094	"It seems this import was being used in the javadocs, and the build now fails.
See lines 153 and 159."	2017-01-16 13:34:49	1.0	2017-01-16 17:32:37	1
2095	"It's a small detail really, but since there's already an issue with this commit: `QueryImplementor` already extends `org.hibernate.query.Query` (and `org.hibernate.Query`, indirectly), so we could remove the explicit ` extends org.hibernate.query.Query<R>`. What do you think?
"	2017-01-16 13:36:10	1.0	2017-01-16 17:32:37	1
2096	damn :) I really need to figure out why such things don't fail to me locally.	2017-01-16 15:07:23	1.0	2017-01-16 17:32:37	0
2097	Interesting, I'm going to try that as it looks promising. FYI this wasn't possible in earlier versions of ORM 5.2.x, but those SPIs evolved a bit also based on our earlier attempts to migrate Search..	2017-01-16 15:17:41	1.0	2017-01-16 17:32:37	0
2098	"@Sanne @gsmet Thanks for the reviews. I think I addressed your concerns, is it ok to merge as is?

The additional comment is there: https://github.com/hibernate/hibernate-search/pull/1285/files#diff-0a572dae381a036d0fc969a5b45a2ac7R1043"	2017-01-13 10:52:28	1.0	2017-01-13 17:43:18	0
2099	@yrodiere +1	2017-01-13 11:23:40	1.0	2017-01-13 17:43:18	0
2100	Jenkins, retest this please	2017-01-13 12:43:36	1.0	2017-01-13 17:43:18	0
2101	Jenkins, retest this please	2017-01-13 14:22:14	1.0	2017-01-13 17:43:18	0
2102	Totally unrelated but couldn't we factorize this somehow? I mean a method taking the classes as parameters you directly call in your `@After`.	2017-01-13 10:24:09	1.0	2017-01-13 17:43:18	1
2103	Puzzling check. I guess I could find out the reasons by debugging the tests, but this means some comments here could be helpful?	2017-01-13 10:24:20	1.0	2017-01-13 17:43:18	0
2104	It's definitely not the only puzzling thing in this part of the code :D But yes, you're right.  I'll add a comment :)	2017-01-13 10:25:32	1.0	2017-01-13 17:43:18	0
2105	@Sanne it's probably something we should discuss for 6. The annotation metadata provider magic became a little too magic and obscure lately with Es and obscure bug fixing.	2017-01-13 10:29:09	1.0	2017-01-13 17:43:18	0
2106	Actually, this code is probably not even needed, since the default HBM2DDL strategy drops the schema when closing the factory. I'll remove the code and check that we really drop the schema.	2017-01-13 10:31:47	1.0	2017-01-13 17:43:18	0
2107	"@gsmet I just checked: the tables are dropped automatically after the test. So I removed this code. 
I should take more care when I copy/paste..."	2017-01-13 10:50:44	1.0	2017-01-13 17:43:18	0
2108	@yrodiere Infinispan does not implement this interface	2017-01-10 19:40:08	0.0		0
2109	Thanks @gustavonalle . I'll try to see whether it's actually possible for people to integrate a custom implementation of `EntityIndexBinding` within Hibernate Search, then.	2017-01-11 08:55:13	0.0		0
2110	"Cool! That's something I wanted to do from the beginning. Happy we need to do it to fix a real issue :).

@Sanne any objection against the SPI change? If not, it's good to go!"	2017-01-16 22:46:21	0.0		0
2111	Looks good! Merging..	2017-01-17 00:10:15	0.0		0
2112	frankly I think this change is silly but since you all find it confusing I'll apply ;)	2017-01-10 10:39:11	1.0	2017-01-10 10:38:20	0
2113	"Great, it even worked in the late evening :+1: 
Merged"	2017-01-12 00:01:58	0.0		0
2114	Jenkins, retest this please	2017-01-04 15:43:47	0.0		0
2115	Jenkins, retest this please	2017-01-04 15:47:12	0.0		0
2116	Jenkins, retest this please	2017-01-04 15:48:34	0.0		0
2117	Jenkins, retest this please	2017-01-04 16:00:45	0.0		0
2118	Test jenkins	2017-01-04 16:01:06	0.0		0
2119	"```
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:[55,62] method createHSQuery in interface org.hibernate.search.spi.SearchIntegrator cannot be applied to given types;
  required: no arguments
  found: org.apache.lucene.search.MatchAllDocsQuery,java.lang.Class<org.hibernate.search.test.query.facet.MultiValuedFacetingTest.StringArrayFacetEntity>
  reason: actual and formal argument lists differ in length
[ERROR] /home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:[82,62] method createHSQuery in interface org.hibernate.search.spi.SearchIntegrator cannot be applied to given types;
  required: no arguments
  found: org.apache.lucene.search.MatchAllDocsQuery,java.lang.Class<org.hibernate.search.test.query.facet.MultiValuedFacetingTest.StringCollectionFacetEntity>
  reason: actual and formal argument lists differ in length
[ERROR] /home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:[109,62] method createHSQuery in interface org.hibernate.search.spi.SearchIntegrator cannot be applied to given types;
  required: no arguments
  found: org.apache.lucene.search.MatchAllDocsQuery,java.lang.Class<org.hibernate.search.test.query.facet.MultiValuedFacetingTest.StringMapFacetEntity>
  reason: actual and formal argument lists differ in length
[ERROR] /home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:[137,62] method createHSQuery in interface org.hibernate.search.spi.SearchIntegrator cannot be applied to given types;
  required: no arguments
  found: org.apache.lucene.search.MatchAllDocsQuery,java.lang.Class<org.hibernate.search.test.query.facet.MultiValuedFacetingTest.NumberArrayFacetEntity>
  reason: actual and formal argument lists differ in length
[ERROR] /home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:[167,62] method createHSQuery in interface org.hibernate.search.spi.SearchIntegrator cannot be applied to given types;
  required: no arguments
  found: org.apache.lucene.search.MatchAllDocsQuery,java.lang.Class<org.hibernate.search.test.query.facet.MultiValuedFacetingTest.NumberCollectionFacetEntity>
  reason: actual and formal argument lists differ in length
[ERROR] /home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:[197,62] method createHSQuery in interface org.hibernate.search.spi.SearchIntegrator cannot be applied to given types;
  required: no arguments
  found: org.apache.lucene.search.MatchAllDocsQuery,java.lang.Class<org.hibernate.search.test.query.facet.MultiValuedFacetingTest.NumberMapFacetEntity>
  reason: actual and formal argument lists differ in length

```"	2017-01-04 13:42:30	1.0	2017-01-04 17:01:07	1
2120	"```
[INFO] Starting audit...
/home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:56:46: Found two spaces: '				.luceneQuery(  new MatchAllDocsQuery() )'
/home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:85:46: Found two spaces: '				.luceneQuery(  new MatchAllDocsQuery() )'
/home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:114:46: Found two spaces: '				.luceneQuery(  new MatchAllDocsQuery() )'
/home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:144:46: Found two spaces: '				.luceneQuery(  new MatchAllDocsQuery() )'
/home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:176:46: Found two spaces: '				.luceneQuery(  new MatchAllDocsQuery() )'
/home/sanne/workspaces/hibernate/hibernate-search-root/orm/src/test/java/org/hibernate/search/test/query/facet/MultiValuedFacetingTest.java:208:46: Found two spaces: '				.luceneQuery(  new MatchAllDocsQuery() )'
Audit done.


```"	2017-01-04 14:26:36	1.0	2017-01-04 17:01:07	0
2121	"@Sanne Thanks, it's fixed.

@gsmet The build now passes: https://travis-ci.org/yrodiere/hibernate-search/builds/188861591
I removed the commit that added the .travis.yml."	2017-01-04 14:34:53	1.0	2017-01-04 17:01:07	0
2122	@Hibernate-CI retest this please	2017-01-04 15:15:52	1.0	2017-01-04 17:01:07	0
2123	jenkins retest this please	2017-01-04 17:02:00	0.0		0
2124	retest this please	2017-01-04 17:07:11	0.0		0
2125	retest this please	2017-01-04 17:14:55	0.0		0
2126	Jenkins retest this please	2017-01-04 17:16:54	0.0		0
2127	Jenkins retest this please	2017-01-04 17:18:09	0.0		0
2128	Jenkins retest this please	2017-01-04 17:18:53	0.0		0
2129	Jenkins retest this please	2017-01-04 17:19:36	0.0		0
2130	Jenkins retest this please	2017-01-04 17:39:33	0.0		0
2131	@gsmet About using what's in [HV's CollectionHelper](https://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/java/org/hibernate/validator/internal/util/CollectionHelper.java#L98), ok. I'll introduce another method to create an iterable, though, so we can use foreach loops.	2017-01-04 10:01:37	0.0		1
2132	@Hibernate-CI retest this	2017-01-04 11:07:16	0.0		1
2133	Jenkins, retest this, please	2017-01-04 11:13:18	0.0		0
2134	Rebased and merged, thanks!	2017-01-04 13:41:21	0.0		0
2135	I think we usually use `i++`	2017-01-03 22:18:23	0.0		0
2136	Doesn't look related to this commit, does it?	2017-01-03 22:18:45	0.0		0
2137	I would vote for not using `Array` and introduce what's needed in `CollectionHelper` as we did for HV.	2017-01-03 22:23:41	0.0		0
2138	"It's related, since the commit makes it more likely that arrays will be used, but yeah, it addresses a different issue.

It's just nitpicking anyway: `initializeArray` is a no-op."	2017-01-04 09:55:50	0.0		0
2139	Seriously?	2017-01-04 09:56:04	0.0		0
2140	Done.	2017-01-04 11:14:45	0.0		0
2141	Jenkins, test this please	2017-01-03 17:10:20	0.0		0
2142	"I fixed a variable name for consistency and merged (s/multivalued/multiValued/).

Thanks."	2017-01-04 13:11:53	0.0		0
2143	"I'm not really convinced it's clearer. What is ""Parent""?"	2017-01-03 22:04:10	0.0		1
2144	s/facetting/faceting/ in the commit comment	2017-01-03 22:06:44	0.0		0
2145	s/facetting/faceting/ in the commit comment	2017-01-03 22:07:00	0.0		0
2146	Any reason why they are not private? I wouldn't expect them to be used elsewhere in the package.	2017-01-03 22:08:18	0.0		1
2147	Yeah, it's not a good idea to commit tests not working then ignore them. It's especially painful when you try to bisect something.	2017-01-03 22:09:30	0.0		1
2148	So we don't expect array of primitives here?	2017-01-03 22:25:48	0.0		0
2149	"Feel free to suggest a better name. I just meant to mention that it's not the property we're processing that is multi-valued, but its parent property.
What's important is that even though the parent is not multi-valued, the property we're processing still can be."	2017-01-04 09:39:51	0.0		0
2150	Done	2017-01-04 09:40:38	0.0		0
2151	"See my other PR: https://github.com/hibernate/hibernate-search/pull/1274

`@Facet` does not work if we don't also have a `@Field`. Which means supporting arrays of primitives for facets makes little sense if we have no support for arrays of primitives in the field bridges.

Plus, I wanted to discuss the whole solution of `Array.*` in a single PR, because it's likely to raise some objections."	2017-01-04 09:44:36	0.0		1
2152	Done.	2017-01-04 09:45:08	0.0		0
2153	"I originally used Hibernate ORM in the test, and Hibernate ORM cannot instantiate private classes.
But you're right, since the test doesn't use ORM anymore, there's no reason for making the class package-scoped.
Fixed."	2017-01-04 09:49:06	0.0		0
2154	Ok. I'll squash that into the previous commit.	2017-01-04 09:50:29	0.0		0
2155	Merged, thanks!	2017-01-04 12:49:21	1.0	2017-01-04 12:49:14	0
2156	Jenkins, test this please	2016-12-23 13:26:52	1.0	2017-01-20 23:03:46	0
2157	jenkins retest this please	2017-01-04 17:56:16	1.0	2017-01-20 23:03:46	0
2158	merged!	2017-01-20 23:03:59	1.0	2017-01-20 23:03:46	0
2159	"excellent, seems way more comprehensive than what I'd have expected. Love the good test coverage too!
merged"	2017-01-20 18:14:56	0.0		0
2160	I merged this earlier, sorry forgot to close.	2017-01-17 23:40:51	0.0		0
2161	"@gsmet Thanks! It should be ok now.
So we'll just wait for @Sanne to give his opinion on whether we can merge this in a CR1 after the holidays.
"	2016-12-21 16:29:07	0.0		0
2162	nice, merged it. Thanks!	2017-01-18 15:10:10	0.0		0
2163	"A space after the dot would be nice.

(Yes, this is the one for which I expect crazy eyes)"	2016-12-21 14:17:23	0.0		0
2164	Let's work directly on the analyzers here. We don't need to be on the reference level.	2016-12-21 14:17:51	0.0		0
2165	"This looks like fine after checking other parts but I found it a bit suspicious:

you seem to put some special effort to collect all references into a single collection, to then invoke the initialize method on all references at once.
I found that suspicious, as relying on that would mean we could have some issues with dynamic discovery of new entities (and hence new analyzers). Still, it doesn't look like the initialization method actually requires to have them all in one single collection."	2017-01-18 14:41:51	0.0		1
2166	"As far as I can tell, the actual problem is we create new instances of analyzers when dynamically adding new entities, even for analyzers we already discovered. So we end up having multiple references to the same analyzer, pointing to different instances of this analyzer. It's similar for Elasticsearch.
I guess it's not critical, unless you have dozens of analyzers and you dynamically add new entities every two seconds.

This is a pre-existing bug, though, not really the point of this PR. Solving it would require to initialize the `ConfigContext` analyzer registries with the content of the previous version of the search integrator.
Actually I did solve this bug in another branch I'm working on (for other reasons), but that branch is currently blocked because of [an unrelated, ongoing debate over what to do next](http://lists.jboss.org/pipermail/hibernate-dev/2017-January/015704.html).
You can see the solution on [my HSEARCH-2534 branch](https://github.com/yrodiere/hibernate-search/commits/HSEARCH-2534), the commit https://github.com/yrodiere/hibernate-search/commit/af1642f06de212ed4ab130cff7dafd2786cf49c6 in particular, and [here](https://github.com/yrodiere/hibernate-search/commit/af1642f06de212ed4ab130cff7dafd2786cf49c6#diff-a85290d5c89683cd208360a89c065a51R122) to be very precise.
"	2017-01-18 15:05:10	0.0		1
2167	Jenkins, retest this please	2016-12-20 18:38:48	1.0	2016-12-21 13:25:58	0
2168	Jenkins, retest this please	2016-12-21 08:40:35	1.0	2016-12-21 13:25:58	0
2169	Jenkins, retest this please	2016-12-21 12:38:31	1.0	2016-12-21 13:25:58	0
2170	Merged, thanks!	2016-12-21 13:26:52	1.0	2016-12-21 13:25:58	0
2171	I didn't mean to close this, sorry.	2016-12-19 21:01:30	0.0		0
2172	"@Sanne It's a bit odd, because `LuceneQueryTranslator` is definitely referenced from the Elasticsearch module: it is implemented in `org.hibernate.search.elasticsearch.impl.ElasticsearchLuceneQueryTranslator`.
Are we sure the Elasticsearch module is used in OSGi tests?"	2016-12-19 15:35:48	1.0	2016-12-19 16:29:05	1
2173	"> Are we sure the Elasticsearch module is used in OSGi tests?

I'm sure the Elasticsearch module is NOT tested within OSGi.

Previously though, the LuceneQueryTranslator class was needed to be exposed (initialized? I don't remember) even when not using Elasticsearch."	2016-12-19 15:51:38	1.0	2016-12-19 16:29:05	0
2174	@Sanne That's probably related to 4067e6c9daa8626e2d378259a41a2dc4d5db0c88, where I moved code using this interface from the -orm module to the -engine module.	2016-12-19 16:10:51	1.0	2016-12-19 16:29:05	0
2175	right, that's probably the reason this works now. Good job ;-)	2016-12-19 16:17:34	1.0	2016-12-19 16:29:05	0
2176	Merged, thanks!	2016-12-19 16:29:27	1.0	2016-12-19 16:29:05	0
2177	thanks, merged.	2016-12-19 15:48:36	1.0	2016-12-19 15:48:11	0
2178	If I understand correctly, this commit also makes the wrappers remain in the cache when they are stopped. But I suppose it is on purpose?	2016-12-19 15:21:02	1.0	2016-12-19 15:48:11	0
2179	"Yes, in fact that was the problem: one thread A would perform a stop operation and then remove the Service from the cache, while another thread B had already got a reference to it, yet had not started it. It will then start it (virtually), however by doing so it would increment the usage counter on a service wrapper which is no longer tracked by the registry.
Subsequent operations would initialize a new service wrapper, as the one in the registry was gone, and so the +1 and -1 operations end up being unbalanced."	2016-12-19 15:46:42	1.0	2016-12-19 15:48:11	1
2180	Take it as a testimony that all this stuff was really not meant to do service start/stop frequently at runtime ;-)	2016-12-19 15:47:29	1.0	2016-12-19 15:48:11	0
2181	"To sum up, there are three main topics remaining:

 1. We have analyzer/analyzerReference mixups: https://github.com/hibernate/hibernate-search/pull/1263#discussion_r92823889 . @gsmet , my last commit should solve that issue. Does it seem ok to you? 
 2. Whether file parameters should be forwarded as is (and files should exist on the Elasticsearch instance), or we should parse those files and forward their content, adequately formatted in JSON: https://github.com/hibernate/hibernate-search/pull/1263#discussion_r92822304
 3. Whether we pass parameters to Elasticsearch-specific analysis factories using a) multiple, small parameters with the same name as in Elasticsearch or b) one big JSON object parameter with a magic name: https://github.com/hibernate/hibernate-search/pull/1263#discussion_r92823889 . My opnion is we should leave it as is, but we could also provide both to users and let them choose.

The first one should be addressed in my latest commit, and I'll try to address the second right now (but it's getting late, I probably won't have time to finish today).

@Sanne, any opinion on this?"	2016-12-16 18:21:44	0.0		0
2182	"Thanks!
My quick opinion on your questions, bearing in mind I didn't review the PR yet:
1. Not sure what you're talking about, I guess I'll see during the review.
2. That's a nice idea, but I'd classify it as ""future && maybe"" improvement. No need for JIRAs, we can see how it plays out.
3. I'd go with the most intuitive approach from an end user perspective, but I don't have enough experience with ES Analyzer definitions to judge. Happy to follow your suggestion; I'll merely check to see how maintainable this looks like.

onward with some hands-on tests.."	2016-12-16 19:04:13	0.0		1
2183	"@Sanne FYI I'm still working on adding better support for file parameters for analysis factories in HSEARCH-2219.
I just discovered that some analysis-related tests did not actually test indexing, and it seems the syntax for those files is slightly different for Elasticsearch (especially char mapping rules, where ES doesn't expect surrounding double-quotes, while Lucene does).
All in all, @gsmet's solution of parsing files on the Hibernate Search side and sending the content as JSON arrays seems to be more and more appropriate, especially given the amount of work required for users to convert their files."	2016-12-19 10:51:57	0.0		0
2184	"@yrodiere you mean more improvement commits are expected to appear on this PR soon right?

Or shall we look into merging this, and then open follow-up improvement JIRAs as needed?"	2016-12-19 14:50:33	0.0		0
2185	"@Sanne I just pushed the improvements. I kept them in separate commits to make that readable.
We could handle this separately, but probably not after the CR: the behavior we are discussing here (the one regarding files) could not be changed without breaking users.

Other matters are less critical. I'll open separate PRs. I'll move the commit about analyzer/reference mixups to another PR, too, since Guillaume is ""not particularly happy with the solution"" and I'll have to change it anyway."	2016-12-19 15:17:39	0.0		0
2186	"merged. great job all! I was quite worried about us attempting this ""translation"" but it's looking much better than what I was expecting."	2016-12-19 20:09:04	0.0		0
2187	s/passThroughtReference/passThroughReference/	2016-12-16 09:56:54	0.0		0
2188	Some Javadoc to explain the purpose of this class would be nice.	2016-12-16 09:57:28	0.0		0
2189	Unneeded white space.	2016-12-16 12:10:59	0.0		1
2190	As discussed on the phone, could you explain a bit more the sequence of operations. Typically here, it would be nice to explain that analyzers not used in the mapping are registered as Lucene analyzers.	2016-12-16 12:12:06	0.0		0
2191	A comment explaining the limitation we discussed about the order would be nice.	2016-12-16 12:13:28	0.0		0
2192	`builderToClone` is misleading here. You don't clone the `Builder`. I think `containerBuilder` would be better.	2016-12-16 12:18:06	0.0		1
2193	"Not related to your patch, but while at it, ""fake"" is misleading here, we use the pass through analyzer."	2016-12-16 12:19:34	0.0		0
2194	Mmmmh, the commit message does not really state the content of this commit. It's far more extensive AFAICS.	2016-12-16 12:44:06	0.0		0
2195	Shouldn't we use getClass() instead of using a static class reference?	2016-12-16 12:46:12	0.0		1
2196	Shouldn't we use getClass() instead of using a static class reference?	2016-12-16 12:46:23	0.0		1
2197	Shouldn't we use getClass() instead of using a static class reference?	2016-12-16 12:46:34	0.0		1
2198	Having the analyzer here was not a mistake. For me the analyzer didn't really need to be aware of the notion of reference. Why exactly did you change that?	2016-12-16 12:49:19	0.0		0
2199	"It's weird. It looks like we are copying an analyzer while in fact we build an AnalyzerReference. Maybe the name `Builder` is misleading and `ReferenceBuilder` would be better?

All in all, I'm not convinced this is an improvement. What's the exact reason for this change (the commit message does not really help)."	2016-12-16 12:52:59	0.0		1
2200	Maybe include the name of the analyzer or the analyzer if defined?	2016-12-16 13:15:51	0.0		1
2201	I think we should include the name for the builtin analyzers. That would be more clear. (I know this code has moved so it's probably something to apply on top of the other changes)	2016-12-16 13:21:52	0.0		1
2202	Looks like you forgot to update the message as you did above.	2016-12-16 13:23:17	0.0		1
2203	I think it would be nice to initialize the name.	2016-12-16 13:26:07	0.0		1
2204	Typo in the commit message: s/Translate Lucene analyzer definitions their/Translate Lucene analyzer definitions **to** their/	2016-12-16 13:30:43	0.0		1
2205	I don't see the point of making it protected?	2016-12-16 13:32:03	0.0		1
2206	So you will always have an `AnalyzerDef`? Considering the comment at the top of `CustomElasticsearchAnalyzerImpl`, I thought it was only guaranteed for this impl.	2016-12-16 13:33:43	0.0		0
2207	Undefined sounds weird. Builtin maybe?	2016-12-16 13:35:44	0.0		1
2208	Yeah, as mentioned above, not sure it's a good idea to define it in the interface.	2016-12-16 13:37:06	0.0		1
2209	Please use `@FormatWith(ClassFormatter.class)` for the class parameters in the log methods (here and below).	2016-12-16 13:39:47	0.0		1
2210	Maybe use more explicit parameter names?	2016-12-16 13:41:37	0.0		1
2211	looks like the parameter name is missing?	2016-12-16 13:43:46	0.0		1
2212	s/light_finnnish/light_finnish/?	2016-12-16 13:49:09	0.0		0
2213	You can remove the `super();`.	2016-12-16 13:57:03	0.0		1
2214	"I was worried about leaf types in the inheritance tree that would be ""pure implementations"", not meant to be accessed... If those types implemented different, public interfaces, that would make a difference in the result of this method, and expose implementation details.
But it turns out I didn't need to do something like that, so... Do you want me to use `getClass()`? "	2016-12-16 13:58:42	0.0		0
2215	"Couldn't we return an empty `IndexSettings` in the case we don't have a definition? It would feel more natural.

Especially if we imagine we add other settings."	2016-12-16 13:59:34	0.0		1
2216	No `super();` needed.	2016-12-16 14:02:06	0.0		1
2217	IIRC, for new files, we add an empty line at the end.	2016-12-16 14:02:53	0.0		1
2218	"In practice, we did pass references, only those references were called ""lazy analyzers"".
We cannot pass fully-initialized analyzers to the scoped analyzer, because we can't initialize the analyzers until after we created the scoped analyzers (during the mapping construction).

Anyway, this change is more related to what's done in one of the next commits related to lazy analyzers. I'll try to see why it's here..."	2016-12-16 14:02:53	0.0		0
2219	Mmmh, OK, any reason why you add a `super();` everywhere? I can see a pattern here :).	2016-12-16 14:03:50	0.0		1
2220	instan**t**iating	2016-12-16 14:04:36	0.0		0
2221	exists	2016-12-16 14:05:02	0.0		0
2222	"We do build an analyzer, it's just that we return a reference to the result, instead of returning the result directly.

We must return a reference, and we must start the copy from the analyzer itself, because only the analyzer itself (which is specific to the indexing service) knows which type of reference to return. If we returned the analyzer directly, we wouldn't know how to wrap it in a reference...

Here it's not that bad, because we are in a Lucene context, so we could wrap it in a `LuceneAnalyzerReference` and be done with it.
But in other places (namely `org.hibernate.search.query.dsl.impl.ConnectedQueryContextBuilder.HSearchEntityContext`) we don't have that kind of information, we can't even access the analyzer strategies anymore, so we're stuck. And we actually need a reference, not an analyzer, because later we'll use the reference to determine whether it's remote or not. Though I guess we could use some `instanceof`s... But that makes all these `is` methods in analyzer references rather pointless, doesn't it?"	2016-12-16 14:08:21	0.0		1
2223	"Anwsering your review comment:

In later commits, we must introduce methods in `ElasticsearchAnalyzer` that are specific to Elasticsearch (or rather, specific to the way the Elasticsearch module handles analyzers). Those methods are not relevant to the engine, so we can't add those in `RemoteAnalyzer` (the superinterface of `ElasticsearchAnalyzer`.

If we keep `ScopedRemoteAnalyzer` in the -engine module, we obviously cannot make it implement methods defined in the Elasticsearch module. But we should, because `ScopedRemoteAnalyzer` is essentially a proxy that should be usable wherever we use a standard analyzer...

So we end up moving the implementation of the scoped analyzer to the module where we know exactly what is implemented. Which seems to make sense..."	2016-12-16 14:15:20	0.0		1
2224	Wondering if it's worth introducing this infrastructure rather than simply use a JsonElement/JsonArray to serialize the elements.	2016-12-16 14:27:29	0.0		0
2225	I appended `this.toString`. Please note that this is not expected to happen, though (`AssertionFailure`, not `SearchException`).	2016-12-16 14:28:03	0.0		0
2226	Right, fixed.	2016-12-16 14:28:11	0.0		0
2227	"That seems wrong to me, because when using that constructor the reference is not to a name, but something else (the ""default"", some class, ...). We don't have anything to put in `name`, or at least nothing that would not conflict with the analyzer definition namespace (the set of names used in `@AnalyzerDef.name`).

Or did I misunderstand?"	2016-12-16 14:30:40	0.0		1
2228	Neither do I. Fixed.	2016-12-16 14:35:38	0.0		0
2229	"We can't use `instanceof` because we have scoped analyzers.
So we'll have a definition either when it's a `CustomElasticsearchAnalyzerImpl` or when it's a `ScopedElasticsearchAnalyzerImpl` pointing to a `CustomElasticsearchAnalyzerImpl`."	2016-12-16 14:37:03	0.0		1
2230	"Thing is it's not always builtin... It maybe something that was defined by the user on the server-side.
Also, I use `Builtin` in a later commit for something else :)
What about `ServerDefinedElasticsearchAnalyzerImpl`?"	2016-12-16 14:38:22	0.0		0
2231	"See my answer above. Apart from handling scoped analyzer manually (`if (analyzer instanceof Scoped) { ... } else { ... }`) I don't see any other solution. And I think this one is ""less bad""."	2016-12-16 14:39:38	0.0		0
2232	Done.	2016-12-16 14:42:13	0.0		0
2233	I'm a bit worried about this change. The StandardAnalyzer that might be used as default would have the exact same behavior. I really think using an analyzer filtering the non ASCII characters is better. I think it's feasible, isn't it?	2016-12-16 14:43:32	0.0		1
2234	Ok.	2016-12-16 14:43:44	0.0		0
2235	Fixed.	2016-12-16 14:45:11	0.0		0
2236	Use `@FormatWith`.	2016-12-16 14:45:12	0.0		1
2237	"We will need to detect those when implementing the MERGE strategy in the `ElasticsearchIndexManager`.
But yes, I could implement an `isEmpty` method then, I guess. Will do."	2016-12-16 14:50:24	0.0		0
2238	It does not harm either... Anyway... Fixed.	2016-12-16 14:51:19	0.0		0
2239	I wonder if we should simply pass a json object instead of separate parameters?	2016-12-16 14:52:07	0.0		1
2240	Eclipse-generated constructors.	2016-12-16 14:52:21	0.0		0
2241	Fixed	2016-12-16 14:53:03	0.0		0
2242	Fixed	2016-12-16 14:53:05	0.0		0
2243	Thanks a lot for this one :)	2016-12-16 14:55:37	0.0		0
2244	Done.	2016-12-16 14:55:56	0.0		0
2245	Is it a work in progress? It seems so as you created issues for it.	2016-12-16 14:57:48	0.0		0
2246	I know the parser is lenient but wouldn't it be better with a , between the array elements?	2016-12-16 14:59:19	0.0		0
2247	"Actually, it occurred to me only *after* I spent hours on this crap :-(
Anyway... Using `JsonElement`/`JsonArray` may hurt when we'll implement validation for analyzer definitions, so I'd like to avoid that as much as possible. I know it was a real pain when I implemented mapping validation."	2016-12-16 15:00:21	0.0		1
2248	"Thing is, we can only use a built-in Lucene analyzer, unless we want to alter the test another way, by using analyzer definitions instead of an analyzer implementation.
I changed this to use Turkish diacritics. `StandardAnalyzer` seems to fail at removing those and the turkish analyzer is built-in."	2016-12-16 15:10:47	0.0		1
2249	Fixed	2016-12-16 15:31:42	0.0		0
2250	"I agree it could do, but I'm not sure it would be better.

1. We'd have some magic parameter name (not really intuitive)
2. We'd have more error cases to handle (what happens if someone gives a parameter name other than the magic one?)
3. It would not be much more readable, thanks to Java lacking multi-line string constants (a real pain, that one...)
4. On top of that, I'm not even sure there are analyzers with ""object"" parameters in Elasticsearch. I sure didn't come across any. The parameters are essentially flat, with arrays sometimes. So we wouldn't gain much...

To be honest, I'd say ""yes"" if we were introducing Elasticsearch-specific annotations, but in that case it doesn't seem to fit the annotation very well..."	2016-12-16 15:36:57	0.0		1
2251	It sure would :) Fixed	2016-12-16 15:38:32	0.0		0
2252	Yes it is. I added details about that.	2016-12-16 15:42:32	0.0		0
2253	Fixed.	2016-12-16 15:45:56	0.0		0
2254	Fixed.	2016-12-16 15:46:01	0.0		0
2255	Fixed.	2016-12-16 15:46:07	0.0		0
2256	Fixed.	2016-12-16 15:46:11	0.0		0
2257	Fixed.	2016-12-16 15:46:19	0.0		0
2258	Fixed.	2016-12-16 15:46:23	0.0		0
2259	Fixed.	2016-12-16 15:46:28	0.0		0
2260	Fixed.	2016-12-16 15:48:08	0.0		0
2261	OK.	2016-12-17 08:00:54	0.0		0
2262	"What I'm worried about is that, if you subclass it with a B class, `instanceOfB.is(B.class)` will return false which feels kinda weird.

If we think they shouldn't be subclassed, we could make them final to be on the safe side. Or would you expect the subclass to always reimplement `is`?"	2016-12-17 08:04:58	0.0		1
2263	"That's what I would expect, yes: if a subclass wants to expose more of its implemented interfaces, it should do it explicitly.

That's the point of this whole `is()/`/`unwrap` pattern in this case: we don't use adaptors, so simple `instanceof` and client-side casts would have done the trick. The only reason to implement that pattern is to be a bit cleaner and to be more strict about encapsulation. See `org.hibernate.jpa.spi.AbstractEntityManagerImpl.unwrap(Class<T>)` for instance, it's even more strict than what I propose (it only accepts interface types).

Anyway... that's what I think, but it's more nitpicking than anything else, really. I don't think it'll make a difference. I'll use `getClass`, so we'll be safe if someone adds a subclass."	2016-12-19 08:18:38	0.0		0
2264	jenkins, retest this please	2016-12-10 23:20:56	1.0	2016-12-18 21:52:45	0
2265	Jenkins retest this please	2016-12-11 11:22:41	1.0	2016-12-18 21:52:45	0
2266	"@DavideD FYI, I just rebased this on master. The conflicts were just on imports.
Reviewing now."	2016-12-14 17:54:05	1.0	2016-12-18 21:52:45	1
2267	"I rebased the project and applied all the remarks.

Instead of creating 2 field bridges for `DynamicMappingIT` I've created a parameterized filed bridge. I've also added some javadoc"	2016-12-14 22:27:00	1.0	2016-12-18 21:52:45	0
2268	"What are actual use cases for enabling dynamic mappings? Reading through the issue, it seems the reporter actually hit an issue which would rather be solved by properly mapping indexed embeddables (using the correct strict schema).

It seems like a big deviation from the current approach to support dynamically added fields and I'm wondering whether we've considered all the consequences. How does field validation in the query DSL work for instance?"	2016-12-15 07:52:27	1.0	2016-12-18 21:52:45	0
2269	"@gunnarmorling I must admit I thought the same before this PR, but @DavideD enabled a test that demonstrate its usefulness when you want to index a map. This test previously only worked on Lucene, see the commit ""HSEARCH-2387 Update existing tests"".

So it may be useful. Now, do we want to support that on Elasticsearch, that's another question. Regarding the type detection in the query DSL, it doesn't seem any different from Lucene to me (there also is a difference between querying strings and numbers). Maybe that's not an issue with Elasticsearch, but a more general one?

As a side note, we do have tickets relative to ""dynamic"" fields, but not directly related to Elasticsearch: [HSEARCH-1379](https://hibernate.atlassian.net/browse/HSEARCH-1379) and maybe also [HSEARCH-1401](https://hibernate.atlassian.net/browse/HSEARCH-1401)"	2016-12-15 08:10:33	1.0	2016-12-18 21:52:45	0
2270	"@gunnarmorling @yrodiere 
One last attempt of keeping the API part:

* `FieldMetadataCreationContext` is an experimental API and we specify that it is currently under development
* `Elasticsearch` is the equivalent of `FieldMetadataCreationContextImpl`  that it is currently under an impl package. The name should probably be `ElasticsearchFieldMetadataCreationContext` (but it seems too long to me). `ElasticsearchFieldMetadata`?
* FieldMetadataCreationContext is an SPI and not a public API, it also does not mention Elasticsearch in the API but only that mappedOn should return a FieldCreationContext

@Sanne better if you give a look as well.

I'm OK postponing this part, but I would prefer to keep it because the user can startto experiment with it and we have an initial POC before committing to an API


"	2016-12-15 09:18:30	1.0	2016-12-18 21:52:45	0
2271	"> Do we have strong use case for this? If there are issues with the emitted strict mapping, we should rather fix those.

What do you mean by issues? Elasticsearch allow to define different fields with different dynamic type properties. So you could specify that all the fields are strict but one of the field is an inner object and the fields in it can change. Maybe this is not the best use case for hibernate search, but there might be other clients that need to access the same index. There is an example in the Elasticsearch documentation: https://www.elastic.co/guide/en/elasticsearch/guide/current/dynamic-mapping.html

> The notion of ""object fields"" seems to have a huge impact. It may be justified to add, but it's still a bit blurry to me.

I suspect that the more backends we will have the more fileld types we will need, for example Elasticsearch also support `nested` types. I'm not sure how we want to address this in the future. For this specific case, INNER_OBJECT might be a better name, the javadoc will specify that the mapping can change based on the backend capabilities. "	2016-12-15 09:52:33	1.0	2016-12-18 21:52:45	0
2272	FYI I'm applying the remarks	2016-12-15 11:24:37	1.0	2016-12-18 21:52:45	0
2273	"> @Sanne better if you give a look as well.

Sure, looking forward to it but I'll wait for your revised version! Thanks"	2016-12-15 12:49:25	1.0	2016-12-18 21:52:45	0
2274	"I've applied all the remarks and kept the API for now:
- I've created a new cfg.DynamicType for the configuration
- I've moved the `bridge.builtin.impl.Elasticsearch` class under `bridge.spi.Elasticsearch` 
- Added/Updated javadoc
- Fiixed an error in the MapAsInnerObjectFieldBridge bridge used by the test

The API is still the same (I've only changed the package), so the questions about keeping it are still relevant.
 
@Sanne You can have a look now, 
"	2016-12-15 13:09:03	1.0	2016-12-18 21:52:45	0
2275	Jenkins, retest this please	2016-12-15 13:58:25	1.0	2016-12-18 21:52:45	0
2276	"@DavideD While working on something else, I just came across a section in the documentation that stated ""Creating sub-fields in custom field bridges is not supported."" and explained at length why it isn't supported.

Thing is, with your new `OBJECT` field type, it actually is supported (you only have to override the type of the default field to `OBJECT`). Maybe this part of the documentation should be rewritten?"	2016-12-15 18:32:19	1.0	2016-12-18 21:52:45	0
2277	"please don't use the ""@see"" Javadoc tag to point to external URLs. that will have the release process fail.

Use ""{@link}"", or don't use anything and we avoid the problem ;)"	2016-12-16 13:38:00	1.0	2016-12-18 21:52:45	1
2278	"API looks great, thanks for exploring all those options.

For the record, I expect to be able to ""chain"" such metadata definitions eventually, when we'll work on supporting multiple indexing technologies.

e.g.

    builder.field( ""dynamicField"", FieldType.OBJECT )
				.mappedOn( Elasticsearch.class )
				     .dynamic( DynamicType.TRUE ) // Not terminating yet..
				.mappedOn( Solr.class )
				     .useDocValuesAsStored( true ); // A Solr specific option"	2016-12-16 14:16:29	1.0	2016-12-18 21:52:45	0
2279	"Rebased and remarks applied.

I realized that I made a mistake and applied the PR for HSEARCH-2508 and HSEARCH-2500 (https://github.com/hibernate/hibernate-search/pull/1258) on master on my repository and not on upstream. The end result is that  I had to to rebase the patches made by @yrodiere  again and they are included in this PR making it bigger than it actually is. I'm sorry about it.

@yrodiere I don't feel confident about removing that part of the documentation (the one related about the  sub-fields) until we have a test covering the use-case. What it is describing seems different to what I've done and I don't feel confident removing or rewriting the section until we tested it (as a separate issue)."	2016-12-17 00:07:35	1.0	2016-12-18 21:52:45	0
2280	@DavideD I'm confused. There are several other commits included now, some of them are reverts. Intentional?	2016-12-17 00:12:30	1.0	2016-12-18 21:52:45	0
2281	"@Sanne that's my fault, I made a mistake when I applied the the  https://github.com/hibernate/hibernate-search/pull/1258. I didn't realized I applied that on my remote repository and not on upstream.

I noticed it today when other PR were already included. This branch was already build on top of those changes.

At least, that's what I think happened since master does not have those commits and I remember pushing them.

Anyway, this changes related to HSEARCH-2500 and HSEARCH-2508 should be on master already.

The reverts are related to add back the `@IndexEmbedded` as requirement for collections like discussed elsewhere."	2016-12-17 00:24:28	1.0	2016-12-18 21:52:45	0
2282	Ok I understand you had forgotten to push some changes. But why include them in this PR? Just push them?	2016-12-17 00:55:54	1.0	2016-12-18 21:52:45	0
2283	"Yes, I could have done that :)


On 17 Dec 2016 00:55, ""Sanne Grinovero"" <notifications@github.com> wrote:

> Ok I understand you had forgotten to push some changes. But why include
> them in this PR? Just push them?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/hibernate/hibernate-search/pull/1262#issuecomment-267730961>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAiIde5uW4nUpKkLJxQfruM1Yh5QifkOks5rIzMbgaJpZM4LJyW8>
> .
>
"	2016-12-17 00:59:39	1.0	2016-12-18 21:52:45	0
2284	thanks! merged	2016-12-18 21:53:12	1.0	2016-12-18 21:52:45	0
2285	"There's a typo here; should be ""elasticsearchDefinedField""."	2016-12-14 17:58:18	1.0	2016-12-18 21:52:45	0
2286	"This should not be a hardcoded constant (`""value""`), but simply `name`. I know this won't change anything in practice, but it's just in case people copy/paste this code."	2016-12-14 18:04:29	1.0	2016-12-18 21:52:45	1
2287	"I'm a bit perplexed: ""dynamicStrict"" does not match any field name... I wonder why this works.

Anyway... Maybe there should be two different bridges here? It feels a bit strange that the `name` parameter in `configureFieldMetadata` is ignored.

Same as before: I agree it can work as is, but it's more in case someone copy/pastes this code."	2016-12-14 18:12:25	1.0	2016-12-18 21:52:45	0
2288	"This could use generics, so that we ensure (more or less) that the cast in `mappedOn` (below) will always work.

```
public <T> void add(Class<T> class1, T elasticsearch) {
  extra.put( class1, elasticsearch );
}
```

Also, ""elasticsearch"" should probably be renamed :)"	2016-12-14 18:18:37	1.0	2016-12-18 21:52:45	0
2289	Shouldn't this be `Map<Class<?>, Object>` instead? It will save us one compiler warning.	2016-12-14 18:19:27	1.0	2016-12-18 21:52:45	1
2290	"Unless I'm mistaken, there should probably be a `@SuppressWarnings(""unchecked"")` on this method, to avoid a warning. I know there already are tons of them, but we could at least refrain from adding new ones...

Another (maybe better) solution would be to use the class to do the cast:

```
  return class1.cast( extra.get( class1 ) );
```"	2016-12-14 18:21:00	1.0	2016-12-18 21:52:45	1
2291	"Maybe ""encounters"", with a trailing ""s""?"	2016-12-14 18:25:24	1.0	2016-12-18 21:52:45	0
2292	`Elasticsearch` and `DynamicType` are impl types as per there packages. They should not be accessed here.	2016-12-15 07:54:27	1.0	2016-12-18 21:52:45	0
2293	Is this needed now for element collections? Worth mentioning in the migration notes for sure.	2016-12-15 07:55:58	1.0	2016-12-18 21:52:45	0
2294	Can we have a public enum (as we e.g. do for `ElasticsearchIndexStatus`)?	2016-12-15 08:12:29	1.0	2016-12-18 21:52:45	1
2295	What's the reason for having this in a separate method but not doing the same for boost?	2016-12-15 08:15:48	1.0	2016-12-18 21:52:45	1
2296	"Sorry about that, but I just noticed: this class is part of an implementation package. If we want to make it available for use in custom field bridges, shouldn't this be API?

Also, maybe a more specific name is necessary. Or we consider that this class will be used everywhere someone needs an Elasticsearch-specific API, and in that case there should be a slightly more complex design (one central interface with multiple `Class<? extends XXX> getXXXAPI()` methods)."	2016-12-15 08:19:12	1.0	2016-12-18 21:52:45	0
2297	"""othe""=""other"".

I haven't fully groked yet why this is needed now. Could you explain a bit?"	2016-12-15 08:20:36	1.0	2016-12-18 21:52:45	1
2298	"It was always needed, but in one of the latest PR @yrodiere  removed it.
 After a long discussion we decided to revert it back for compatibility"	2016-12-15 08:30:16	1.0	2016-12-18 21:52:45	0
2299	ok	2016-12-15 08:34:08	1.0	2016-12-18 21:52:45	0
2300	"In Elasticsearch you cannot set dynamic:true on a field that it's not an object (or nested). FieldType
does not have a way to define a similar type. At the moment FIeldTYpe allows only primitive types.

I guess the javadoc shouldn't talk about containers, I'll update it"	2016-12-15 08:37:06	1.0	2016-12-18 21:52:45	0
2301	I consider this  a proof of concept, at this point I will remove it and create a separate issue for this API and only support  the configuration property	2016-12-15 08:38:39	1.0	2016-12-18 21:52:45	0
2302	OK, I'll remove this from the PR	2016-12-15 08:40:29	1.0	2016-12-18 21:52:45	0
2303	We alredy have, I'll update it	2016-12-15 09:27:44	1.0	2016-12-18 21:52:45	0
2304	"@DavideD Caution with the existing enum: it's part of an implementation package, and for a good reason. It's used for building our internal representation of the Elasticsearch mapping, and as such it shouldn't be exposed.

We can always add another enum, if it's really necessary."	2016-12-15 09:51:50	1.0	2016-12-18 21:52:45	0
2305	RIght, I will add a new one to be consistent with the other options	2016-12-15 10:00:19	1.0	2016-12-18 21:52:45	0
2306	"Could you clarify who is the subject of ""the behaviour""?

Also ""unknown field"" isn't very clear IMO. An ""unexpected field name""? Or better, a ""field name which was not declared in the index schema"" ?"	2016-12-16 13:43:13	1.0	2016-12-18 21:52:45	1
2307	"Same comment on ""unknown field""; I might be wrong but I suspect it's not very clear."	2016-12-16 13:43:46	1.0	2016-12-18 21:52:45	1
2308	Ok, I'll rephrase it. I think I copied it from the Elasticsearch documentation but in this context might not be clear	2016-12-16 13:46:15	1.0	2016-12-18 21:52:45	0
2309	"Please don't call it ""backend"".. I feel your pain, we are lacking a good designation for this but ""backend"" is an overloaded term in this context, which already has a (different) meaning."	2016-12-16 13:47:35	1.0	2016-12-18 21:52:45	1
2310	"I'm not sure what you mean here. Specifically what is  ""backend"" meaning in this context?"	2016-12-16 13:49:07	1.0	2016-12-18 21:52:45	0
2311	Could you use the Logger, and have it create a SearchException ?	2016-12-16 13:50:20	1.0	2016-12-18 21:52:45	1
2312	`final` ?	2016-12-16 13:51:43	1.0	2016-12-18 21:52:45	0
2313	"The ""object"" being repeated is confusing. ""backends"" at the end of the sentence is as well.

alternative proposal:
""A composite object that will benefit from using a different encoding on each indexing technology."""	2016-12-16 13:55:33	1.0	2016-12-18 21:52:45	1
2314	Isn't it explained in details one line after this one?	2016-12-16 14:35:29	1.0	2016-12-18 21:52:45	0
2315	I'll think a differrent word, but we need a term to define these. Should we just refer to index managers?	2016-12-16 14:37:43	1.0	2016-12-18 21:52:45	0
2316	"I think in most cases I can replace backend with index manager, would that work?

In  this case I'm trying to add extra field bridges that make sense only with some index managers and will be ignored by the others, for example ElasticsearchBridgeDefinedField. 

The key is the class of the bridge and the value is the instance for the field considered in BridgeDefinedField."	2016-12-16 14:43:40	1.0	2016-12-18 21:52:45	0
2317	Sure	2016-12-16 14:44:15	1.0	2016-12-18 21:52:45	0
2318	"I mean: it's not clear if this is to configure the ""behaviour of Elasticsearch"" or of Hibernate Search"	2016-12-16 15:41:29	1.0	2016-12-18 21:52:45	0
2319	"""Give access to properties that are specific to an indexing technology"" ? Not particularly fond of that, I'm open to better ideas."	2016-12-16 15:43:49	1.0	2016-12-18 21:52:45	0
2320	Merged https://github.com/hibernate/hibernate-search/pull/1261	2016-12-14 19:09:07	1.0	2016-12-14 19:05:44	0
2321	merged! thanks	2016-12-09 09:58:00	0.0		0
2322	"great, thanks! Merged.

Made a minor change, as after rebase the Log IDs had to be bumped up, and tests needed to match."	2016-12-13 21:42:12	0.0		0
2323	Rebased just now on master.	2016-12-14 09:07:34	0.0		0
2324	Merged https://github.com/hibernate/hibernate-search/pull/1258	2016-12-14 18:56:39	0.0		0
2325	merged!	2016-12-08 22:55:12	0.0		0
2326	merged	2016-12-16 10:42:56	0.0		0
2327	great, merged!	2016-12-08 22:09:42	1.0	2016-12-08 22:09:14	0
2328	"I had only one comment - which can be done later - about the logging message org.hibernate.search.elasticsearch.logging.impl.Log.unexpectedIndexStatus(String, String, String)

do you think we should rephrase it to point out that we waited some n milliseconds before failing?"	2016-12-08 22:11:31	1.0	2016-12-08 22:09:14	0
2329	@Sanne Sure: #1260	2016-12-09 08:20:00	1.0	2016-12-08 22:09:14	0
2330	Jenkins, test this please	2016-12-08 08:44:22	1.0	2016-12-09 08:54:28	0
2331	what was wrong here, is CI refusing to run it?	2016-12-08 22:12:25	1.0	2016-12-09 08:54:28	0
2332	@Sanne No, a performance test failed. This happens randomly sometimes :/	2016-12-09 08:04:17	1.0	2016-12-09 08:54:28	0
2333	Looks good to me. Merged, thanks!	2016-12-09 08:54:42	1.0	2016-12-09 08:54:28	0
2334	"Please note that for an unknown reason, some commits appear jumbled on GitHub. For instance `	HSEARCH-2508 Revert ""HSEARCH-2419 Split container bridges tests to te…  …` should be just before `HSEARCH-2508 Update (Array|Iterable|Map)BridgeTest following the introduction of @IndexedContainer`...
This seems to be a GitHub issue though, since a local `git log` gives me something more sensible."	2016-12-07 14:38:57	0.0		0
2335	"PR rejected, closing.
I'm going to submit another PR soon that will not introduce a new annotation (but the behavior for Elasticsearch will be buggy again, which will have to do until 6.0)."	2016-12-08 10:28:59	0.0		0
2336	I noticed it now, but I think the log should refer to `returnType` and not `elementType`	2016-12-07 15:06:11	0.0		0
2337	Right. I changed that on the new PR I'm preparing, thanks.	2016-12-08 09:13:21	0.0		0
2338	thanks!	2016-12-07 11:24:12	1.0	2016-12-07 11:24:05	0
2339	great job! merged	2016-12-07 13:55:08	0.0		0
2340	sorry, sent the wrong commit. Fixing soon.	2016-12-06 12:45:34	1.0	2016-12-06 13:07:27	0
2341	interesting one! merged	2016-12-05 19:33:53	0.0		0
2342	@DavideD it's assigned to you.. we need it merged ;)	2016-12-13 22:45:46	0.0		0
2343	"> @DavideD it's assigned to you.. we need it merged ;)

Sorry about it, I got distracted by several things. I'll check it first thing in the morning
"	2016-12-13 23:04:49	0.0		0
2344	"@yrodiere can you rebase this PR to the latest changes?

It looks good to me but after I rebased it I have the following exception in the performance tests:

```
Caused by: org.h2.jdbc.JdbcSQLException: Timeout trying to lock table ; SQL statement:
update book set publicationDate=?, rating=?, summary=?, title=?, totalSold=? where id=? [50200-178]
        at org.h2.message.DbException.getJdbcSQLException(DbException.java:344)
        at org.h2.message.DbException.get(DbException.java:167)
        at org.h2.command.Command.filterConcurrentUpdate(Command.java:301)
        at org.h2.command.Command.executeUpdate(Command.java:256)
        at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:158)
        at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:144)
        at com.zaxxer.hikari.proxy.PreparedStatementProxy.executeUpdate(PreparedStatementProxy.java:61)
        at com.zaxxer.hikari.proxy.PreparedStatementJavassistProxy.executeUpdate(PreparedStatementJavassistProxy.java)
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:204)
        at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:45)
        at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3132)
        at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:3011)
        at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:3391)
        at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:145)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:582)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:456)
        at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:337)
        at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
        at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1295)
        at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:468)
        at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3135)
        at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2352)
        at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:491)
        at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:147)
        at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$100(JdbcResourceLocalTransactionCoordinatorImpl.java:38)
        at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImp
l.java:231)
        at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:65)
        at org.hibernate.search.test.performance.task.AbstractTask.run(AbstractTask.java:53)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: org.h2.jdbc.JdbcSQLException: Concurrent update in table ""BOOK"": another transaction has updated or deleted the same row [90131-178]
        at org.h2.message.DbException.getJdbcSQLException(DbException.java:344)
        at org.h2.message.DbException.get(DbException.java:178)
        at org.h2.message.DbException.get(DbException.java:154)
```"	2016-12-14 11:39:20	0.0		1
2345	"that's probably unrelated; it's a sporadic failure we've had since some months.

Didn't have time to analyze that, sorry.. "	2016-12-14 11:46:08	0.0		0
2346	"Alright, I'll merge it. What surprises me is that it happens regularly on the rebase branch but not on master
"	2016-12-14 11:54:06	0.0		0
2347	hum, interesting. Do you see any relation between the changed code and the failing test?	2016-12-14 12:03:56	0.0		0
2348	I'm still checking, I thought it was something related to the change in the date format (it seems to deal with the publication date)  but if you tell me it's an existing error I'm not so sure anymore.	2016-12-14 12:15:30	0.0		0
2349	I'm not sure either. It just looks like an error which we've sometimes had during recent builds, but the one I had doesn't trigger that often.	2016-12-14 12:23:57	0.0		0
2350	"Judging from the root cause (`Concurrent update in table ""BOOK"": another transaction has updated or deleted the same row [90131-178]`), I'd say it's not related to the change.
Now *what* causes this issue, that I couldn't say. But I've seen this failure several time, generally restarting the build solves it. Maybe stress tests are a bit too... stressful?"	2016-12-14 13:01:48	0.0		0
2351	Rebased and Merged https://github.com/hibernate/hibernate-search/pull/1248	2016-12-14 13:11:49	0.0		0
2352	"| See also #1246: we'll have to merge one or the other.

If I understood it correctly, those changes only affect the ```DirectoryBasedIndexManager```, right? 

At least from Infinispan point of view, there are no issues with the ```DirectoryBasedIndexManager``` at the moment since all the stream work is applied synchronously to the index

So even if this PR is merged, the issue of missing documents because the flush was called while async works were not applied to the index when using the ES would still remain, that's what #1246 addresses.
"	2016-12-05 11:39:04	0.0		0
2353	"> If I understood it correctly, those changes only affect the DirectoryBasedIndexManager, right?

@gustavonalle They do, but the approach is different.

You only have synchronization issues because you send indexing works from multiple nodes, but only flush from one node, so the flush may happen before some indexing works.
You said you had to do this because, with `DirectoryBasedIndexManager`, the flushes would mess with works being executed. I gathered there must be a synchronization issue then, and this PR solves that issue.

Theoretically, after this PR is merged, you'll be able to send a final flush from every node which added asynchronous indexing works, removing the need to explicitly wait for the works to finish executing before flushing.

Mind that the final flushes may have to be executed through `performOperations(List<LuceneWork>, IndexingMonitor`, according to the javadoc:

```
	 * Operations might be applied out-of-order! To mark two series of operations which need to be applied
	 * in order, use a transactional operation between them: a transactional operation will always flush
	 * all streaming operations first, and be applied before subsequent streaming operations.
```"	2016-12-05 12:55:35	0.0		0
2354	"| You said you had to do this because, with DirectoryBasedIndexManager, the flushes would mess with 
| works being executed

No, I wrote earlier the issue is only with the ```ElasticsearchIndexManager```. The ""flush-once-after-indexing-from-multiple-nodes in stream fashion"" strategy works fine for the ```DirectoryBasedIndexManager```, because it does not support async stream indexing."	2016-12-05 13:31:27	0.0		0
2355	"I'm talking about another issue we mentioned on the same ticket, the one that prevented you from sending a flush from every node.

Quoting:

My question:

> I suppose flushing from every node that used enqueueAsyncWork is out of the question?

Your answer: 

> This does not work well for the DirectoryIndexManager: it could lead to cascade failures since flush can be very expensive after inserting a large amount of data. That's why flush is carefully done once. For the Elasticsearch I haven't tested it, but I suppose it could go better since they prevent multiple flushes in parallel.

So what I propose is we prevent multiple flushes in parallel on the same index writer and be done with it."	2016-12-05 13:34:35	0.0		0
2356	"| So what I propose is we prevent multiple flushes in parallel on the same index writer and be done with it.

Right, I overlooked the part where you suggested that on Infinispan we start flushing from every node instead of once after all nodes are done submitting their data.

Thinking about it, this can lead to other undesired issues, let me explain: your changes may prevent multiple expensive flushes at the same time (and thus bringing the whole cluster to its knees, which it's good) but still it'll execute multiple flushes. Imagine a cluster of 100 nodes, each node finishes submitting data at a different point in time (reasonable to assume that, data distribution may not be exactly identical across nodes) and then flushes: the flushes will not be executed in parallel but will happens nonetheless, 100 times. A node that finishes early and flushes will effectively slow down everyone else while it does its (in theory) non required flush, which can decrease throughput of the mass indexing processing.
"	2016-12-05 14:44:42	0.0		0
2357	"> A node that finishes early and flushes will effectively slow down everyone else while it does its (in theory) non required flush, which can decrease throughput of the mass indexing processing.

How I see it, this flush is not required now, but the data it flushes will have to be flushed eventually. And once it's been flushed, well it's that much less to flush at the end.
However, I understand what you mean about performance: worst case we will have 100 flushes, each for 1/100th of the data, which may prevent Lucene to perform some optimizations and may require some of its internal operations to be repeated needlessly. I'd expect a flush with less data to be faster, but 100 consecutive flushes with each 100 times less data may indeed be sub-optimal.

Bottom line: I honestly can't tell how badly this would impact performance without testing it. Let's see what @Sanne thinks about it. The fix might be relevant anyway, even if Infinispan doesn't switch to a ""one-flush-per-node"" strategy, because there really seems to be a synchronization issue (from what you said)."	2016-12-05 15:10:25	0.0		0
2358	@yrodiere Agreed on the synchronization issue, so let's promote this PR as an addition to #1246 rather than a replacement for it.	2016-12-05 15:34:14	0.0		0
2359	"Looks like I have to catch up reading on several fronts, so forgive me if I start with some dumb questions on this one:

I don't understand what problem is being resolved here. A test might be necessary?

There are patterns to prevent the 100 sequential flushes, see for example org.hibernate.search.indexes.impl.SharingBufferReaderProvider.refreshOperationId
It's unlikely to fold 100 flushes into one, but it should result into 2 to 3 operations (assuming all 100 flush operations are incoming in the start/finish period of the first flush)."	2016-12-13 22:44:28	0.0		1
2360	@Sanne as long as Infinispan is concerned, there is only 1 flush being done at the moment, and there are no plans to start making more than one due to the reasons I mentioned above.	2016-12-14 07:57:59	0.0		0
2361	"> I don't understand what problem is being resolved here. A test might be necessary?

I'll try to do that today or tomorrow, but I'm not sure the issue will be easily reproductible.

Technically, this commit makes sure that while doing a flush, we don't try to write to the index. Which could be an issue since the ""flush"" actually commits the index writer, and after that we have to use a new index writer.

The link with HSEARCH-2492 is that HSEARCH-2492 is only relevant in the following scenario:

 * Purge indexes (once)
 * BatchBackend.enqueueAsyncWork (several times)
 * BatchBackend.flush (once)

... And the reason for the last step to be executed only once in a centralized fashion is (presumably) that if one node flushes while another is still indexing, there will be failures because the flush changes the index writer (sets it to null) and the indexing works use that same index writer.

Here, I'm making sure that even if one node flushes while another is still indexing, everything will go smoothly. Which will enable Infinispan to change its scenario to the following:

 * Purge indexes (once)
 * BatchBackend.enqueueAsyncWork (several times in parallel on several nodes)
 * BatchBackend.flush (once at the end, for each node)

And then HSEARCH-2492 is not relevant anymore. 

> There are patterns to prevent the 100 sequential flushes, see for example org.hibernate.search.indexes.impl.SharingBufferReaderProvider.refreshOperationId

I don't see how it's related to flushes. You mean we could apply the same pattern to fold multiple flushes into one?"	2016-12-14 08:49:07	0.0		0
2362	"> Technically, this commit makes sure that while doing a flush, we don't try to write to the index.

That's not a problem, a Lucene IndexWriter is threadsafe. Worst case we'll be including in the flush some changes which didn't *require* the flush: we don't guarantee that changes which don't have an explicit flush will not be flushed yet. For example the write buffers are bounded: when the buffers are full, a flush will be triggered automatically.

> Which could be an issue since the ""flush"" actually commits the index writer, and after that we have to use a new index writer.

We don't have to use a new IndexWriter after a flush - only some configuration actually demand this - yet I don't see the problem as that specific case is driven by +org.hibernate.search.backend.impl.lucene.SharedIndexCommitPolicy+ , which ensures the IW is not closed when it's being used by using reference counting. The one exception I can think of is how OOM exceptions, out of disk, and other critical exceptions are handled, in this case IW might need to be forcefully closed.

"	2016-12-14 11:58:44	0.0		0
2363	"@Sanne You're right, I didn't pay enough attention to the commit policies and especially to the fact that only `SharedIndexCommitPolicy` is used whenever an index writer is shared.

This means I don't know where the issue mentioned by @gustavonalle (the issue with flushing from every node) could come from. Which means the easiest way to solve HSEARCH-2492 is propably #1246.

Closing."	2016-12-14 13:28:15	0.0		0
2364	"> This means I don't know where the issue mentioned by @gustavonalle (the issue with flushing from every node) could come from

The main issue is doing several flushes that can potentially affect performance of the whole mass indexing process. We do 1 because only 1 is needed really.
"	2016-12-14 14:00:15	0.0		0
2365	"> @yrodiere Agreed on the synchronization issue, so let's promote this PR as an addition to #1246 rather than a replacement for it.

I am not sure as well if there is a synchronization issue, we never tried to flush at the same time "	2016-12-14 14:01:40	0.0		0
2366	np @yrodiere, it's great to see you exploring this complex area :+1: Only a few of us know this section, and  it's not particularly readable. It's been quite battle-tested though, including in highly demanding environments from a perspective of performance, so I'll be conversvative on making any changes without a reproducer or at least having observed a problem.	2016-12-14 14:03:26	0.0		0
2367	"> I am not sure as well if there is a synchronization issue, we never tried to flush at the same time

Ultimately that's synchronized within the IW. The only potential drawback, is the cost of doing many flushes in sequence but that shouldn't be a situation which we're likely to trigger."	2016-12-14 14:05:44	0.0		0
2368	See also https://github.com/hibernate/hibernate-search/pull/1247 for an alternative solution	2016-12-05 11:30:21	0.0		0
2369	Merged	2016-12-15 12:45:30	0.0		0
2370	Nice. Merged, thanks!	2016-12-05 10:30:23	1.0	2016-12-05 10:30:19	0
2371	"@DavideD Hi! I thought about the TikaBridge a bit this week-end, and I think we have another way out for the container type issues with TikaBridge, without adding yet another bridge interface.
My concern with adding new bridge interfaces is that for every new interface we add, the extent of what a bridge can implement becomes less and less obvious to a newcomer. I know type introspection is useful (and I've done it myself in other PRs), but if we can avoid it, maybe we should?

So, the solution: currently when a return type is a container, we only do one pass on bridge providers, passing a context with getReturnType() returning the element type. What if we did *two* passes? One where the context would hold the container type (a getReturnType method that returns the container type, and a getReturnElementType method that returns the element type), and a second pass that where we would act as usual, with getReturnType returning the element type. We would only do bridge-wrapping with our container wrappers in the second case. This would probably be backward-compatible,  because pre-existing bridge providers would give up on the first pass (""I don't support Collection""), and everything would be like it used to be on the second pass.

What do you think?"	2016-12-05 09:08:27	0.0		1
2372	"@DavideD Actually the interface has the added benefit of also working on field bridges created because of explicit annotations (`@FieldBridge(impl = MyContainerBridge.class)`). So it's probably better. I'll wait for your opinion before merging...

By the way, I think that fixing [HSEARCH-2419](https://hibernate.atlassian.net/browse/HSEARCH-2419) has probably made the problem experienced with `TikaBridge` even broader.
The `TikaBridge` issue was with bridge providers getting the wrong metadata, but with HSEARCH-2419 fixed, the issue will also be there at runtime: people that designed custom field bridges for collections will have their bridge wrapped in an `IterableBridge` (for instance) without them knowing, which will probably result in their field throwing a `ClassCastException` when indexing (they'll be passed an element instead of the whole collection).
Introducing the new `ContainerAwareBridge` interface offers a solution to users experiencing this issue, but I wonder how we should advertise this interface, especially because it'll be needed in 5.6 while it wasn't in 5.5..."	2016-12-05 10:27:02	0.0		1
2373	">  wonder how we should advertise this interface

I'm not sure I understand your remarks...

This interface overrides the default behaviours for containers bridges. The default behaviour is to index the elements of a container and if you instead want to index the whole container you can use this interface.

> especially because it'll be needed in 5.6 while it wasn't in 5.5...

That's not true, TikaBridge does not work in 5.5 with byte[] arrays anyway. You just have a different error. Adding this interface doesn't affect what was working on 5.5...unless I'm missing something."	2016-12-05 11:09:20	0.0		0
2374	To be fair, I didn't check if it works with 5.5 but given the nature of the problem I assume it doesn't work with it. I might be wrong	2016-12-05 11:17:43	0.0		0
2375	"@DavideD Let me clarify: there are two different issues.

The first is the one you're addressing, with bridge providers. Bridge providers were being passed a context that returns the element type, and gives no information about the actual type of objects that will be passed to the bridge in `set(String name, Object value, Document document, LuceneOptions options)`. That made the `TikaBridgeProvider` fail for `byte[]` because `byte` was passed, and it didn't support `byte`, only `byte[]`.

But there is another, nastier issue here.

We used to pass the element type instead of the actual property type because we usually wrap provided bridges within an `ArrayBridge`, `IterableBridge` and so on. That's what is done in `BridgeFactory#getFieldBridgeFromBridgeProvider`. So the bridge providers need not know about the actual container type, we handle it for them and only pass them the elements, one after another.

That the theory, but in practice it didn't work until we fixed HSEARCH-2419 (or at least not in every case: I'll spare you the details). So until we fixed HSEARCH-2419 , bridges applied on container types (arrays, iterables, maps) were actually being passed the container when indexing with `set(String name, Object value, Document document, LuceneOptions options)`. So there are users out there (I know some) that built field bridges that supported containers well before, and it used to work.

So... now that we fixed `HSEARCH-2419`, those bridges will now be wrapped in our container bridges (as they should have been from the beginning), and will now get passed container *elements* in `set(String name, Object value, Document document, LuceneOptions options)`. Since they're expecting containers, they'll fail when trying to cast the value to a container.

This means that their code that used in 5.5 (because HSEARCH-2419 hadn't been fixed) won't work in 5.6 anymore.

Your interface would solve this second issue, because custom bridges supporting containers would only have to implement this interface. But still, it requires users to do something, and that's why I wondered ""how we should advertise this interface"".

Is it clearer?"	2016-12-05 11:27:49	0.0		1
2376	"The FieldBridge contract is very vague about which value is going to be index, we should probably take the chance to decide the correct behaviour and add some tests for it. Users will need to update their bridges this time if they used a different behaviour.

That said, unless we still require the @IndexEmbedded annotation I don't see how we can know if the user wants to index the container or the element and still keep back-compatibility.  This would mean revert some of the changes and post-pone them after 5.6.

I would treat all this as a follow up issue, though. As it requires some additional discussion how to address it. In particular, I would expect to receive the whole object when I create a custom field bridge and not the element (current default behaviour).

EDIT: Removed duplicated paragraph and fixed wording"	2016-12-05 12:09:52	0.0		1
2377	This is my 0.02$, @Sanne WDYT?	2016-12-05 12:10:15	0.0		0
2378	Jenkins, test this please	2016-12-05 13:26:08	0.0		0
2379	"For your information, I'm working on a solution to https://hibernate.atlassian.net/browse/HSEARCH-2508 that may remove the need for this PR, because the `if (bridge instanceof TikaBridge)` may disappear.

Please do not merge until I get the chance to open a PR."	2016-12-06 18:08:16	0.0		0
2380	"@yrodiere Can't you rebase your current work on top of this one? We still need to add the missing test. Also probably the changes in the TikaBridgeProvider will still be needed.

Then you can close this issue and  send a PR that solves both issues"	2016-12-06 18:25:49	0.0		1
2381	"@DavideD Right, there's more to this PR than just `ContainerAwareBridge`. Thanks for the tip. I'll take as much from this PR as possible. I only expect to remove the `ContainerAwareBridge` interface, which won't make sense anymore because the default will be not to wrap bridges in container bridges.
I'll keep you updated."	2016-12-07 08:28:03	0.0		0
2382	"@DavideD I cherry-picked most commits in my PR for HSEARCH-2508: #1253 , thanks!

I'm closing this one for now, since HSEARCH-2508 must be fixed for other reasons and makes the `ContainerAwareBridge` obsolete (container bridges are now only applied when explicitly requested by users). Feel free to reopen this PR if you disagree."	2016-12-07 14:30:36	0.0		0
2383	Rebased on latest master.	2016-12-06 09:27:46	0.0		0
2384	merged! thanks	2016-12-13 21:53:35	0.0		0
2385	"We really need to avoid requesting a service reference at runtime, it is quite problematic to handle these requests concurrently && efficiently.
(I know we did it in other places too, but original POC was meant to be cleaned up)

Could you pass the reference to this service to the constructor in some way, while making sure that the reference to the service is requested just once at initialization?"	2016-12-05 12:07:09	0.0		1
2386	"I don't think I can:

 * those queries are created in `org.hibernate.search.elasticsearch.impl.ElasticsearchJsonQueryDescriptor.createHSQuery(SearchIntegrator)`, and that method is generic SPI. We could change it, but we certainly couldn't (shouldn't) add Elasticsearch-specific parameters.
 * the query descriptors themselves may be created from public static methods (such as `org.hibernate.search.elasticsearch.ElasticsearchQueries.fromJson(String)`), making it impossible to pass a reference to the service when creating the query descriptor.

What I can do is:

 * request the reference only once in the `ElasticsearchHSQuery` constructor, which is not much better since queries are generally only executed once or twice. 
 * replace the GsonService by static methods, but I did exactly the opposite a few months ago, so that would be a shame.
 * maybe see why requesting a reference to a service is such a performance issue? Especially given we have a cache...

Also, I'd like to mention two facts:

 1. We already request a reference to a service each time we create a query through `org.hibernate.search.engine.impl.ImmutableSearchFactory.createHSQuery(Query, Class<?>...)` (provided Elasticsearch is being used)
 2. This code is only executed in debug mode, which I'd expect to be less efficient than normal mode.

What do you think?"	2016-12-05 13:00:03	0.0		0
2387	"@Sanne I just had a look at the service manager code, and I guess the efficiency issue you hinted at was with those synchronized start/stop methods in `org.hibernate.search.engine.service.impl.StandardServiceManager.ServiceWrapper`.

Couldn't we use plain `java.util.concurrent.locks.Lock`s under the hood instead of our own counters here? That way, we'd have a read lock (that would ensure nobody is going to start/stop a service while it's being used) and a write lock (that would ensure we're free to start/stop a service without breaking anyone else). I was thinking of something similar to what you did in `org.hibernate.search.backend.impl.lucene.LazyExecutorHolder`."	2016-12-05 13:12:20	0.0		1
2388	"We can do many things, but it will always be more efficient to start all needed services at boot time, and stop them ""at the end"". Incidentally, the ServiceWrapper could be made more efficient for parallel runtime access, but that would come at other costs which I don't think we should be paying. For example, I wouldn't assume that using a ""plain Lock"" would be better than the current code.

Think in terms of limits: what would happen on a single threaded app? For every single query, we'd be starting the service, then stopping it again. For some services this *might* be cheap, but for others it will not, it will at very least be allocating several objects which we don't have to.

If you prefer we can resolve that later, but bear with me that I'd expect the ""perfect version"" of the code to not stop/start services at runtime, unless there's specific reasonable need. For example we'll have to live with the fact that a Service might need to be started lazily in reaction of starting a new IndexManager, for example started lazily by a dynamic sharding request to expand.

"	2016-12-05 19:44:04	0.0		0
2389	"> Think in terms of limits: what would happen on a single threaded app? For every single query, we'd be starting the service, then stopping it again.

Ok, that not what I had in mind. It's true in the general case, though even in a single threaded app, `GsonService` is likely to be referenced elsewhere, so it likely wouldn't be started for each query. It is for instance referenced by `org.hibernate.search.elasticsearch.client.impl.JestClient`, which is referenced (indirectly) by `ElasticsearchIndexManager`, whose lifespan is large enough to make this start/stop dance quite rare.

Anyway... We're both willing to avoid this potential performance issue here. I'll simply repeat what I said yesterday: in that particular case, there's no single, non-service object created when bootstrapping that could hold the reference to this service and pass it along to queries at runtime. I would _like_ to do so, but it's simply not possible in the current state of the code. Or at least I'm unable to see how it's possible. Which is why I'm trying to think of alternative solutions...

I created a ticket to address potential performance issues in the `ServiceManager` for those few cases where we are forced to repeatedly acquire reference to services. We should avoid it, I agree, but there may be cases where we can't do otherwise. See https://hibernate.atlassian.net/browse/HSEARCH-2504"	2016-12-06 09:23:08	0.0		0
2390	Thanks, merged!	2016-12-02 18:12:29	1.0	2016-12-02 18:12:21	0
2391	"Same as above, I think this should something like that:

```
catch (Throwable t1) {
	try {
		if ( transaction.isActive() ) {
			transaction.rollback();
		}
	}
	catch(Throwable t2) {
		someLogger.warn(""Error while automatically rolling back a transaction"", e); // Maybe we could remove that
		t1.addSuppressed(t2);
	}
	throw t1;
}
```"	2016-12-02 16:38:14	1.0	2016-12-02 18:12:21	1
2392	"I think we should handle exceptions with more caution. Instead of `finally`, this would be:

```
catch (Throwable t1) {
	try {
		entityManager.close();
	}
	catch(Throwable t2) {
		someLogger.warn(""Error while automatically closing an entity manager"", e); // Maybe we could remove that
		t1.addSuppressed(t2);
	}
	throw t1;
}
entityManager.close(); // Let any exception when closing propagate, since we didn't catch any exception before
```"	2016-12-02 16:40:43	1.0	2016-12-02 18:12:21	1
2393	it's a test helper. Either way, they will end up on our logs?	2016-12-02 16:47:15	1.0	2016-12-02 18:12:21	0
2394	What do you gain with that? If anything fails, the test fails and we'll have both exceptions logged.	2016-12-02 16:48:24	1.0	2016-12-02 18:12:21	0
2395	"Maybe in that case... Though I'm not sure that exceptions get logged when they are bypassed due to another exception being thrown in a finally block.
Before Java 7, people advised to explicitly log those, but it might be because the default behavior simply sends the stacktrace to `System.err`.
Since Java 7, I must admit I don't know what happens in that case.

In the helper below, though, I'm positive the Throwable t gets swallowed and never appears in logs if an exception arises when rolling back.

Sorry to be pestering, but exceptions being swallowed in tests, especially assertion failures, are a real pain. And since we get to solve the issue in a single, widely used helper, I don't see why we wouldn't..."	2016-12-02 16:55:42	1.0	2016-12-02 18:12:21	1
2396	"ok, pushed an update. I checked how the ""suppressed exception"" looks like, it's quite nice and  readable under the original exception so we shouldn't need the log."	2016-12-02 17:33:27	1.0	2016-12-02 18:12:21	0
2397	Rebased just now. Ready for review!	2016-12-06 15:27:47	0.0		0
2398	merged as well! Thanks	2016-12-13 22:29:29	0.0		0
2399	"@Sanne  I think I addressed your concerns.

I'm really not sure the `unwrap(Class<?>)` pattern fits here, though. It feels rather clumsy in our case, mostly because bridges have no common superinterface exposing the unwrap(?)` method, so we must rely on utils anyway whenever we want to unwrap bridges. This is true for client code (metadata processor and such), but also for the implementation of the `unwrap(Class<?>)` method itself... 

So if we have to use utils, we might as well make the `unwrap` code in bridges as simple as possible and stick to its previous form.

I'll let you judge of that: I added the `unwrap` method change in the very last commit, you can remove it easily if you agree with me."	2016-12-05 09:49:13	0.0		1
2400	Jenkins, test this please	2016-12-05 13:39:14	0.0		0
2401	"thanks for that research @yrodiere ! I see your point, yet I'd prefer to take the change so that other people maintaining the code won't be surprised by the contract.

I've added one commit to make your function simpler, I hope it makes you feel better about that ;-) 87afa4f"	2016-12-05 19:11:31	0.0		1
2402	(rebased and merged)	2016-12-05 19:11:41	0.0		0
2403	"The ""unwrap"" method is typically implemented by letting the method return some internal component which matches the type of the parameter. That's for example the contract on `EntityManager`.

An example implementation is here:
 - org.hibernate.search.jpa.impl.FullTextEntityManagerImpl.unwrap(Class<T>)

Just wondering.. did you consider that? Did it not fit?

Your solution doesn't look bad, it's just that given the specific name I would expect it to follow the well known pattern."	2016-12-02 22:07:22	0.0		0
2404	When it comes to these exceptions I think that quoting the value which the user attempted to use is helpful to understand the error. I see the previous version of the error had it, why remove this?	2016-12-02 22:19:52	0.0		1
2405	"Since you no longer requested the service, you should not release it either.
Might as well not keep the reference to _serviceManager_ ..."	2016-12-02 22:21:51	0.0		1
2406	no longer needed?	2016-12-02 22:22:07	0.0		0
2407	Ok, I understand now what you're doing with those messages..	2016-12-02 22:28:40	0.0		0
2408	"I did not consider it, you're right. The `unwrap()` method in `NullEncodingTwoWayFieldBridge` was already there and I just generalized its use. Maybe following the `unwrap(Class<?>)` pattern would be better.

I'll see what I can do, but it probably won't look perfect: we actually have two ways of unwrapping: one which goes through container bridges, the other that doesn't."	2016-12-05 09:14:52	0.0		1
2409	Right, I missed that. Fixed, thanks!	2016-12-05 09:49:46	0.0		0
2410	"N.B. the ORM upgrade is not going to the 5.7 branch (neither now nor later).

For the test fix, I have a better solution too coming which requires Java 8 (also restricted to 5.7 only)

A preview is here:
 96ad5f727b189ecc3d2b89cae61589d805847703"	2016-12-02 12:00:42	1.0	2016-12-02 15:40:58	0
2411	Rebased and merged, thanks!	2016-12-02 15:41:08	1.0	2016-12-02 15:40:58	0
2412	thanks, I'll re-enable the mariadb tests on ci.hibernate.org	2016-12-02 15:46:45	1.0	2016-12-02 15:40:58	0
2413	thanks, I'll re-enable the mariadb tests on ci.hibernate.org	2016-12-02 15:47:36	1.0	2016-12-02 15:40:58	0
2414	Updated and rebased	2016-12-05 11:32:53	1.0	2016-12-06 09:59:21	0
2415	Jenkins, test this please	2016-12-05 13:25:38	1.0	2016-12-06 09:59:21	0
2416	Rebased and merged. Thanks!	2016-12-06 09:59:35	1.0	2016-12-06 09:59:21	0
2417	"I couldn't find any place where we use the terms ""logical indexes"". Ok with you if I replace that with ""index managers""?"	2016-12-02 14:29:26	1.0	2016-12-06 09:59:21	0
2418	"Because I invented on the fly :)

No worries, I'll update it"	2016-12-05 11:29:03	1.0	2016-12-06 09:59:21	0
2419	@DavideD It seems checkstyle is not happy. Could you please fix the [code formatting errors](http://ci.hibernate.org/job/hibernate-search-PR/1760/org.hibernate$hibernate-search-orm/console)?	2016-11-30 18:04:14	1.0	2016-12-02 08:02:06	1
2420	@yrodiere I think it is fixed now	2016-12-01 15:17:20	1.0	2016-12-02 08:02:06	0
2421	@DavideD I have some doubts related to naming, see above. Apart from that, it looks good!	2016-12-01 17:19:55	1.0	2016-12-02 08:02:06	0
2422	Renamed the way you suggested	2016-12-01 19:08:12	1.0	2016-12-02 08:02:06	0
2423	Rebased and merged. Thanks!	2016-12-02 08:02:17	1.0	2016-12-02 08:02:06	0
2424	Backported to 5.5.	2016-12-02 08:38:57	1.0	2016-12-02 08:02:06	0
2425	"I know BridgeProviderContext is SPI and can't be changed, but this naming scheme scares me. It feels like `getReturnType` is somewhat random (not ""exact"")...

I see two solutions:

 * we could deprecate the old `getReturnType` and use more appropriate naming, like for instance `getPropertyType` and `getPropertyElementType`
 * or we could change the behavior of this method slightly, rename it `getContainerType` and make it return null when the property is not a container.

What do you think?"	2016-12-01 17:08:09	1.0	2016-12-02 08:02:06	1
2426	"Did you see there already are *two* classes named `TikaBridgeTest`? Maybe introducing a third class with a name this generic is not a good idea...
What would you think of ""TikaBridgeInputFormatTest""?"	2016-12-01 17:16:06	1.0	2016-12-02 08:02:06	1
2427	This class is called `TikaBridge[Support]Test`,  but I'll change it	2016-12-01 17:29:37	1.0	2016-12-02 08:02:06	0
2428	"I prefer the `getProperty[Element]Type` approach, I don't like the `getContainerType` one because sometimes it returns null and force me to check.

But I wanted to keep the patch simple without renaming other existing SPI.

Somewhere in the code I think I saw something like `getElementOrContainerType()`, would that be better?



"	2016-12-01 17:39:10	1.0	2016-12-02 08:02:06	1
2429	It's probably a good compromise until 6.0, yes. `getElementOrContainerReturnType`, then?	2016-12-01 18:12:08	1.0	2016-12-02 08:02:06	0
2430	"Thanks, merged!

Backporting it to 5.5."	2016-11-30 11:29:04	1.0	2016-11-30 11:25:28	0
2431	Any reason why you added `ReflectionHelper.`? Might as well remove it so that we see it's a method of this very class?	2016-11-30 09:57:42	1.0	2016-11-30 11:25:28	1
2432	"I'm wondering if it would be worth it to exclude `java.lang.Object`? Sounds like some useless work. Using the programmatic API to declare Search annotations on it would be weird to say the least.

But maybe, it's safer to also take it into account.

WDYT?"	2016-11-30 09:59:44	1.0	2016-11-30 11:25:28	1
2433	Wondering if `carries` is the right word here. As stated here, I wouldn't be sure the annotations on methods and properties are considered. It might be just me so feel free to ignore :).	2016-11-30 10:01:26	1.0	2016-11-30 11:25:28	0
2434	"I agree it would be weird (total nonsense, even) to index something on `Object`, at least in production. I guess we could imagine someone indexing `toString` for debugging purposes in a development environment. Though it'd still be weird.

Anyway, I don't think the number of classes inspected here is that important. We're talking about one execution per class in the hierarchy of each non-`@Indexed` Hibernate classes, and only when boostrapping the Search factory. Which is really not much work, especially since it does not involve I/O.

If we were talking about runtime code, why not, but in this case I find the weirdness of excluding `Object` more annoying than the performance hit (!) of inspecting the `Object` class."	2016-11-30 11:03:21	1.0	2016-11-30 11:25:28	1
2435	No particular reason, it was copy/paste I think. I'll remove it.	2016-11-30 11:04:27	1.0	2016-11-30 11:25:28	0
2436	"""Contains"" seemed especially fuzzy to me. It's okay for a method name, but here in the javadoc I wouldn't want any ambiguity. I'll try something else..."	2016-11-30 11:06:03	1.0	2016-11-30 11:25:28	0
2437	Yup, that was my overall feeling as well but I felt better mentioning it.	2016-11-30 11:22:53	1.0	2016-11-30 11:25:28	0
2438	Rebased and addressed (most of the) reviews.	2016-11-28 18:50:35	0.0		0
2439	"Looks like I have to explain a bit of the intent behind _performStreamOperation_, sorry for the lack of clear documentation.

Once upon a time, the MassIndexer would use its own dedicated IndexWriter. This implies that when the MassIndexer was running, any other change to the index would be blocked in wait for the index lock to be released.
The IndexWriter backend of the MassIndexer was different than the one being used by the ""transactional backend"": it would apply changes in parallel (no ordering guarantees) and no flushing between writes, while the traditional one would apply a ""block"" (a batch?) of changes at a time, to maintain strict order, and commit the IW at the end of each block.

We introduced the _performStreamOperation_ as a way to ""sneak by"" the changes required by the MassIndexer on the same IW already (possibly) open by the standard IW backend, bypassing the ""one change at a time"" requirement of the normal backend while reusing the same IW instance.
In practice this needed (and needs!) some care, as now we had two incoming streams of changes on the same IW, with subtly different semantics. N.B. it is not an option to simply apply the strongest required semantics, as otherwise the performance penalty is unacceptable (like taking 1 month rather than 1 minute to do certain operations).

The main flaw of the current design, is that the conceptual ""streams"" have no starting point and no end; the Flush command for example is needed by the MassIndexer to signal for the phase of ""I've sent a bunch of stream commands, now I'm done so now I want you to finally flush to disk.."" This is actually a very tricky point, as the previous ""stream ops"" being applied in parallel need to be strictly ordered all before the flush.

I hope that clarifies the *original* intent of the _performStreamOperation_ method. We should likely rethink such things now, as it all looks quite obsolete when combined with many other changes we applied to the backend. For example I wonder if we should explicitly open/close ""stream tasks"", making the explicit Flush command unnecessary, or rather separate the high level flush concept from actual index commits, which should be a backend implementation detail.

On this PR now: 

My main question is why are you testing semantics of _performStreamOperation_ ? Is Infinispan using this for anything else than the MassIndexer?

Keep in mind that the MassIndexer is the only one which is meant to use this method, and it's assumed to never produce more than one entry for the same ID. Your test intentionally violates this property .. in other words, the _performStreamOperation_ might have an ill name and I'm sorry for that but it doesn't guarantee ordering within the ""stream"", as it expects a stream of *unrelated* data points.

Let's also keep https://hibernate.atlassian.net/browse/HSEARCH-2282 in mind! 

"	2016-11-28 21:54:15	0.0		1
2440	"| why are you testing semantics of performStreamOperation

Infinispan's MassIndexer uses a ```org.hibernate.search.backend.spi.BatchBackend``` that in turn ends up calling this method. The test just does the same.

| but it doesn't guarantee ordering within the ""stream"",

That's fine, currently we don't expect the stream to be ordered

"	2016-11-29 08:20:51	0.0		1
2441	"| never produce more than one entry for the same ID. Your test intentionally violates this property

This is not a requirement of the test, I pushed a new version with different ids"	2016-11-29 08:30:16	0.0		1
2442	"@yrodiere removed the ""sync by default"", it is sync only for the flush.
@Sanne changed the test to go through the ```BatchBackend``` instead of calling performStreamOperation directly"	2016-11-30 10:54:57	0.0		1
2443	"Merged! Thanks.

As commented above, I still suspect the reproducer might eventually fail with the wrong timings, but we'll see if it comes to that.

Also, I don't think raising the refresh timeout makes any difference?"	2016-12-14 15:17:15	0.0		1
2444	If we force a refresh when flushing (`.refresh( true )` above), then we should not use `refreshAfterWrite` here but simply `false`. Otherwise there'll be two refreshes: one when performing the flush, and the other in `org.hibernate.search.elasticsearch.client.impl.BackendRequestProcessor.RequestProcessingRunnable.processAsyncWork()`.	2016-11-28 16:47:57	0.0		1
2445	If I understand correctly, this test relies quite heavily on `hibernate.search.default.elasticsearch.refresh_after_write` being false. There's a PR about to be merged that made that `true` by default in tests, and it might become the new default before the final release (I mean, it's not impossible). Could you please set the value of this property to `false` explicitly, just to be sure?	2016-11-28 16:57:17	0.0		1
2446	"Could you please use `Elasticsearch` (no capital ""S""), just to be consistent with other tests?"	2016-11-28 17:00:48	0.0		1
2447	From what I can read in [the documentation](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-flush.html), since we're not setting `wait_if_ongoing` to `true` here, the operation will fail if a flush operation is in progress. I'd say it's not what we want, especially given that we're already executing the operation asynchronously and thus waiting a bit more is no big deal.	2016-11-28 17:05:55	0.0		0
2448	"So, here, we're switching the default behavior (when `forceAsync` is `false`) from asynchronous to synchronous.

From what I can see in `org.hibernate.search.indexes.spi.IndexManager.performStreamOperation(LuceneWork, IndexingMonitor, boolean)`, the behavior when `forceAsync` is `false` ""will depend on the backend configuration"". So I guess we could make it async by default if we wanted to.

I must admit I don't quite grasp the implications of that change, though. The whole concept of being able to execute ""stream"" operations asynchronously or synchronously seems rather blurry to me, so I must be missing something.

@Sanne , what do you think?"	2016-11-28 17:19:27	0.0		1
2449	Nice catch!	2016-11-28 17:20:59	0.0		0
2450	"| So I guess we could make it async by default if we wanted to

Indeed. Bear in mind that the  ```DirectoryBasedIndexManager``` [doesn't have](https://github.com/hibernate/hibernate-search/blob/master/engine/src/main/java/org/hibernate/search/indexes/spi/DirectoryBasedIndexManager.java#L102) a ""async stream"" mode currently, ```forceAsync``` is ignored. But the ```ElasticsearchIndexManager``` does have it and it is now the default on master. Making it ```sync``` as this PR does is up for discussion, and the fact that both index managers behave differently causes some issues https://hibernate.atlassian.net/browse/HSEARCH-2492.

IMO, an ```async``` default would need an improved API, either exposing something to detect if there is any ""in-flight"" changes not applied to index  (so that my flush will actually flush), or maybe return a ```Future```


"	2016-11-28 18:45:22	0.0		0
2451	The second parameter should be `!forceAsync` instead of `false`, I think. Otherwise `forceAsync` is simply ignored.	2016-12-05 13:43:47	0.0		1
2452	"Short story:

I left it ```false``` to maintain the behaviour currently in place: all work is async by default, so ```forceAsync``` is not used as before.

Long Story:

This is what the contract says about this flag:
```
@param forceAsync if true, the invocation will not block to wait for it being applied. 
When false this will depend on the backend configuration.
```

In the ```DirectotyBasedIndexManager``` there is a configuration ```worker.execution``` which assumes values ```{sync,async}``` that defines how works are applied to the index. In theory, the ```forceAsync``` flag should have no effect if the backend is already async. So assuming ```worker.execution=async``` and ```forceAsync=false```, what should happen? Having ```!forceAsync``` would make it sync... :disappointed: 

You may be asking why does it matter since the ```ElasticsearchIndexManager``` does not honor ```worker.execution```?  Should it honor it? I realized answering those question and implementing missing pieces were not directly related to this PR (which is about flush per entity) and maybe should be addressed in another JIRA, wdyt?
"	2016-12-05 14:19:52	0.0		0
2453	"You're right, I got confused. Obviously if it's async by default, then forcing async shouldn't do anything... Sorry about that.

About `worker.execution`:

 1. It only applies to non-stream works (from what I can see in the code), so in our case it's not relevant
 2. Support is indeed missing for Elasticsearch. I added a ticket on JIRA so we can at least discuss it: https://hibernate.atlassian.net/browse/HSEARCH-2502"	2016-12-05 14:31:36	0.0		0
2454	"I think there's a race here: the _indexAsStream_ operations are merely scheduling work into a queue so that they can be batched with periodic writes. The _flush_ operation is issuing a flush request on the ES node, but it's not flushing this queue first.

I'll merge it anyway as it doesn't seem to affect this test in practice, and there's good progress here.."	2016-12-14 15:15:05	0.0		0
2455	@Sanne  ```ElasticsearchIndexManager#performStreamOperation``` is waiting for the async works to be applied to the index	2016-12-14 15:21:36	0.0		0
2456	thanks, that's what I was missing. Only on flush.. clever!	2016-12-14 15:28:56	0.0		0
2457	"Merged https://github.com/hibernate/hibernate-search/pull/1234#issue-192005213

Thanks"	2016-11-28 19:25:52	0.0		0
2458	I suppose we need to update the documentation as well in regards to the `@IndexEmbedded` not need anymore	2016-11-28 19:30:33	0.0		0
2459	"I had to add a commit, probably because of the different merged PRs now interacting:
 - https://github.com/hibernate/hibernate-search/commit/efd2830bb838d4f763975667b36769bbe40db705"	2016-11-28 20:29:04	0.0		0
2460	"@DavideD The container field bridges are not documented. There's a ticket to add the documentation: https://hibernate.atlassian.net/browse/HSEARCH-1574

@Sanne Right... Probably because of HSEARCH-2406, which enabled -engine tests on Elasticsearch"	2016-11-29 08:07:10	0.0		0
2461	"@Sanne @Davide About the maps/sets implementations in the metadata ( https://github.com/hibernate/hibernate-search/commit/133c54294cd6cc0c07101ca357478cbb39f8781f ).

The thing is, we used to use HashMap/HashSet, whose iteration order is notoriously unstable (it might change when you add new elements). But this iteration order is important: it determines in which order fields are added to a document, or in which order fields are added to the Elasticsearch mapping. And in some cases (most notably indexing in Elasticsearch), the order in which fields are added to the JSON document may change the code that is executed.

And so it happens that, in https://github.com/hibernate/hibernate-search/commit/e5382aaced0d9d9e4ba0361e3473a58428f88936, I fixed two aspects of the same bug. As a matter of fact, there are two places where we might change the JSON document when indexing:

 * [explicitly](https://github.com/hibernate/hibernate-search/commit/e5382aaced0d9d9e4ba0361e3473a58428f88936#diff-5c25139bd711d1dae0c48d6d1fa00536R65): when we add a property value to the JSON document. The `add` method seems a bit odd, but it's only so that we can support multi-valued fields,even though this information that a field is multi-valued is not part of our metadata.
 * [implicitly](https://github.com/hibernate/hibernate-search/commit/e5382aaced0d9d9e4ba0361e3473a58428f88936#diff-5c25139bd711d1dae0c48d6d1fa00536R79): when we implicitly create parent properties. For instance when we add a value for the property `foo.bar`, then `foo` has to be added to the JSON document as an object property, so we can set `bar` on it. This is done under the hood, but it is a document modification. And it does not follow the same rules as the ""explicit"" change, since multi-values are not at all supported in this case.

Thus, since there are two different places in the code where we change a document, there are two places where a field naming conflict could be detected. Which is why we have two error cases:

 1. when, for the the same field name, first an explicit change is performed (`add` sets a ""concrete"" value such as an integer, a date, etc. for field `foo`), and then an implicit one (`getOrCreate` tries to set a composite value, i.e. a JSON object for field `foo` in order to add the field `foo.bar`): https://github.com/hibernate/hibernate-search/commit/36cee0230910c124192c983b5e68e4215bb71ffd#diff-92dcdf2c51f954af5389442b38ba3de7R176
 2. when the changes happen in reverse order (first the implicit `getOrCreate`, then the explicit `add`): https://github.com/hibernate/hibernate-search/commit/36cee0230910c124192c983b5e68e4215bb71ffd#diff-92dcdf2c51f954af5389442b38ba3de7R208

Now, one can understand that if the iteration order over the fields is unpredictable, I can hardly test those two cases, because I won't have any guarantee on which field is added to the JSON document first, and so I won't be able to ensure I am in case 1 or in case 2.

That's where the map/set implementation come in play: by using `LinkedHashSet` and `LinkedHashMap`, I ensure that the metadata order is the same as the processing order in the `AnnotationMetadataProcessor`. Thus the metadata order becomes predictable to some extent. Not totally predictable, since we still rely on the order of the fields/methods returned by the JVM (which is undefined and not even guaranteed to be deterministic), but partially predictable: I can be sure, for instance, that `@Fields` on methods will appear in the metadata before `@Field` on attributes, because methods are processed first.

On a related subject, I don't find the reliance on a particular map/set implementation _that_ smelly. At least, not anymore than Java is smelly: the contract of `Set` and `Map` does not mention that the iteration order should be stable, so it's up to the implementation. I would gladly use the `StableSet` and `StableMap` interfaces, but there is no such thing.
`SortedSet` and `SortedMap` are not exactly what we want, because their only implementations (`TreeSet` and `TreeMap`) require a total order on the elements we add to these containers, and in this case we don't have one. Given two fields, we could order them by their field name, but what if two different `DocumentFieldMetadata` have the same name? They're not identical, but there's no way to say which one is ""greater"". And yes, this can happen, most notably [when class bridges are defined without a field name](https://github.com/hibernate/hibernate-search/commit/fc304a32133d07829eb542a7e85e4fe3b1c438bb)."	2016-11-29 08:54:11	0.0		1
2462	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2016-11-28 07:49:33	0.0		0
2463	Jenkins, add to whitelist	2016-11-28 09:31:47	0.0		0
2464	"@ttretter Thanks for taking the time to fix this!

Do you think you could also add a test? This would make the issue more obvious, and most importantly would prevent regression if we happen to change that class later.

You can add your test in `org.hibernate.search.test.query.dsl.DSLTest`, in the `hibernate-search-orm` module. You can copy/paste `.testPhraseQuery()`, for instance, and adapt the code to reproduce this particular issue."	2016-11-28 09:50:38	0.0		1
2465	This is probably too late for next Beta of 5.6 but I'm happy to release a 5.5 bugfix release later this week, just for this fix. Thanks!	2016-11-28 13:24:28	0.0		0
2466	"@ttretter Hi Timo! Any chance you could inject your test case in DSLTest as mentioned by @yrodiere ?

It would be nice if you could also sign the CLA for the **Hibernate** project on https://cla.jboss.org/index.seam (it's a very simple formality) and come back to us with your username once done.

Thanks!"	2016-11-30 10:31:09	0.0		1
2467	"@gsmet Hi Guillaume,
I've just added the testcase to the pull request (add removed some whitespaces afterwards).
I've also singned the CLA, the username is ttretter as well.

Cheers, Timo"	2016-11-30 14:47:58	0.0		0
2468	"@ttretter Thanks!

I reworked the commits a bit and merged. It's also backported to the 5.5 branch."	2016-11-30 22:05:37	0.0		0
2469	"Hi @Sanne 
any chance to get a Bugfix release for that?"	2017-01-09 10:24:11	0.0		0
2470	@ttretter you're right, sorry I forgot. We'll release it today. Thanks again!	2017-01-09 10:44:29	0.0		0
2471	@ttretter version `5.5.6.Final` was released now. Depending on were you are, you might be able to get it via Maven already or you might need some more hours for your favourite mirrors to sync up. Release notes and announcement will appear soon on in.relation.to .	2017-01-09 13:13:58	0.0		0
2472	@Sanne Thank you very much!	2017-01-09 13:51:45	0.0		0
2473	"Good analysis, thanks for that. I agree with you on not supporting to project a field which wasn't explicitly marked for ""projection capabilities"" (Store=yes for the lucene backend).

Storing the source document in ES is optional. I'm not sure if we want to keep indexing it, at the very least we should not rely on it to be stored so that we might introduce an option to skip it, as the storage and performance penalty might be unbearable for some.

With Lucene we also allow to project unknown fields as strings, but we already agreed that this legacy behaviour should not apply to ES.

You mention needing docValues as alternative. Why? I lost you from there onwards."	2016-11-25 14:07:31	0.0		0
2474	"> You mention needing docValues as alternative. Why? I lost you from there onwards.

It was a mistake, I meant field storage. I updated my original post.

> Good analysis, thanks for that. I agree with you on not supporting to project a field which wasn't explicitly marked for ""projection capabilities"" (Store=yes for the lucene backend).
> Storing the source document in ES is optional. I'm not sure if we want to keep indexing it, at the very least we should not rely on it to be stored so that we might introduce an option to skip it, as the storage and performance penalty might be unbearable for some.

I agree relying on the source document is far from ideal, but right now it's the only way to support projections properly (as I explained in the paragraph starting with ""Reminder:""). But yes, we could introduce a global parameter allowing users to use field storage for projections, and document the limitations.

> With Lucene we also allow to project unknown fields as strings, but we already agreed that this legacy behaviour should not apply to ES.

Right. Though the case at hand is slightly different: we're talking of known fields, with known metadata, but with storage disabled (store = NO). Currently those are being projected anyway (because we don't use field storage), while on Lucene an exception is raised."	2016-11-25 16:22:11	0.0		0
2475	I'll close this as it needs at least to update the PR metadata.	2017-02-20 14:15:44	0.0		1
2476	Updated	2016-11-25 12:30:47	1.0	2016-11-25 12:34:08	0
2477	Merged, thanks!	2016-11-25 12:34:19	1.0	2016-11-25 12:34:08	0
2478	"There's a repeatition of ""performance"". Maybe ""apply the writes optimally""?"	2016-11-24 16:36:08	1.0	2016-11-25 12:34:08	1
2479	"Should state ""for the Elasticsearch indexing service only"", maybe?"	2016-11-24 16:37:58	1.0	2016-11-25 12:34:08	1
2480	"I'd say ""Queries can use..."", or rephrase the whole sentence to basically state ""Query results can include ..."".

But ""Query results can use"" seems wrong: results don't ""use"" anything... "	2016-11-24 16:41:12	1.0	2016-11-25 12:34:08	1
2481	"Maybe this should be merged to the first paragraph? It seems we're repeating ourselves here.

Also, we can add a link to Elasticsearch: https://www.elastic.co/products/elasticsearch"	2016-11-24 16:44:31	1.0	2016-11-25 12:34:08	1
2482	"The modules ""sharedtestresources"", ""legacy"" and ""infinispan"" are not mentioned. Shouldn't we at least mention that those modules are private and/or obsolete and shouldn't be referenced directly from user projects?"	2016-11-24 16:51:52	1.0	2016-11-25 12:34:08	1
2483	"Not caused by your changes, I think this should be in italic; same with ""test"" below."	2016-11-24 16:52:03	1.0	2016-11-25 12:34:08	0
2484	thanks. rewrote this paragraph.	2016-11-25 12:22:18	1.0	2016-11-25 12:34:08	0
2485	I was hoping to keep it short, but ok I see that this might be necessary to be qualified..	2016-11-25 12:23:52	1.0	2016-11-25 12:34:08	0
2486	I need the first paragraph to be short. Here I'm indeed repeating the concept, as a closing point.. but  the real message is to make people aware that even if they opt for using ES it's still Lucene under the covers.	2016-11-25 12:26:41	1.0	2016-11-25 12:34:08	0
2487	There's a lot of stuff not being explained in the README, and whatever we write gets obsolete quickly. I'd rather not add details about stuff that occasional contributors are safe to ignore, the longer readme becomes unnecessarily scary.	2016-11-25 12:28:30	1.0	2016-11-25 12:34:08	0
2488	"""which is""=""saving you from"""	2016-11-25 13:48:37	1.0	2016-11-25 12:34:08	0
2489	Why is it though that you are stressing this point (using Lucene under the covers)? Seems this should be more an internal detail of ES itself?	2016-11-25 13:49:44	1.0	2016-11-25 12:34:08	0
2490	merged, thanks!	2016-11-28 20:28:28	0.0		0
2491	"N.B. that for the typical Hibernate Search user there is no such thing as ""adding new entities at runtime"". This capability is an implementation detail of the Infinispan integration, and possibly of other integrators (beyond the Hibernate ORM integration).

This documentation is specific for the Hibernate Search / Hibernate ORM integration, so to not make it all too confusing for them I'd avoid such notes.

I'll edit this commit to remove this specific change, then merge it all.. I hope you don't mind?"	2016-11-28 19:22:09	0.0		0
2492	Not at all :) Thanks!	2016-11-29 08:13:11	0.0		0
2493	pushed a new version.	2016-11-25 14:47:24	0.0		0
2494	"Merged. I simply removed an obsolete commit in `LazyExecutorHolder`:

```
			//N.B. this method needs to be invoked within
			//ownership of the executorStateWriteLock.
```

(the code changed and the lock is now acquired inside the method)

Thanks!"	2016-11-28 08:48:03	0.0		0
2495	thanks @yrodiere ! don't forget to mark the JIRA issues resolved ;)	2016-11-28 13:07:56	0.0		1
2496	"Shouldn't this be protected by locking `previous.executorStateReadLock`? Since the attribute is no longer `volatile`, that seems necessary... ?

Also, I wonder if the whole executor + readLock + writeLock stuff shouldn't be encapsulated in a separate object... What I find dangerous is that just after we copied the executor, one could call `shutdown` on a previous `LuceneBackendResources`, which would shut down the executor but would not clean up the `asyncIndexingExecutor` attribute on any new `LuceneBackendResources` that happened to share the same executor. And then we would have tasks being submitted but never handled.

Having a single, shared object hold the references to the locks would *and* to the executor would probably solve the issue. Then, when starting or shutting down the executor, we wouldn't change an attribute of `LuceneBackendResources`, but an attribute of that single, shared object that happens to be referenced from `LuceneBackendResources`, which is slightly different.

Or maybe there's another mechanism that guarantees that we'll never call a method on a previous version of the resources after having created a new version?"	2016-11-24 13:38:25	0.0		1
2497	Maybe `indexModificationReadLock` would be better (with a capital 'M')?	2016-11-24 13:41:22	0.0		1
2498	Good ideas, I'll apply them.	2016-11-24 15:38:11	0.0		0
2499	great! merged this, after re-disabling the `DirectoryProviderForQueryTest` test as it depends on HSEARCH-2477 as well.	2016-11-28 16:45:33	0.0		0
2500	merged	2016-11-23 15:22:23	0.0		0
2501	"@yrodiere Can you rebase this PR, please?

It seems there are some conflicts with the latest master
"	2016-11-28 17:29:57	1.0	2016-11-28 18:11:11	1
2502	@DavideD Done. But it's strange, I did not experience any conflict when rebasing... Though GitHub did state there was one. Anyway... Let's wait for the CI, it'll be safer.	2016-11-28 17:37:11	1.0	2016-11-28 18:11:11	0
2503	"Looks good now, there were some issue with the name of test method
"	2016-11-28 17:53:53	1.0	2016-11-28 18:11:11	0
2504	"Merged https://github.com/hibernate/hibernate-search/pull/1225

Thanks, looks good."	2016-11-28 18:14:57	1.0	2016-11-28 18:11:11	0
2505	No need to change it, but this could be a `Number` instead of `Object`, isn't it?	2016-11-28 18:01:49	1.0	2016-11-28 18:11:11	1
2506	Yes, it should have been a `Number` :/	2016-11-29 08:11:00	1.0	2016-11-28 18:11:11	0
2507	Actually, it seems some tests are failing randomly (namely `org.hibernate.search.test.projection.ProjectionConversionTest.concurrentMixedProjections()`). I'll have a look.	2016-11-23 12:29:02	0.0		1
2508	I ignored the test and created https://hibernate.atlassian.net/browse/HSEARCH-2484 .	2016-11-23 13:26:20	0.0		0
2509	Rebased and ready for review!	2016-11-23 17:34:14	0.0		0
2510	"Rebased and merged https://github.com/hibernate/hibernate-search/pull/1224,
thanks"	2016-11-28 17:05:53	0.0		0
2511	"I changed my commit and rebased: this should be better.

This solution is a bit more twisted when it comes to calling the monitor, but otherwise it seems fine (it's even ready for when we'll add methods to `IndexMonitor`) and it should work just as well.

### Details:

I didn't move the loop to the handler, because the handler was specific to each backend request, and even the monitor it delegated to was specific to each backend request (theoretically, you may have two backend requests in the same bulk that have a different monitor).

Even if that wasn't an issue, tying the handler to the bulk instead of tying it to the backend request would have forced me to include action-specific code in the handler (to distinguish actions that require incrementing the monitor, like `Update` from those that don't, like `Delete`).
"	2016-11-18 15:32:33	0.0		0
2512	"nice, thanks for going the extra mile!
"	2016-11-18 15:44:37	0.0		0
2513	"merged
"	2016-11-18 15:54:43	0.0		0
2514	"The `IndexingMonitor` can become a contention point when it's invoked too frequently, for example when running on servers with many CPUs, one `MassIndexer` job will use them all in parallel, and the pattern is relatively efficient because it attempts to not share much; the monitor is one of the exceptions.

For this reason it takes a `long` argument, so that its counters can be incremented by values larger than one; so I would expect a Bulk Request not cause invoking the `IndexingMonitor#documentsAdded( 1L )` method N times, but invoke it with a parameter N.

On the other hand, I like your idea of having the `handle` method to accept the `BulkResultItem` argument. 
Could you move this loop into the `BackendRequestSuccessHandler` implementation? There it can inspect the bulk result, and invoke the `IndexingMonitor` once as necessary.
"	2016-11-18 12:37:39	0.0		1
2515	"I'll see what I can do...
But I'd like to point out that the only other uses of `IndexingMonitor` only increment it by 1. Which is why I implemented it that way: it sure didn't seem to be a concern with the Lucene indexing service, so I figured there was not reason it should be a concern with the Elasticsearch indexing service. Maybe we should have a look at the Lucene side too (`org.hibernate.search.backend.impl.lucene.works.AddWorkExecutor.performWork(LuceneWork, IndexWriterDelegate, IndexingMonitor)` for instance).
"	2016-11-18 13:17:34	0.0		0
2516	"> But I'd like to point out that the only other uses of IndexingMonitor only increment it by 1. 

ah, interesting! It's not how I originally intended it. Another thing to fix :)
"	2016-11-18 13:23:57	0.0		0
2517	#1217 has just been merged, and I rebased this one. Ready for review!	2016-11-23 14:01:22	0.0		0
2518	Very nice, great job!	2016-11-23 17:09:57	0.0		0
2519	"Here! All your concerns should have been addressed:
- I only do as little double boxing as possible (see the last commit)
- I added a commit (the last one) that changes the projection result for missing coordinates from `Double.MAX_VALUE` to `null`.

The sort behavior is unchanged: entities without coordinates are considered furthest by default. It seems to me that it should stay that way for now: it's more or less consistent with the previous behavior (which used the distance to (0,0), which for most coordinates is a large distance).
By the way, the fact that we now return null for projections is likely to trigger NPEs in some applications... Maybe we should postpone that last commit to Hibernate Search 6.0?
"	2016-11-18 17:43:50	0.0		1
2520	merged	2016-11-23 15:22:48	0.0		0
2521	"Would you really expect this? Especially when the sort is descending, having those with a null value listed on top seems counter intuitive. I think the previous behaviour - to not list them at all - was nicer.
"	2016-11-18 12:49:10	0.0		1
2522	"we could still project it as `null`?
"	2016-11-18 12:50:29	0.0		1
2523	"This code section is extremely performance sensitive, especially regarding memory consumption. We need to keep these results as `double`, not `Double`.
"	2016-11-18 12:51:41	0.0		1
2524	"Same here: I'm concerned about memory consumption of this object as we'll be allocating many of them during a query.
Would it be possible to avoid having to wrap all the values into boxing objects? We already have reports of `HitEntry` being too large.
"	2016-11-18 12:52:25	0.0		1
2525	"rather than changing the `coordinate` method, which is forcing you to return a `Double` rather than a `double`, you could check for this document to actually have both coordinates in advance, and if not skip the collection.
"	2016-11-18 13:05:32	0.0		1
2526	"As in the `Collector`, I think we need to keep using primitives for each lat/lon value, and you can do so by checking in advance for the fields to exist in the `Bits` instance. If not, eagerly return false.
"	2016-11-18 13:09:52	0.0		1
2527	"In light of the other suggestions, maybe you can keep the original signature?
I don't like this one, as the invoker of the method should be responsible to not invoke this with null values, rather than the method implementation being responsibl to work around for such a case.
"	2016-11-18 13:13:34	0.0		1
2528	"Maybe... But we'd have to convert the `Double.MAX_VALUE` returned by Elasticsearch to `null`, in that case. I'll see if it can be done reliably. One thing that bothers me is I'm not sure I will be able to do the same with sorts (consider the value is null), and I'd rather have the projection and sorts be consistent.
"	2016-11-18 13:20:08	0.0		0
2529	"Two things:
1. The fact that a value is listed or not has nothing to do with sorts. It's related to distance constraints (distance queries), which are orthogonal to the sorts.
2. _If_ you also have a constraint on distance, the entities with null latitude/longitude will probably not appear in the search results, since `Double.MAX_VALUE` is larger than any max distance you might have set (except ``Double.MAX_VALUE`).

I'll update the doc to make that more obvious.
"	2016-11-18 13:25:21	0.0		0
2530	"I'll see what I can do regarding those `Double`s.
"	2016-11-18 13:26:50	0.0		0
2531	"thanks, merged!
"	2016-11-15 19:17:45	0.0		0
2532	"should we change these to plural forms? host nameS .. serverS
"	2016-11-15 14:38:56	0.0		1
2533	"Right. Done.
"	2016-11-15 15:00:44	0.0		0
2534	"Loogs good to me; merged. Thanks!
"	2016-11-15 14:31:20	1.0	2016-11-15 14:30:40	0
2535	"Hi @gustavonalle sorry for the delay. I think we could go with your idea of exposing the method which builds the ""standard"" ErrorHandler; could you make a proposal about that?

Also, did you notice that you can inject the ErrorHandler instance in the configuration Properties?
"	2016-11-15 19:32:07	0.0		1
2536	@Sanne Updated	2016-11-23 13:05:19	0.0		0
2537	rebased and merged. Thanks!	2016-11-23 15:57:05	0.0		0
2538	"This will need a little bit of javadoc.
"	2016-11-09 14:05:01	0.0		0
2539	"I'd prefer to keep the logic in `SearchConfiguration` implementations to the bare minimal, so that it's easy to create a different implementation.

Could you undo moving these methods, and simply have the `getErrorHandler()` of this implementation return null?
"	2016-11-09 14:07:55	0.0		1
2540	"we could simply invoke the `searchConfiguration.getErrorHandler()` here, and if it's not-null give priority to that one.

Ideally, if the ERROR_HANDLER property is also defined log a warning to let people know that it's going to be ignored.

As an alternative strategy you could convert it into a Service, which means you can treat it as a ProvidedService when you need to inject one from Infinispan.
"	2016-11-09 14:09:55	0.0		1
2541	"It's self explanatory, what do you have in mind?
"	2016-11-09 14:49:18	0.0		0
2542	"Let me detail my use case:

```
class MyErrorHandler {

  public MyErrorHandler(ErrorHandler configuredErrorHandler) {
      ...
  }
  ...
}
```

By moving the creation to the Configuration level, it allows me to decorate the configured ErrorHandler and return it.

Not sure about Services: would it create a single ErrorHandler per JVM? One ErrorHandler per `SearchIntegrator` is enough.

What about undoing everything and exposing the creation logic at SPI level `org.hibernate.search.spi.ErrorHandlerCreator` instead? I can simply re-use it as a building block for my custom ErrorHandler
"	2016-11-09 15:12:07	0.0		1
2543	"I _had_ in mind something like ""return null unless you want to override it"", but that depends on how we address your other points.

I know we don't document much, especially self-explanatory methods, but when it comes to SPI a little guidance is needed.
"	2016-11-09 15:42:45	0.0		0
2544	"Ok so you want to wrap whatever is being configured by the user. I had missed that.
[Services won't fit this either then - although a Service is 1 per integrator, unless you want to provide the same instance to each]

Do you need to handle some error internally in Infinispan, while still forward to the user other errors?
"	2016-11-09 15:49:47	0.0		0
2545	"Exposing the ErrorHandler creation as an SPI might be acceptable if you really must, but I'd prefer to avoid it.
"	2016-11-09 15:57:57	0.0		1
2546	"> although a Service is 1 per integrator

I was with the impression hsearch services were based on `java.util.ServiceLoader` and thus 1 instance only for across all SearchIntegrator...

> Do you need to handle some error internally in Infinispan, while still forward to the user other errors?

Yes. On Infinispan, during topology changes, there is a small time window where a lock obtention fails due to transient ownership changes, and my custom error handler catches that and redirect the work to the rightful owner. 
"	2016-11-09 16:33:28	0.0		0
2547	"@gsmet I added the DocumentFieldPath type so it's a bit less ""weird"": https://github.com/hibernate/hibernate-search/pull/1217/commits/e4d013b4ce5ed2124f792fdc221ee82def04280e (HSEARCH-2451 Introduced DocumentFieldPath). I kept the `getAbsoluteName` methods on `DocumentFieldMetadata` / `FacetMetadata` for now, because it seemed a bit easier to use to me, but I can remove it if you feel it's not necessary.
"	2016-11-09 17:00:19	0.0		0
2548	"Jenkins, retest this please.
"	2016-11-17 16:54:26	0.0		0
2549	OK, merged, thanks!	2016-11-23 13:57:40	0.0		0
2550	"Care to explain this change? (maybe a separate commit would be in order)
"	2016-11-08 19:59:41	0.0		1
2551	"Looks like you roll this back in the following commit. Maybe you should remove this change from this commit?
"	2016-11-08 20:02:56	0.0		1
2552	"Are we sure we don't want at least the field name in the error message? We are losing some info.
"	2016-11-08 20:04:05	0.0		1
2553	"Didn't look at the path to arrive here but we are sure the user can't get this error? If he can, we should move this to the logger.
"	2016-11-08 20:08:40	0.0		1
2554	"s/facetRelativedName/facetRelativeName/
"	2016-11-08 20:12:08	0.0		0
2555	"Is the sourceFieldName absolute or relative? As you wanted to be clear everywhere, it might be a good idea to be more precise.
"	2016-11-08 20:13:05	0.0		0
2556	"The comment looks outdated.
"	2016-11-08 20:14:27	0.0		0
2557	"Should it really be a debug level message?
"	2016-11-08 20:15:19	0.0		1
2558	"Maybe rename the method `addFacetFieldMapping`?
"	2016-11-08 20:16:52	0.0		1
2559	"Or you wanted to make it more general? If so maybe Subfield?
"	2016-11-08 20:19:38	0.0		1
2560	"A few lines below (does not appear in the diff but just expand the lines), s/representic/representing/
"	2016-11-08 20:21:21	0.0		0
2561	"Just to be sure, we only serialize the properties, not the method? (I would add a `@JsonIgnore` to be on the safe side)
"	2016-11-08 20:22:49	0.0		1
2562	"If feels really weird to have the `absoluteName` and the `relativeName`. Maybe it's time to introduce a `FieldPath` enclosing the prefix and the relative name and having a method building the absolute name?
"	2016-11-08 20:27:22	0.0		1
2563	"Is there a reason why we do not include the embedded metadata in the various maps?
"	2016-11-08 20:30:37	0.0		0
2564	"Not related to your patch but I dislike the fact that the default value of encoding is `AUTO` while this value is not supported when exploiting `FacetMetadata` later on. It's quite misleading.

Defining the encoding type is indeed mandatory, not optional.

Not sure what to do about it but I thought I might as well mention it.
"	2016-11-08 20:53:27	0.0		0
2565	"OK, I see how it was the easiest way to fix the issue, considering the current state of the FacetMetadata thing and the fact that dates are mapped to long, which is not very convenient for Es.

But I don't like it very much.

I didn't look at the Lucene part or at which changes would be needed to do that but couldn't we keep the `AUTO` value in the `FacetMetadata` and determine the encoding type in the Lucene specific part, such as what we do here, considering we have the sourceField at hand?

Without looking at the code, I'd say the issue is that for Lucene we probably need to determine the encoding type several times.

Just thinking out loud.
"	2016-11-08 21:00:58	0.0		1
2566	"Right. I fixed it in the actual commit where we introduce the new way to implement facets.
"	2016-11-09 07:51:18	0.0		0
2567	"Well, defining the encoding type is optional to _users_.
The problem here is probably that we use the API type (`FacetEncoding`) in the metadata, where it doesn't really fit. And more generally, the issue is that the available types are really Lucene-specific. With that in mind, I wouldn't change that just yet and wait for 6.0...
"	2016-11-09 07:53:14	0.0		0
2568	"Right. Fixed.
"	2016-11-09 08:00:58	0.0		0
2569	"It's more a `ConversionContext` bug than a problem with this commit, really: the conversion context only contains _bean_ context (javabean class, javabean property path), but nothing about the document field. I'll add a commit to make the conversion context include the field name in exceptions when we have it, but I can't do miracles without breaking or misusing `ConversionContext`.
"	2016-11-09 09:53:16	0.0		1
2570	"Right. Fixed it; actually there was a message in the logger for that already (used on the Lucene side).
"	2016-11-09 10:37:14	0.0		0
2571	"Right, fixed it.
"	2016-11-09 10:38:39	0.0		0
2572	"Right, fixed it.
"	2016-11-09 10:39:43	0.0		0
2573	"That code goes back to long before this PR (it's even been refactored at least twice), and similar debug messages are generated for other types of mappings (regular fields, bridge-defined fields). Probably not something to address in this PR.
I created a separate JIRA: https://hibernate.atlassian.net/browse/HSEARCH-2458
"	2016-11-09 11:00:51	0.0		0
2574	"Yes, that's really annoying: what we call ""fields"" in Lucene are called ""properties"" in ES, and ES gives ""fields"" a totally different meaning.

I renamed to `addSubfieldMetadata`. Not very correct, but at least it's not ambiguous.
"	2016-11-09 11:06:16	0.0		0
2575	"I fixed it in the other PR ( #1168 ). Thanks.
"	2016-11-09 11:09:20	0.0		0
2576	"We use Gson, not Jackson. Gson seems only serializes fields, and not methods (unless we use custom serializers).

The reflective type adapter (the default) seems to really only consider fields: https://github.com/google/gson/blob/gson-parent-2.4/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L147

And anyway, the `Expose` annotation (used to ignore data when we cannot mark fields as ""transient"") can only be applied to fields, not to methods:

```
@Target(ElementType.FIELD)
public @interface Expose {
```

Also, _if_ the result of this method was being serialized, a good load of tests would be failing, because ""initializedFields"" would not be understood by Elasticsearch.
"	2016-11-09 11:18:04	0.0		0
2577	"It doesn't feel weird to me, but I agree enclosing it in a separate object would be cleaner. I think we could leverage the `PathContext` to generate those paths, too. 
I'll work on that.
"	2016-11-09 11:22:24	0.0		1
2578	"For some other maps there is, as we sometime want to include only non-embedded metadata (especially when generating the ES mapping). Here, we never want that, but we might as well be consistent.
Anyway, we'll all agree that something has to change in TypeMetadata. Nothing urgent, though: I'd say it's 6.0 stuff.
"	2016-11-09 11:28:00	0.0		0
2579	"The issue is mainly that we don't have Lucene-specific metadata, so we're putting this lucene-specific encoding in the general metadata. Like we do for a lot of other things.

If we wanted to move the automatic encoding resolution around, there's no Lucene-specific, central place to store the resolved encoding, so the only thing we could do would be to do type resolution every time we need the actual encoding, which would be in `org.hibernate.search.engine.spi.DocumentBuilderIndexedEntity.addFacetDocValues(Document, DocumentFieldMetadata, FacetMetadata, Object)`. Which I find far more unappealing than adding that flag in the current metadata.
Note that it's not an issue of duplicating code (we only use the encoding in one place, it seems), but really more an issue of re-executing bootstrap code again and again at runtime.

Anyway, you're telling me ""we need to break free of Lucene dependency"", and that's definitely not the purpose of this PR, but more of 6.0. Once we have Lucene-independent APIs and (perhaps more importantly) engine, we'll add Lucene-specific metadata on top of engine metadata, as we will for Elasticsearch, and everything will be fine. Until then, well... we'll do as best we can.
"	2016-11-09 11:42:07	0.0		0
2580	"If feels really weird to have the `absoluteName` and the `relativeName`. Maybe it's time to introduce a `FieldPath` enclosing the prefix and the relative name and having a method building the absolute name?
"	2016-11-08 20:27:22	0.0		1
2581	"Is there a reason why we do not include the embedded metadata in the various maps?
"	2016-11-08 20:30:37	0.0		0
2582	"Not related to your patch but I dislike the fact that the default value of encoding is `AUTO` while this value is not supported when exploiting `FacetMetadata` later on. It's quite misleading.

Defining the encoding type is indeed mandatory, not optional.

Not sure what to do about it but I thought I might as well mention it.
"	2016-11-08 20:53:27	0.0		0
2583	"OK, I see how it was the easiest way to fix the issue, considering the current state of the FacetMetadata thing and the fact that dates are mapped to long, which is not very convenient for Es.

But I don't like it very much.

I didn't look at the Lucene part or at which changes would be needed to do that but couldn't we keep the `AUTO` value in the `FacetMetadata` and determine the encoding type in the Lucene specific part, such as what we do here, considering we have the sourceField at hand?

Without looking at the code, I'd say the issue is that for Lucene we probably need to determine the encoding type several times.

Just thinking out loud.
"	2016-11-08 21:00:58	0.0		1
2584	"@yrodiere looks good to me. I let you merge it with the others!
"	2016-11-04 14:22:50	1.0	2016-11-04 14:55:58	0
2585	"I would have expected a `Collections.unmodifiableCollection` here.
"	2016-11-04 14:00:22	1.0	2016-11-04 14:55:58	1
2586	"OK, withdrawn, you fixed it in the next commit :). I thought you missed my earlier review comments!
"	2016-11-04 14:16:09	1.0	2016-11-04 14:55:58	0
2587	"This one is good to go too.
"	2016-11-03 16:51:13	1.0	2016-11-04 10:43:34	0
2588	"OK, well, I like this one :).
"	2016-11-03 16:49:47	1.0	2016-11-04 14:56:24	0
2589	"Good to go, once the other PRs are merged!
"	2016-11-03 10:12:23	1.0	2016-11-04 10:43:26	0
2590	"Apart from my question, it looks good to me and it's nice to see this one tackled!
"	2016-11-02 18:19:17	1.0	2016-11-04 10:43:16	0
2591	"OK, this one is good to go too.
"	2016-11-03 16:44:59	1.0	2016-11-04 10:43:16	0
2592	"Why did you get rid of using `luceneOptions`?
"	2016-11-02 18:06:54	1.0	2016-11-04 10:43:16	1
2593	"Simply because there's no way to add a doc values field using luceneOptions. It seems to be designed that way, seeing the examples in the documentation.
I agree it's a bit weird, though. Another ticket, maybe?
"	2016-11-03 07:52:58	1.0	2016-11-04 10:43:16	0
2594	"Silly me. I think I would prefer to keep the original field in addition with the sortable one. It's more in line with what we do elsewhere. WDYT?

About adding something in LuceneOptions, I wonder if it's worth it, given the FieldBridge 2.0 plan but I agree it's a bit harsh for the user to have to go in this sort of details while we usually hide all that machinery from him. If I had to do something, I think I would add a method to add a sortable field which adds the original field and the doc values one in one go and hide this logic from the user. Of course, it is a bit redundant with the fact that we declare the field sortable a few lines above but I don't think we can do better given the current API. Anyway, I agree this part is for another day!
"	2016-11-03 10:49:46	1.0	2016-11-04 10:43:16	0
2595	"It's not strictly necessary, but as you wish. I amended the commit.

About making it easier, I created the ticket: https://hibernate.atlassian.net/browse/HSEARCH-2447
"	2016-11-03 11:21:17	1.0	2016-11-04 10:43:16	0
2596	"Merged! Thanks!
"	2016-11-02 18:20:51	1.0	2016-11-02 18:20:43	0
2597	"Nice! Good to go once the pending one is merged.
"	2016-11-03 10:09:36	1.0	2016-11-04 10:42:35	0
2598	"thanks, merged
"	2016-10-31 10:40:19	1.0	2016-10-31 10:40:11	0
2599	"Changed the status to ""On ice"" waiting for a global decision on the Es 5 support.
"	2016-11-02 18:13:45	1.0	2016-11-04 17:17:02	0
2600	"> Now, I polished it a bit, notably by including the parameter in the generated doc, but there's not much to do as long as we stay on ES 2.x.

I'd be happy to apply this then, if you can isolate the good parts.

ES5 is out of scope for the specific issue. We also need this to be able to document that (if?) it works fine with ES 2.3, 1.5, ... and possibly setup CI jobs.
"	2016-11-04 11:35:12	1.0	2016-11-04 17:17:02	1
2601	"@gsmet @Sanne I refactored the PR to remove any ES 5.0-related stuff, and to support ES 2.0/2.1 (which happen to require a different configuration). Ready for review!

(FYI, the ES 5.0 stuff has been moved to my ES 5.0 branch: https://github.com/yrodiere/hibernate-search/compare/HSEARCH-2384...yrodiere:HSEARCH-2434)
"	2016-11-04 15:40:53	1.0	2016-11-04 17:17:02	0
2602	"cool, thanks! Reviewing..
"	2016-11-04 15:55:04	1.0	2016-11-04 17:17:02	0
2603	"don't we need the groovy plugin on ES 2.1 ?

I'm having failure with the spatial tests when running it with:

> mvn clean install -Pelasticsearch-2.0 -DtestElasticsearchVersion=2.1.0
"	2016-11-04 16:17:41	1.0	2016-11-04 17:17:02	0
2604	"It doesn't exist below version 2.2 :/ Maybe with different coordinates, I'll have a look.
"	2016-11-04 16:19:04	1.0	2016-11-04 17:17:02	0
2605	"Okay, it's org.elasticsearch:elasticsearch-groovy. I'll try that and force-push.
"	2016-11-04 16:20:09	1.0	2016-11-04 17:17:02	0
2606	"Stupid question but do we really want to spend time supporting such older versions?

IIRC, Sanne, you told me AWS supported 2.3. I would make us support 2.3, 2.4 (and hopefully 5) but wouldn't care about older releases of Es.
"	2016-11-04 16:25:17	1.0	2016-11-04 17:17:02	0
2607	"indeed, I wouldn't spend too much time supporting older versions.

If it doesn't work, fine. The PR is still valid as it does start the tests using the older version ;)

But I wondered, as the `README` seemed to suggest that 2.1 is supposed to work.
"	2016-11-04 16:29:58	1.0	2016-11-04 17:17:02	0
2608	"Yeah, I think we should get rid of that and support:
- the last version supported by AWS (provided it's not too old)
- the last 2.x version
- eventually 5.x

And that's all. I don't think it has any value to support Elasticsearch versions which are probably not supported anymore.
"	2016-11-04 16:56:23	1.0	2016-11-04 17:17:02	1
2609	"@gsmet @Sanne Fixed. Or at least the server now starts with groovy support even for 2.0/2.1. May we at least keep the settings, even if we advertise we don't support it in the documentation? Please? :/
"	2016-11-04 17:01:47	1.0	2016-11-04 17:17:02	1
2610	"yes, happy to keep it for now. Thanks!
"	2016-11-04 17:02:19	1.0	2016-11-04 17:17:02	0
2611	"merged
"	2016-11-04 17:17:54	1.0	2016-11-04 17:17:02	0
2612	"So, this issue does not exist anymore?
"	2016-11-04 15:25:51	1.0	2016-11-04 17:17:02	0
2613	"It's handled by `elasticsearch-maven-plugin`, which essentially does that in our place.
"	2016-11-04 15:29:47	1.0	2016-11-04 17:17:02	0
2614	"Looks good overall.

I think ba86523077d30ffa0a198b01446f6ff2387bd44b would merit its own JIRA as it's a bug not directly related to Es 5 (you can keep it in this PR but a specific JIRA would be nice).

As stated on IRC, I have my concerns about the Integer.MAX_VALUE thing. Waiting for your feedback on this.
"	2016-10-31 09:47:54	1.0	2016-11-02 09:10:30	0
2615	"By the way, here's the commit that removed the size=0 feature: https://github.com/elastic/elasticsearch/commit/dcc598c414184ffa6cf06b3a69eb15767e274330 (for the record)
"	2016-10-31 14:58:51	1.0	2016-11-02 09:10:30	0
2616	"OK, looks like we're on the safe side for the Integer.MAX_VALUE thing, thanks for checking. I let you split the other commit in 2 with a different JIRA number and merge?

Thanks!
"	2016-10-31 15:34:41	1.0	2016-11-02 09:10:30	1
2617	"Merged, thanks!
"	2016-11-02 09:11:03	1.0	2016-11-02 09:10:30	0
2618	"Do we agree this particular thing is not related to the fix at hand? (just to be sure I understand correctly)
"	2016-10-31 09:26:27	1.0	2016-11-02 09:10:30	1
2619	"You're right, it's not. I noticed there was an issue here so I fixed it, assuming _I_ introduced it with my changes, but it seems it was already there. Should I revert this particular change?
"	2016-10-31 09:50:47	1.0	2016-11-02 09:10:30	0
2620	"I would appreciate another JIRA. It changes the way we interpret the user query so I would prefer having a specific issue mentioning it.
"	2016-10-31 15:33:22	1.0	2016-11-02 09:10:30	0
2621	"BTW, I dont understand the following paragraph in the documentation

>    This will work as long as there is not a local analyzer defined with the same name. If that’s the case, Hibernate Search will ignore the analyzer when Elasticsearch is used as backend and log a warning. This might sound complicated but we are looking for ways to ease the experience.

What is a local analyzer? Do you mean that if there is a `@AnalyzerDef` with the same name, this one cancels the use of the Elasticsearch analyzer of the same name but does not make use of the local analyzer either?
Is that worth ""just"" a warning in that case?
"	2016-10-28 07:14:33	1.0	2016-10-28 13:32:43	0
2622	"Thanks, some important improvements in here. I highlighted a couple minor expressions I found confusing, but they are not blockers.

I can push this and send a follow-up if you prefer?
"	2016-10-28 10:56:21	1.0	2016-10-28 13:32:43	0
2623	"What is the `+1 just push it` flag used for in general?
"	2016-10-28 13:04:17	1.0	2016-10-28 13:32:43	0
2624	"@Sanne I've fixed the sentence issue around the DSL. On the Elasticsearch yellow status, I wrote down my understanding but maybe I'm missing something.
But if you are correct, then we did not need the readiness option in the first place so I'm confused.

I think we can push as is and do a follow up.
"	2016-10-28 13:05:42	1.0	2016-10-28 13:32:43	0
2625	"> What is the +1 just push it flag used for in general?

We use it in two cases:
- Reviewer thinks it's ok to integrate, but can't do that himself right away
- Reviewer suggested minor improvements, but leaves it up to the requestor to choose to follow up on the suggestions or decide to push it as-is

I guess the first case is getting obsolete now that we have the option to merge from the web gui..
"	2016-10-28 13:31:14	1.0	2016-10-28 13:32:43	0
2626	"cool, merged! Thanks
"	2016-10-28 13:32:51	1.0	2016-10-28 13:32:43	0
2627	"Why would you suggest this? Seems quite a bad practice, you have the option to start your ES node as a single node, so it will be green, and faster.
"	2016-10-28 10:44:52	1.0	2016-10-28 13:32:43	1
2628	"should we quote or italicize ""more like this"" queries? The sentence seems weird, if you don't already know in advance what you mean.
"	2016-10-28 10:53:25	1.0	2016-10-28 13:32:43	1
2629	"""and all but one the query generated by""
I don't understand this. I assume a word is missing?
"	2016-10-28 10:54:13	1.0	2016-10-28 13:32:43	1
2630	"I just noticed that in ES 5.0, if you have no replica, your index will never be green. It wasn't the case in ES 2.x, I think.
"	2016-10-28 11:07:24	1.0	2016-10-28 13:32:43	1
2631	"Actually I'm wrong. I checked a second time, and it seems I messed up the configuration somewhere.
"	2016-10-28 11:21:11	1.0	2016-10-28 13:32:43	0
2632	"@Sanne I am not sure I am following you but my understanding is that:
- a developer will only start a single node
- the default settings do require more than one nodes to be green

Hence the option to run at yellow. Am I missing something?
"	2016-10-28 12:59:46	1.0	2016-10-28 13:32:43	0
2633	"Fixed and pushed a new version.
"	2016-10-28 13:03:21	1.0	2016-10-28 13:32:43	0
2634	"I asked Stephen from Joda to know when he plans to release 2.9.5: https://github.com/JodaOrg/joda-time/issues/373 .
"	2016-10-27 17:34:53	0.0		0
2635	"Closing this PR following our discussion. A PR is coming for [HSEARCH-2436](https://hibernate.atlassian.net/browse/HSEARCH-2436) (document the bug)
"	2016-10-28 07:35:12	0.0		0
2636	"So... I think I would have liked the last commit to be more step by step. There are a lot of changes which could have been made separately (and, I think, be more understandable).

Overall I like the changes, apart from the original issue, they fix a few things that's been bothering me for a while.

Btw, I don't know if it's GitHub bugging but it looks like there is a conflict (but let's wait for the other PR to be merged before rebasing).
"	2016-11-02 18:59:17	1.0	2016-11-04 14:56:09	1
2637	"Thanks; I rebased, addressed your concerns and split the last commit in two. We can now wait for the other PR to be merged.
"	2016-11-03 09:23:31	1.0	2016-11-04 14:56:09	1
2638	"@gsmet I just rebased this on #1197 (HSEARCH-2393), because it seems some tests enabled in #1197 are affected by these changes. So I'd rather have the CI execute those tests.
I noticed that while working on https://hibernate.atlassian.net/browse/HSEARCH-2425, which happens to have been fixed by accident in the last commit in this PR...
"	2016-11-03 11:00:32	1.0	2016-11-04 14:56:09	0
2639	"So, as we discussed with @gsmet  yesterday, I had to add some fixes because of the rebase on top of HSEARCH-2393: the latter enabled more tests, and some of those are failing due to this PR. It's basically a pre-existing bugs that only surfaced because I changed the way we generate the ES mapping (we crawl through the document fields directly instead of going through the properties).

Anyway, @gsmet: I just updated the last two commits following your comments. I didn't rename the `documentFieldMetadata`/`documentFieldNameToFieldMetadata` properties to make it more obvious that they don't include non-embedded fields, because if I did, I should rename almost every property in `TypeMetadata`: none of them includes embedded information along with the main type's information. If we do something, I thing it should be part of a broader refactoring, but then the relevance to HSEARC-2420 and 2432 becomes less and less clear.

I'll wait for you to come back to me before merging, since I'm not sure you had time to express all of your concerns.
"	2016-11-04 08:07:20	1.0	2016-11-04 14:56:09	1
2640	"@gsmet So... Actually, the more I fix it, the more tests begin to fail because previous bugs were hiding other ones. I'll just make another PR for all this metadata refactoring, because it's looking more and more like a major issue. Sorry for the noise...
"	2016-11-04 08:37:31	1.0	2016-11-04 14:56:09	0
2641	"Alright, I extracted the problematic code to #1216 . We should be able to merge this PR as soon as the other one has been approved and merged.
"	2016-11-04 09:20:50	1.0	2016-11-04 14:56:09	0
2642	"We usually put things in this order:
- tests
- private methods
- inner classes used by the tests

It would be nice to conform to this order.
"	2016-11-02 18:26:15	1.0	2016-11-04 14:56:09	0
2643	"Same remark about the order!
"	2016-11-02 18:26:36	1.0	2016-11-04 14:56:09	0
2644	"Make it a private class maybe?
"	2016-11-02 18:27:13	1.0	2016-11-04 14:56:09	1
2645	"Make it a private class maybe?
"	2016-11-02 18:27:26	1.0	2016-11-04 14:56:09	1
2646	"Is it used anywhere else? If not, let's make it private (I suppose it was the purpose of dropping `DocumentIdHelper`).
"	2016-11-02 18:55:04	1.0	2016-11-04 14:56:09	1
2647	"@yrodiere you mention on the JIRA comments that this problem affects the Lucene backend as well.

Worth moving the test to `-engine` ?
"	2016-10-28 15:35:39	0.0		1
2648	"@Sanne Yes, I'll see if I can highlight the issue in an -engine test.
"	2016-10-28 15:39:51	0.0		0
2649	"I meant to suggest to move this one, not to add an additional one. We don't want to have too many redundant tests checking for the same things ;)
"	2016-10-28 15:53:21	0.0		1
2650	"@Sanne I'll move to -orm, then. -engine tests are not yet executed on Elasticsearch. Not even sure yet when they will be...
"	2016-10-28 16:18:36	0.0		0
2651	"> I'll move to -orm, then. -engine tests are not yet executed on Elasticsearch. 

Right, forgot about that. Let's merge this then, the missing test for the embedded mode is an orthogonal issue.
"	2016-10-31 10:55:31	0.0		0
2652	"@Sanne I rebased on master: the build was failing because of https://hibernate.atlassian.net/browse/HSEARCH-2438 , which was merged to master a few minutes ago
"	2016-10-31 10:59:59	0.0		0
2653	"@gsmet I addressed your concerns. Thanks!
"	2016-10-31 11:01:05	0.0		0
2654	"merged, thanks all!
"	2016-10-31 11:44:13	0.0		0
2655	"I know it's preexisting to your patch but we should probably move this declaration to where it is used. It makes no sense to have it here.
"	2016-10-28 14:49:37	0.0		1
2656	"Mmmmh, did I miss something or if `!isRoot`, the whole work we did above was totally useless?
"	2016-10-28 14:51:48	0.0		0
2657	"You're right, there's something wrong in here. I'll see what I can do (probably just add a `else`)
"	2016-10-28 15:40:37	0.0		0
2658	"Thanks for the PR. I've thought a bit about it, and I'm not sure about that fix, though:
- The condition probably should be using `org.hibernate.search.engine.impl.ImmutableSearchFactory.isMultitenancyEnabled()` instead of checking the tenant ID. Granted, the effect would be the same, since tenant IDs are mandatory once multi-tenancy is enabled, but this would be easier to read.
- It seems to me that, if the tenant ID contains an underscore, there will still be a problem (https://hibernate.atlassian.net/browse/HSEARCH-2420)

The last one in particular make me thinks we're really shoving the issue under the carpet here. I think we should rather never try to extract the ID from the Elasticsearch ID, and simply use an in-document ID field. By chance, one pending PR added an ID field: https://github.com/hibernate/hibernate-search/pull/1192 .

I'll see if I can get your test working this way, and will submit a PR.
"	2016-10-27 08:00:56	0.0		1
2659	"|  I think we should rather never try to extract the ID from the Elasticsearch ID, and simply use an in-document ID field

Sounds good. Out of curiosity, what will go in the ES `_id` field?
"	2016-10-27 08:40:34	0.0		1
2660	"> Out of curiosity, what will go in the ES _id field?

Same as now: the actual document ID (as opposed to the entity ID), which is the concatenation of the tenant ID and the entity ID. Its main purpose is to allow ES to know when an update should erase an existing document.
It would only be of use to Hibernate Search when querying by entity ID (using ES's ""_id"" queries), but this type of query is not implemented yet. Right know, users can only query on the document fields (which include the tenant ID and the entity ID in separate fields anyway).
"	2016-10-27 09:05:46	0.0		0
2661	"Closing this PR because of my follow-up: https://github.com/hibernate/hibernate-search/pull/1201

Thanks!
"	2016-10-28 07:40:23	0.0		0
2662	"@gustavonalle Thanks! I just force-pushed a few minor changes a will merge when the build passes.
"	2016-10-26 09:01:09	1.0	2016-10-26 10:02:15	0
2663	"Merged! Thanks.
"	2016-10-26 10:02:26	1.0	2016-10-26 10:02:15	0
2664	"Yes, it's good to go!
"	2016-11-03 17:16:52	1.0	2016-11-03 19:15:55	0
2665	"Not worth a fix but we agree we don't need to test for the id to be not null here?
"	2016-11-03 13:04:52	1.0	2016-11-03 19:15:55	1
2666	"I'm surprised the `hashCode` only uses the class `hashCode`, while the `equals` involves the id?
"	2016-11-03 13:06:07	1.0	2016-11-03 19:15:55	1
2667	"If we end up amending this commit, let's fix the message and use ""explicitly"".
"	2016-11-03 13:07:10	1.0	2016-11-03 19:15:55	1
2668	"Same here.
"	2016-11-03 13:07:38	1.0	2016-11-03 19:15:55	0
2669	"Same here.
"	2016-11-03 13:07:59	1.0	2016-11-03 19:15:55	0
2670	"Well, let's do a search and replace if we decide to fix it :).
"	2016-11-03 13:08:23	1.0	2016-11-03 19:15:55	1
2671	"Couldn't we change this to use the specific type instead of changing all the tests?
"	2016-11-03 13:10:59	1.0	2016-11-03 19:15:55	1
2672	"Maybe remove the commented `@RunWith`?
"	2016-11-03 13:16:44	1.0	2016-11-03 19:15:55	1
2673	"If we end up amending this commit, I don't think the `'s` is in order here. No need to fix it if we don't amend the commit though.
"	2016-11-03 13:17:30	1.0	2016-11-03 19:15:55	1
2674	"Missing ""if"" maybe?
"	2016-11-03 13:18:09	1.0	2016-11-03 19:15:55	1
2675	"Missing `@Override`?
"	2016-11-03 13:23:48	1.0	2016-11-03 19:15:55	1
2676	"Maybe ""Dynamic boosting"" would be a better title?
"	2016-11-03 13:26:21	1.0	2016-11-03 19:15:55	1
2677	"I would have used the plural form:

> Static boosts (`@Boost`) are, however, supported.

I think it sounds more natural but maybe it's just me.
"	2016-11-03 13:27:05	1.0	2016-11-03 19:15:55	0
2678	"Nice trick!
"	2016-11-03 13:28:27	1.0	2016-11-03 19:15:55	0
2679	"Maybe ElasticsearchUnsupported**Features**IT?
"	2016-11-03 13:28:53	1.0	2016-11-03 19:15:55	1
2680	"Very minor: is it a Lucene query even when using Elasticsearch?
"	2016-11-03 13:35:10	1.0	2016-11-03 19:15:55	0
2681	"Not related to this line but to the commit message of 78a0f9add77d9180aacd309f3c737237a1074f64: look for ""HSEARCH-HSEARCH""
"	2016-11-03 13:39:07	1.0	2016-11-03 19:15:55	0
2682	"I am not sure about removing these tests. Do we test elsewhere that the indexed fields are effectively numeric? If not, I would add your new test for Es/Lucene agnostic tests that the field bridge is OK but I think I would create backend specific tests to check that the indexed document is OK.
"	2016-11-03 13:51:16	1.0	2016-11-03 19:15:55	0
2683	"Interesting. In which case might we have a conflict? I suppose it's related to the null case (just a vague remembering of a previous PR)? Maybe we should add a prefix or a suffix for this field specific to Es to avoid conflicts?
"	2016-11-03 13:56:44	1.0	2016-11-03 19:15:55	1
2684	"I have a sentiment of _déjà vu_. Same remark about the fact that I'm worried we're losing tests checking the document content.
"	2016-11-03 14:02:25	1.0	2016-11-03 19:15:55	0
2685	"Actually we do: if the IDs are both null, the objects are not equal.
"	2016-11-03 15:03:53	1.0	2016-11-03 19:15:55	0
2686	"Actually it's on purpose. It's the only way to have consistent hashcodes throughout the lifecycle of an entity (which may involve ID changes) and still have different hashcodes sometimes. I could have used a constant though. See this: https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-entity-identifier/

Bottom line: it's both the simplest solution and the only way to do it right. Since we don't need performance here, I wouldn't bother doing otherwise. And believe me, it hurts me to admit that.
"	2016-11-03 15:26:01	1.0	2016-11-03 19:15:55	0
2687	"This would still require changes in the tests, because in some places we queried Blog and _not_ its subclasses. Which we can't do without filtering explicitly on the internal class field (passing the type to `createFullTextQuery` will include subtypes). And we can't filter explictly on the internal class field in a backend-agnostic way.
I figured it would be better to at least be consistent (always query the root type), since this test is already hard enough to understand...
"	2016-11-03 15:37:03	1.0	2016-11-03 19:15:55	1
2688	"Done.
"	2016-11-03 15:38:16	1.0	2016-11-03 19:15:55	0
2689	"Done.
"	2016-11-03 15:38:21	1.0	2016-11-03 19:15:55	0
2690	"Done.
"	2016-11-03 15:38:24	1.0	2016-11-03 19:15:55	0
2691	"Done.
"	2016-11-03 15:38:28	1.0	2016-11-03 19:15:55	0
2692	"Done.
"	2016-11-03 15:40:11	1.0	2016-11-03 19:15:55	0
2693	"Done.
"	2016-11-03 15:41:40	1.0	2016-11-03 19:15:55	0
2694	"Done.
"	2016-11-03 15:42:17	1.0	2016-11-03 19:15:55	0
2695	"Done.
"	2016-11-03 15:46:02	1.0	2016-11-03 19:15:55	0
2696	"Done.
"	2016-11-03 15:47:11	1.0	2016-11-03 19:15:55	0
2697	"Done.
"	2016-11-03 15:48:38	1.0	2016-11-03 19:15:55	0
2698	"Done.
"	2016-11-03 15:51:33	1.0	2016-11-03 19:15:55	0
2699	"I fixed the message.
"	2016-11-03 16:13:16	1.0	2016-11-03 19:15:55	0
2700	"It's really not the kind of test we should be spending time on, in my opinion. White-box integration testing feels like luxury when we're lacking simple unit tests...
Anyway, I copied the older version of those tests to a new `LuceneNumericFieldTest` class.
"	2016-11-03 16:52:56	1.0	2016-11-03 19:15:55	0
2701	"Solving the issue it in a backward compatible way is probably impossible.
As we discussed, I created https://hibernate.atlassian.net/browse/HSEARCH-2448 to at least throw explicit exceptions when the problem occurs.
"	2016-11-03 16:56:19	1.0	2016-11-03 19:15:55	0
2702	"And same answer :) I created `LuceneProgrammaticMappingTest` nevertheless.
"	2016-11-03 17:06:47	1.0	2016-11-03 19:15:55	1
2703	"That's right, the focus is on `JMHBenchmarks.concurrentReadWriteTest:readWriteTestReader`; it's good to see that the other metrics didn't change.
"	2016-10-26 14:10:44	1.0	2016-10-26 14:51:44	0
2704	"fixed as suggested and rebased.
"	2016-10-26 14:12:21	1.0	2016-10-26 14:51:44	0
2705	"@gustavonalle might be in good enough shape for you to give it a try as well?
"	2016-10-26 14:13:17	1.0	2016-10-26 14:51:44	0
2706	"to try it out:
- https://github.com/hibernate/hibernate-search/pull/1196/files#diff-40176244800f79a0f62639216680e695R906
"	2016-10-26 14:14:19	1.0	2016-10-26 14:51:44	0
2707	"Thanks for the explanations! Ok to merge on my side, I'll let you see with @gustavonalle .
"	2016-10-26 14:28:08	1.0	2016-10-26 14:51:44	0
2708	"cool, merged it.
"	2016-10-26 14:52:07	1.0	2016-10-26 14:51:44	0
2709	"I just tried, and the code below does the same job while at the same time limiting the chances new rules on the parent are not taken into account in this module (because it only overrides the smaller possible subset of the configuration). Maybe it's worth it?

``` xml
            <plugin>
                <groupId>de.thetaphi</groupId>
                <artifactId>forbiddenapis</artifactId>
                <executions>
                    <execution>
                        <id>verify-forbidden-apis</id>
                        <configuration>
                            <!-- Redefine the ForbiddenApis configuration as some rules need
                                 to be relaxed in this CLI tool;
                                 e.g. we use System.out.println() instead of enforcing a logger -->
                             <bundledSignatures combine.self=""override"">
                                 <!-- This will automatically choose the right signatures based on 'targetVersion': -->
                                 <bundledSignature>jdk-unsafe</bundledSignature>
                                 <bundledSignature>jdk-deprecated</bundledSignature>
                             </bundledSignatures>
                         </configuration>
                     </execution>
                     <execution>
                         <id>verify-forbidden-test-apis</id>
                         <configuration>
                            <!-- Redefine the ForbiddenApis configuration as some rules need
                                 to be relaxed in this CLI tool;
                                 e.g. we use System.out.println() instead of enforcing a logger -->
                             <bundledSignatures combine.self=""override"">
                                 <!-- This will automatically choose the right signatures based on 'targetVersion': -->
                                 <bundledSignature>jdk-unsafe</bundledSignature>
                                 <bundledSignature>jdk-deprecated</bundledSignature>
                             </bundledSignatures>
                         </configuration>
                    </execution>
                </executions>
            </plugin>
```

Source: http://maven.apache.org/pom.html#Plugins
"	2016-10-25 11:51:32	1.0	2016-10-26 14:51:44	0
2710	"I don't know if it's on purpose, but the syntax createHSQuery( luceneQuery, BookEntity.class ) should be preferred, as createHSQuery is deprecated.
"	2016-10-25 12:05:27	1.0	2016-10-26 14:51:44	0
2711	"Shouldn't the `scheduledExecutorService` be cleaned up in this case, too? I mean, considering the exception is not propagated and the caller has no way to know the operation failed.
"	2016-10-25 12:37:07	1.0	2016-10-26 14:51:44	1
2712	"The synchronization seemed strange when I first saw it, but I guess `ConcurrentMap#putIfAbsent` is not used here because additional changes (especially on `currentReaders`) are needed when creating a new `PerDirectoryLastestReader`?
"	2016-10-25 12:46:48	1.0	2016-10-26 14:51:44	1
2713	"I don't get why the lock is used here. The `PerDirectoryLasterReader` instance being constructed has not been exposed to external objects here, so no one else could be changing it at this specific moment.
"	2016-10-25 13:17:56	1.0	2016-10-26 14:51:44	0
2714	"When the pair being closed is the ""current"" pair, we don't update the `PerDirectoryLatestReader` here, which might result in `org.hibernate.search.indexes.impl.PeriodicRegreshingReaderProvider.PerDirectoryLatestReader.getLatestReader()` returning a stale reader (because it points to a closed `ReaderUsagePair` with a closed `IndexReader`). Or am I wrong?
"	2016-10-25 13:34:25	1.0	2016-10-26 14:51:44	1
2715	"This member is never used.
"	2016-10-25 13:36:07	1.0	2016-10-26 14:51:44	1
2716	"There's a typo in the file name (Re**g**reshing)
"	2016-10-25 13:46:30	1.0	2016-10-26 14:51:44	1
2717	"nice trick, thanks I'll try that.
"	2016-10-26 13:43:55	1.0	2016-10-26 14:51:44	0
2718	"it wasn't on purpose, just that this code is actually quite old :) I'll fix that.
"	2016-10-26 13:45:46	1.0	2016-10-26 14:51:44	0
2719	":+1: 
"	2016-10-26 13:47:30	1.0	2016-10-26 14:51:44	0
2720	"WDYM by ""cleaned up""? to set the reference to null?

If so, that's not particularly important as this component can't be restarted.
"	2016-10-26 13:53:22	1.0	2016-10-26 14:51:44	0
2721	"Right, in this case if there is a concurrent request it's preferrable to have a thread wait on the synchronization's lock rather than doing multiple IO operations to attempt to open multiple readers (and then have to close and discard one of them).

Think of it in terms of spent resources: if you lock, the thread will be parked and CPU time assigned to do something useful on a different thread. The cost is if course that your current thread will have to wait N milliseconds, were N is the time for the other thread to complete the indexreader refresh.

In the alternative strategy, using a putIfAbsent, the thread will not hit the lock but it will have to perform the same IO operations, which will take it N milliseconds to do (as it's the same operation as in the previous case).

So if you compare the two scenarios, while the lock might looks like ""contention"", it actually frees the CPU but does less IO, and takes the take time for the client to actually get an IndexReader.

So that's why I choose for the synchronized block.
"	2016-10-26 13:58:58	1.0	2016-10-26 14:51:44	0
2722	"Any ""current"" IndexReader has an additional token in the `usageCounter`, so if close() method is invoked on the current IR, it won't actually be closed.

See also the comment on `usageCounter`.

Also on the method `refreshIfNeeded()` you'll see that the no-longer-current IndexReader is closed - yet this simply means that its usage counter is decremented, so that if any query is still using it it won't actually be closed, but it will only be closed when the last query which is using it will be closed.
"	2016-10-26 14:03:38	1.0	2016-10-26 14:51:44	0
2723	"In practice this might not be needed as something else will have to publish the well constructed class, but it's much easier to reason about concurrent structures if you guarantee that reads and writes all happen consistently through the same barriers.

In this case we choose that the `current` field is guarded by the read/write lock so all its access should be using it. I'm not sure that the code would be really correct w/o the lock, although that's certainly hard to proof.. simpler to keep the lock: as it's uncontended it won't hurt.
"	2016-10-26 14:08:33	1.0	2016-10-26 14:51:44	0
2724	"My bad, I thought we also used `@DateBridge` for `Calendar`s!
"	2016-10-20 09:10:40	0.0		0
2725	"Merged, thanks!
"	2016-10-20 09:20:17	0.0		0
2726	"Merged, thanks!
"	2016-10-20 09:09:06	0.0		0
2727	"Merged, thanks!
"	2016-10-20 09:07:08	0.0		0
2728	"> We didn't include the IDs in the indexed documents, so searches on the ID used to fail (the field was missing)

@yrodiere we might want to revisit https://hibernate.atlassian.net/browse/HSEARCH-2253 (see https://github.com/hibernate/hibernate-search/blob/master/elasticsearch/src/main/java/org/hibernate/search/elasticsearch/impl/ElasticsearchHSQueryImpl.java#L316 and https://github.com/hibernate/hibernate-search/blob/master/elasticsearch/src/main/java/org/hibernate/search/elasticsearch/impl/ElasticsearchHSQueryImpl.java#L453 ). In the documentation, we recommend to not sort on the id field (especially for the Lucene backend where it leads to erratic behaviors) but I think it will work with Es and the new mapping.
"	2016-10-20 09:46:07	0.0		1
2729	"Right, thanks for spotting this. I self-assigned and added this ticket to
the current sprint.

Yoann Rodière yoann@hibernate.org
Hibernate NoORM Team

On 20 October 2016 at 11:46, Guillaume Smet notifications@github.com
wrote:

> We didn't include the IDs in the indexed documents, so searches on the ID
> used to fail (the field was missing)
> 
> @yrodiere https://github.com/yrodiere we might want to revisit
> https://hibernate.atlassian.net/browse/HSEARCH-2253 (see
> https://github.com/hibernate/hibernate-search/blob/master/el
> asticsearch/src/main/java/org/hibernate/search/elasticsearch
> /impl/ElasticsearchHSQueryImpl.java#L316 and
> https://github.com/hibernate/hibernate-search/blob/master/el
> asticsearch/src/main/java/org/hibernate/search/elasticsearch
> /impl/ElasticsearchHSQueryImpl.java#L453 ). In the documentation, we
> recommend to not sort on the id field (especially for the Lucene backend
> where it leads to erratic behaviors) but I think it will work with Es and
> the new mapping.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/hibernate/hibernate-search/pull/1192#issuecomment-255060045,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAZMzhMkiPQMDUZPVTljE0DtxTQQleY7ks5q1zhfgaJpZM4Ka4Az
> .
"	2016-10-20 11:14:37	0.0		0
2730	"Jenkins, retest this please
"	2016-10-20 14:31:27	0.0		0
2731	"@gsmet Yeah, I seem to have confused the CI with my rebases again... It's only building the second-but-last commit :/
For what it's worth, it passes on Travis: https://travis-ci.org/yrodiere/hibernate-search/builds/169196158
"	2016-10-20 14:36:52	0.0		0
2732	"Jenkins, retest this please... ?
"	2016-10-21 13:46:17	0.0		0
2733	"merged, just added a single character to fix a javadoc typo.
"	2016-11-03 15:00:12	0.0		0
2734	"merged
"	2016-10-26 13:38:40	0.0		0
2735	"looks fine, merged!
"	2016-10-31 14:35:13	0.0		0
2736	"Jenkins, retest this please
"	2016-10-19 14:49:15	0.0		0
2737	"Merged, thanks!
"	2016-10-20 09:06:07	0.0		0
2738	"Just a quick comment on this one: whatever the representation of embeddeds is in the index, we need to also make sure that we can sort on them (sorting on a nested path requires an extra parameter). I don't know if you took care of this (and it might be better to tacke this once we agree on the representation) but I wanted to mention it.
"	2016-10-13 09:02:28	0.0		1
2739	"@gsmet I don't know what extra parameter you're talking about, so I guess I didn't take care of this.
Are you talking about the ""nested"" datatype in Elasticsearch? Because I didn't tackle this issue at all.

I simply made sure that when we index fields, we use the field path (concatenated `@IndexedEmbedded` prefixes) instead of using the property path (Java properties) like we used to, which failed miserably as soon as an `@IndexedEmbedded` had a custom prefix. So in fact, I just made sure that the JSON we send to ES for indexing has a structure that matches mapping we defined.
"	2016-10-13 09:08:47	0.0		0
2740	"I might be wrong but reading the commit comments, I understood that you might have used nested fields to deal with embedded.

It's probably the way to go but it has consequences. This was an open issue in our current implementation, we haven't taken good care of it (see `ToElasticSearch#isNested` for instance).

See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#nested-sorting for information on nested sorting.
"	2016-10-13 10:06:33	0.0		1
2741	"Thanks for the piece of information. From what I read, this applies to the nested datatype (""In the below example offer is a field of type nested"").

One thing to note is that when indexing, you can pass arrays for any field (including `object` fields), but they get flattened internally. So you can nest without using the `nested` datatype. The `nested` datatype brings more subtle behavior, which (I guess) is why special care should be taken when sorting.

Currently every `IndexedEmbedded` path component is mapped to the `object` datatype: see `org.hibernate.search.elasticsearch.impl.ElasticsearchIndexManager.getOrCreateProperties(JsonObject, String)`, the JsonObject have no `type` properties, and the default is `object`. I did not change anything to the mapping, I just made sure we produce correct JSON documents when indexing. 

From what I can see, https://hibernate.atlassian.net/browse/HSEARCH-2263 relates more closely to the issue you're mentioning. But I agree we'll have to address that one, too.
"	2016-10-13 10:17:15	0.0		0
2742	"Adding the ""Needs work"" label as I just noticed there is some incorrect magic in `org.hibernate.search.elasticsearch.impl.FieldHelper.getPropertyMetadata(EntityIndexBinding, String)` that I did not address. I will add tests demonstrating the issues and try to solve them.
"	2016-10-13 10:30:19	0.0		0
2743	"@yrodiere you should be able to rebase this one!
"	2016-10-14 16:08:44	0.0		1
2744	"@gsmet Thanks, I rebased on master.
"	2016-10-14 17:10:20	0.0		0
2745	"merged, thanks!
"	2016-10-26 13:23:57	0.0		0
2746	"@Sanne could we wait for the Elasticsearch part to be implemented for MoreLikeThis queries before removing the experimental flag? Or do we consider that we can break it in 6 anyway?
"	2016-10-12 13:51:31	0.0		0
2747	"@gsmet we can change it in 6 anyway.
"	2016-10-12 16:21:17	0.0		0
2748	"Merged, thanks!

I also created [HSEARCH-2411](https://hibernate.atlassian.net/browse/HSEARCH-2411) to consider dropping other flags, at the very least when we release 6.0.
"	2016-10-13 08:17:37	0.0		0
2749	"Couldn't test it myself, but this seems appropriate.
Merged, thanks!
"	2016-10-13 07:48:29	1.0	2016-10-13 07:47:39	0
2750	"thanks, I couldn't test it either but we'll see if CI/windows likes it ;-)
"	2016-10-13 07:49:39	1.0	2016-10-13 07:47:39	0
2751	"Jenkins, retest this please
"	2016-10-11 13:57:12	1.0	2016-10-11 16:25:23	0
2752	"Not directly related to this PR but be aware that a few tests are skipped using `ElasticsearchSupportInProgress` and they probably should be reevaluated too.
"	2016-10-11 14:11:55	1.0	2016-10-11 16:25:23	0
2753	"Jenkins, retest this please
"	2016-10-11 14:12:24	1.0	2016-10-11 16:25:23	0
2754	"@gsmet Thanks for your feedback. I just force-pushed, your concerns should have been addressed. I also added comments to the various uses `ElasticsearchSupportInProgress` mentioning the JIRA ticket.
"	2016-10-11 15:20:03	1.0	2016-10-11 16:25:23	0
2755	"Looks good, merging.
"	2016-10-11 15:49:15	1.0	2016-10-11 16:25:23	0
2756	"Merged! Thanks!
"	2016-10-11 16:25:35	1.0	2016-10-11 16:25:23	0
2757	"Why do you need to have a value for Elasticsearch?
"	2016-10-11 14:06:20	1.0	2016-10-11 16:25:23	1
2758	"We usually add a comment for this. Just a comment stating that this test is specific to Lucene would do.
"	2016-10-11 14:07:26	1.0	2016-10-11 16:25:23	0
2759	"Well spotted; I shouldn't have committed this, I'll revert that.
"	2016-10-11 14:41:55	1.0	2016-10-11 16:25:23	0
2760	"Jenkins, retest this please.
"	2016-10-10 14:36:18	1.0	2016-10-14 15:43:31	0
2761	"Jenkins, retest this please.
"	2016-10-11 16:46:24	1.0	2016-10-14 15:43:31	0
2762	"@yoann could you rebase this one now that we merged HSEARCH-2390?

Thanks!
"	2016-10-11 21:43:58	1.0	2016-10-14 15:43:31	1
2763	"@gsmet Same as in #1183: I already did, actually. Strangely, Github is showing commits e019aef and c7cc705 as being part of this PR, but these commits are already on master...
"	2016-10-12 07:32:50	1.0	2016-10-14 15:43:31	0
2764	"@gsmet Same solution as in #1183: I amended my last commit (with no change, just to change the dates and hash) and force-pushed. It seems to have solved the issue in GitHub's interface.
"	2016-10-12 07:36:09	1.0	2016-10-14 15:43:31	0
2765	"Looks good to me apart from my minor comments.
"	2016-10-12 13:49:29	1.0	2016-10-14 15:43:31	1
2766	"@gsmet Thanks, it should be good now. Apart from the `[classname]ClassName` thing where @emmanuelbernard may be able to give us more information.
"	2016-10-12 17:11:22	1.0	2016-10-14 15:43:31	0
2767	"Merged! Sorry for the lag!
"	2016-10-14 15:43:56	1.0	2016-10-14 15:43:31	0
2768	"The class names should be annotated with `[classname]`ClassName``.
"	2016-10-12 13:39:54	1.0	2016-10-14 15:43:31	0
2769	"I would have named it `MetadataProvidingTikaMetadataProcessor`. Looks more natural.
"	2016-10-12 13:41:53	1.0	2016-10-14 15:43:31	1
2770	"I know the existing code is not consistent on this but it's metadata without the hyphen.
"	2016-10-12 13:43:11	1.0	2016-10-14 15:43:31	0
2771	"Maybe `hasCreatedTempFile` would be better? I thought it states if the file should be temporary or permanent.
"	2016-10-12 13:45:13	1.0	2016-10-14 15:43:31	0
2772	"No space before the `;` ?
"	2016-10-12 13:45:58	1.0	2016-10-14 15:43:31	1
2773	"no we're actually stopping with that practice AFAIK. @emmanuelbernard  ?
"	2016-10-12 16:20:01	1.0	2016-10-14 15:43:31	0
2774	"Right. I wanted to make it easier to spot using auto-completion (especially for people who know about the TikaMetadataProcessor, but not about the field metadata yet). But I guess it's not really worth the weirdness.
"	2016-10-12 17:01:46	1.0	2016-10-14 15:43:31	0
2775	"Right, it was a copy/paste. Fixed.
"	2016-10-12 17:06:04	1.0	2016-10-14 15:43:31	0
2776	"Fixed.
"	2016-10-12 17:07:18	1.0	2016-10-14 15:43:31	0
2777	"Fixed.
"	2016-10-12 17:08:53	1.0	2016-10-14 15:43:31	0
2778	"Looks like you missed one `TikaFieldMetadataProvidingMetadataProcessor` when renaming?
"	2016-10-13 08:52:20	1.0	2016-10-14 15:43:31	0
2779	"Sorry... Fixed.
"	2016-10-13 09:02:14	1.0	2016-10-14 15:43:31	0
2780	"Right, I don't think there is value in keeping that meta information. Over the 14+ years of our Docbook usage, we never really made use of the difference between `classname`, `methodname` etc.
"	2016-10-14 07:31:47	1.0	2016-10-14 15:43:31	0
2781	"OK. Yoann, could you simply add backticks to the class names so that they are formatted nicely in the doc? Once it's done, I'll merge this one.
"	2016-10-14 10:35:36	1.0	2016-10-14 15:43:31	1
2782	"Done. I also added a commit to fix the missing backticks in the rest of this file (there are plenty). Just ignore it if you think another PR is necessary.
"	2016-10-14 11:36:30	1.0	2016-10-14 15:43:31	0
2783	"@yoann could you rebase this one now that we merged HSEARCH-2390?

Thanks!
"	2016-10-11 21:43:31	0.0		1
2784	"@gsmet I already did, actually. Strangely, Github is showing commits e019aef and c7cc705 as being part of this PR, but these commits are already on master...
"	2016-10-12 07:31:36	0.0		0
2785	"@gsmet I amended my last commit (with no change, just to change the dates and hash) and force-pushed. It seems to have solved the issue in GitHub's interface.
"	2016-10-12 07:35:17	0.0		0
2786	"In f591e867b70e5c99790b7b3837a8c406e482a4dc commit message, s/BuiltinArayBridge/BuiltinArrayBridge/.
"	2016-10-12 14:02:19	0.0		0
2787	"@gsmet Thanks! I fixed the issues and answered your question.
"	2016-10-12 14:41:23	0.0		0
2788	"Merged! Thanks!
"	2016-10-14 16:05:42	0.0		0
2789	"Maybe we should follow the convention used in `ProjectionConstants`? Something like `__HSearch_NestingMarker` and `__HSearch_ThisMarker` - not sure about the camel casing, depends on what you want to convey? I know `ProjectionConstants` is not entirely consistent but it would follow the rule of the majority.
"	2016-10-12 13:56:36	0.0		1
2790	"s/is the case of/is the case for/?
"	2016-10-12 14:04:28	0.0		0
2791	"What is the rationale behind the choice of ""this"" for this marker? I don't find the name very explicit.
"	2016-10-12 14:04:54	0.0		1
2792	"Ok, done.
"	2016-10-12 14:28:36	0.0		0
2793	"Right. Fixed, thanks
"	2016-10-12 14:28:53	0.0		0
2794	"This marker is useful when `@IndexedEmbedded` collections are indexed.

For instance:

``` java
@Indexed
public class MyEntity {
@IndexedEmbedded(indexNullAs = ""NULL"")
private List<String> myCollection;
}
```

When `myCollection` contains `[""foo"", ""bar""]`, the following fields will appear in the Lucene document:

```
myCollection:foo
myCollection:bar
```

When `myCollection` is `null`, the following field will appear:

```
myCollection:NULL
```

When you're in the second case you cannot know only from the Lucene document whether the field represents a collection element (say, `myCollection[1]` in pseudo-code) or the collection itself (still in pseudo-code, `myCollection`, or `myCollection.this` to be more explicit).

""This"" or ""self"" are the only words that came to my mind and seemed to fit the meaning of this marker: it states that the field value is not the value of a collection element, but really the value of the embedded itself.

Be aware, though, that in order to fix HSEARCH-2397 I'm already refactoring this: just using a string for the nesting path is not enough, the marker has to convey more information. So it might not be worth a long discussion...
"	2016-10-12 14:40:43	0.0		0
2795	"I think ""object value"" would be better (I don't know if you kept the marker in the follow-up of this work).
"	2016-10-13 08:54:25	0.0		1
2796	"ObjectValue it is, then. I changed that and force-pushed.

Yes, the marker is dropped as part of HSEARCH-2397/#1188 (we don't need it anymore because the nesting marker carries more information).
"	2016-10-13 09:17:55	0.0		0
2797	"nice, merged!
"	2016-10-06 16:39:28	0.0		0
2798	"ok, nice.

I also think we should make the ES version a parameter of the build so to run CI jobs with various ES versions, I'll open a separate JIRA for that.
"	2016-10-06 12:19:26	0.0		1
2799	"merged
"	2016-10-06 12:21:00	0.0		0
2800	Looks good overall.	2017-05-23 15:30:08	1.0	2017-05-24 07:03:47	0
2801	You'll still send this mail, right (on declared vs. runtime)? Or is it settled?	2017-05-23 15:28:07	1.0	2017-05-24 07:03:47	0
2802	"Well, I think it's settled considering the last example I gave you? That's what I put in the BVAL issue I created here: https://hibernate.atlassian.net/projects/BVAL/issues/BVAL-631 .

Moreover the last commit fixes the oddity that was bothering me and triggered the question.

(I have the email mostly prepared if needed)"	2017-05-23 15:51:43	1.0	2017-05-24 07:03:47	0
2803	Ok.	2017-05-24 07:03:10	1.0	2017-05-24 07:03:47	0
2804	Merged; thanks, @gsmet!	2017-05-22 14:26:18	1.0	2017-05-22 14:26:10	0
2805	@gunnarmorling fixed.	2017-05-23 15:53:19	1.0	2017-05-24 07:02:31	0
2806	Do we actually need `typeForValidatorResolution` in here? Shouldn't delegate and type parameter suffice for determining the identity?	2017-05-22 14:24:31	1.0	2017-05-24 07:02:31	1
2807	Also the hash code could be calculated once and be cashed.	2017-05-22 14:24:48	1.0	2017-05-24 07:02:31	0
2808	I don't think it can be null?	2017-05-22 14:24:55	1.0	2017-05-24 07:02:31	0
2809	No, it can't. It's either a valid TypeVariable or the ones we forge.	2017-05-22 14:27:24	1.0	2017-05-24 07:02:31	0
2810	Force pushed an update.	2017-05-22 14:34:52	1.0	2017-05-24 07:02:31	1
2811	Didn't we agree that the null check on delegate isn't needed (sambe above)?	2017-05-23 15:27:09	1.0	2017-05-24 07:02:31	0
2812	Oh, I thought you were checking with me that typeArgument cannot be null :). Yeah agreed, will fix.	2017-05-23 15:47:55	1.0	2017-05-24 07:02:31	1
2813	Closing this one, opening a new one with additional fixes.	2017-05-23 10:52:18	0.0		0
2814	Rebased and merged, thanks!	2017-05-22 14:42:53	0.0		0
2815	Merged; thanks, @gsmet!	2017-05-22 07:10:10	1.0	2017-05-22 07:10:02	0
2816	Instead of the gazillion of parameters, should we rather have dedicated methods such as `listProperty()` etc., each taking the required parameters only. Definitely a separate thing, though.	2017-05-22 07:08:28	1.0	2017-05-22 07:10:02	1
2817	Merged; thanks!	2017-05-18 19:27:24	1.0	2017-05-18 19:27:16	0
2818	Jenkins, retest this, please.	2017-05-17 07:25:29	1.0	2017-05-17 07:47:09	0
2819	Merged; thanks, @gsmet! I've added one more commit with minor adjustments, most notably to have the test assert on the paths first and omit the assertion on count which usually isn't as helpful in case of test failures.	2017-05-17 07:48:06	1.0	2017-05-17 07:47:09	0
2820	"@marko-bekhta @gsmet Added some more commits, it should be good now. It's not quite clear to me why we moved the code for creating the proxy. It's for internal usage only and now we've increased the public surface (also if we explicitly exclude the protected stuff in the comments). Anyways, let's move forward with it.

My last question is on the names of the def members; I've used the same names for the simple version (accepting Strings) and the overloaded more powerful version (accepting TagDef / AttributeDef). Whereas in the annotations we have to use different names as we cannot overload the methods there. I think the simpler names are nicer, but if you prefer to use the exactly same ones as in the annotation counterparts, we can do that."	2017-05-18 08:43:19	0.0		1
2821	Rebased and merged! Thanks to both of you.	2017-05-22 14:49:26	0.0		0
2822	"So that's the test failing for me after my changes and I've come to think that this assertion actually is wrong. There should be no violation, as `protocol()` ﻿hasn't been given, hence no restrictions apply for the protocols.

Before my change it would result in a violation as we'd call `addProtocol()` with an empty list of protocols, i.e. all the protocols are disallowed."	2017-05-18 07:29:18	0.0		1
2823	Merged; thanks, @gsmet!	2017-05-16 07:25:28	1.0	2017-05-16 07:25:15	0
2824	Jenkins retest this please	2017-05-11 09:47:42	1.0	2017-05-11 10:02:09	0
2825	Rebased and applied. Thanks, @gsmet!	2017-05-11 07:33:21	1.0	2017-05-11 07:33:12	0
2826	Can you open an issue for this one?	2017-05-11 07:06:17	1.0	2017-05-11 07:33:12	1
2827	Looks like this one was based on an old version of HV-1313. Opening a new one based on the right version.	2017-05-10 22:26:15	0.0		0
2828	"Here's translation for Ukrainian language:
```
javax.validation.constraints.Negative.message    = \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u043c\u0435\u043d\u0448\u0435 ${strict == true ? '' : '\u0430\u0431\u043e \u0440\u0456\u0432\u043d\u0435 '}0
javax.validation.constraints.Positive.message    = \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u0431\u0456\u043b\u044c\u0448\u0435 ${strict == true ? '' : '\u0430\u0431\u043e \u0440\u0456\u0432\u043d\u0435 '}0
```
"	2017-05-11 06:17:40	1.0	2017-05-11 07:00:30	0
2829	Applied your additional suggestions as well, @marko-bekhta. Thanks!	2017-05-11 07:04:07	1.0	2017-05-11 07:00:30	0
2830	"Ahaha :)
"	2017-05-10 15:00:45	0.0		0
2831	Closing; superseded by #736.	2017-05-11 07:35:12	0.0		0
2832	Can we size it with 3 or 4 perhaps?	2017-05-10 14:33:43	0.0		0
2833	"Or maybe even use a stream:

    containerElementConstraints.stream()
        .filter( c -> c.getCascadingTypeParameter() != null )
        .collectToMap( collectors.toKey(), collectors.toValue() )"	2017-05-10 14:36:09	0.0		1
2834	Should we create a JIRA issue (with an example)?	2017-05-10 14:44:37	0.0		0
2835	Do we still need this var? (Probably yes, just looking at the GH diff, so lacking the full context).	2017-05-10 14:46:07	0.0		0
2836	I used streams everywhere and you spot the one place where I didn't :).	2017-05-10 15:00:06	0.0		0
2837	We don't, good catch.	2017-05-10 20:24:00	0.0		0
2838	Done.	2017-05-10 20:24:27	0.0		0
2839	https://hibernate.atlassian.net/browse/HV-1328	2017-05-10 20:27:22	0.0		0
2840	"Hi @marko-bekhta ,

Sorry for not answering earlier, I was busy preparing the Beta1 of HV 6 and didn't have a chance to review this before.

I added a couple of commits, mostly to avoid instantiating new objects and be consistent with the rest of the code.

As for the tests for positive/negative, I added tests in the TCK, that's why there weren't any tests in HV. I'll include them for now but I might remove them later when I will review the TCK tests.

Thanks!"	2017-05-11 14:24:45	0.0		0
2841	Merged; thanks, @gsmet!	2017-05-08 08:26:54	1.0	2017-05-08 08:26:45	0
2842	Nice, thanks, @marko-bekhta!	2017-05-08 08:25:01	1.0	2017-05-08 08:24:50	0
2843	Current status: we are waiting for the next release of asciidoctor-ant before merging this (we need the extension to work for HV and BV).	2017-05-03 10:31:17	0.0		0
2844	@marko-bekhta thanks! I amended your commit as the extension can be added to the shared configuration part instead of adding it to both executions.	2017-05-11 12:21:58	0.0		0
2845	@gsmet ok, cool!	2017-05-11 12:24:46	0.0		0
2846	"Hi,

I  followed your advice about `AnnotationDef`. And here's what I've done. I moved some parts from `ConstraintDef` to `AnnotationDef` and extended from it, as `ConstraintDef` is an annotation as well, right? 

I also added `annotationsAsParameters` to  `AnnotationDef`, it contains those annotation parameters which are annotations themselves. I moved `createAnnotationProxy` to `AnnotationDef` as it looked as a better place for it.

The only thing that I'd like to improve is to cover a case when parameter is not an array of annotations but a single annotation. Right now there seems to be no such cases, but I'd like to add it so the functionality is more complete. So if in general the approach is fine - I'll add this additional functionality for single annotation."	2017-05-04 07:14:17	0.0		0
2847	Force pushed a rebased version with one additional commit. Have to discuss something with Gunnar before merging.	2017-05-11 15:24:12	0.0		0
2848	Closing this in favor of #739 which is based on this one. Thanks, @marko-bekhta!	2017-05-18 08:36:33	0.0		0
2849	I'm a bit surprised we need this.	2017-05-02 08:58:45	0.0		1
2850	I don't think we need this either.	2017-05-02 09:01:33	0.0		1
2851	What if something is defined in both elements? I think the protocols takes over but it would be nice to check this.	2017-05-02 09:01:55	0.0		0
2852	It would be nice to have one check with an unsupported protocol when other protocols are defined.	2017-05-02 09:04:24	0.0		0
2853	"We discussed it with Gunnar. The idea would be to have a new ``AnnotationDef`` type (similar to the `ConstraintDef` approach with `annotationType` and a map of `parameters`).

This type would replace `TagWithAttributes` and `Attribute` and avoid the need to ""refresh"" the configuration after each operation.

The new ``AnnotationDef`` would be transformed to annotation proxies in `ConfiguredConstraint#createAnnotationProxy()` (e.g. you would need to special case if the value is an `AnnotationDef` and recurse into it).

The overall idea is:
 * to avoid unneeded instantiations
 * to keep the creation of the annotation proxies all in the same place

If it's not clear, feel free to ping me for additional discussions."	2017-05-02 13:01:58	0.0		0
2854	"I'll double check this. But as I remember there are different Sets and Maps for each thing (tag, attribute, protocol etc) and validation will fail if you add a protocol for example `data` for `img` -> `src` then validation will fail as `img` tag is absent in tags, and the same for the attribute...
But again - I'll double check if that's really so :) "	2017-05-02 13:17:21	0.0		0
2855	"@marko-bekhta @gsmet Can you take a look at this PR: https://github.com/hibernate/hibernate-validator/pull/739. It's based on your's but takes a slightly different approach for handling the inner types of `@SafeHtml` in the API. Instead of having one fluent invocation on one level this adds `new TagDef()` and new `AttributeDef()` for those. For the common case of no further configuration on the next level, an overloaded version of just taking a string is added.

It's failing the test, i.e. I must have done something wrong within the implementation, but before going further I wanted to share it with you to discuss on the API. I like that it makes clearer, when one element has been fully configured as opposed to one huge fluent invocation. WDYT?"	2017-05-16 08:48:52	0.0		1
2856	Hi @gunnarmorling, your approach looks cleaner without those instantiations of inner classes (inside `SafeHtmlDef`), and as you said - it's easier to see where definition of one attribute starts and where it ends. 	2017-05-16 10:24:31	0.0		0
2857	Ok, I'll check out the test failure then and update my PR. Let's drive home this one :)	2017-05-18 07:06:10	0.0		0
2858	Merged; thanks, @gsmet!	2017-04-26 12:38:32	1.0	2017-04-26 12:38:05	0
2859	Good catch! Merged!	2017-04-26 09:52:31	1.0	2017-04-26 09:52:20	0
2860	Rebased and applied. Thanks, @gsmet!	2017-04-25 20:29:20	1.0	2017-04-25 20:28:29	0
2861	Closing, will create a grouped PR.	2017-04-25 16:04:10	0.0		0
2862	"> The only difference that I've found is that in other cases list annotations are using arrays to declare list elements. And when I changed MixDirectAnnotationAndListContainerAnnotation to do the same - it helped

Ah ah, I also played the Spot the 7 differences game but didn't find this one...

So I suppose it's a bug in JDK 8 fixed in JDK 9.

I would be for just fixing the test. People using `List` will have multiple annotations in it (or they won't need it anyway). I think it's sufficiently a corner case so that we ignore it, especially because it's fixed in the next JDK version.

I just wanted to have stable tests for JDK 8 and 9 so let's just add the braces and leave with it.

WDYT?

Thanks for getting to the bottom of it!"	2017-04-20 09:45:18	0.0		0
2863	"@gsmet I think that it's a good idea to start with fixing the test - I'll rework this commit to do just that. (add braces to annotation)

As for the check itself.. I'd say that there's still something that we can improve. In next case:
```java
@Length(min = 5)
@Length.List({
		@Length(min = 45),
		@Length(min = 46),
		@Length(min = 47)
})
@Target({ ANNOTATION_TYPE, METHOD, CONSTRUCTOR })
@Retention(RUNTIME)
@Constraint(validatedBy = MixDirectAnnotationAndListContainerAnnotation.MixDirectAnnotationAndListContainerAnnotationValidator.class)
@Documented
public @interface MixDirectAnnotationAndListContainerAnnotation {
```
AP will report 3 errors for each `@Length(min = 45)`, `@Length(min = 46)`, `@Length(min = 47)` that there's a mix of `@Length(min = 5)` and `@Length.List(...`

But we should come up with something better than what I've done in the initial commit :)"	2017-04-27 21:15:45	0.0		1
2864	Merged, thanks!	2017-05-03 06:54:58	0.0		0
2865	We need to wait for the metadata API to be updated. Otherwise CI will be broken.	2017-04-20 14:42:46	0.0		0
2866	@gsmet can this be merged now (using 2.0.0.Beta1 as API version)?	2017-04-24 21:20:57	0.0		0
2867	Closing, will create a grouped PR.	2017-04-25 16:03:42	0.0		0
2868	Nice; do we have one for mixing say `List` and arrays, too?	2017-04-14 16:26:37	1.0	2017-04-14 16:27:29	0
2869	Jenkins, retest this please	2017-04-13 14:05:28	1.0	2017-04-25 20:30:43	0
2870	@gsmet What kind of changes does it still need?	2017-04-24 21:23:21	1.0	2017-04-25 20:30:43	0
2871	I just need to check that I throw the right exception type. We should be able to merge this today.	2017-04-25 07:27:21	1.0	2017-04-25 20:30:43	0
2872	Fixed the exception type and force pushed. Should be OK to merge now.	2017-04-25 10:01:22	1.0	2017-04-25 20:30:43	0
2873	Fixed and force pushed.	2017-04-25 15:03:43	1.0	2017-04-25 20:30:43	0
2874	Thanks, @gsmet!	2017-04-25 20:30:52	1.0	2017-04-25 20:30:43	0
2875	Ah, we've missed that one in the spec.	2017-04-25 10:18:15	1.0	2017-04-25 20:30:43	0
2876	isEmpty()?	2017-04-25 10:18:52	1.0	2017-04-25 20:30:43	0
2877	Should we rather show the list of extractor classes (as that's more familiar to the user than our internal descriptor type).	2017-04-25 10:22:03	1.0	2017-04-25 20:30:43	1
2878	Can we try and use it Lambda-style (inline when calling `addValueExtractor()`), too? Just to make sure that this works.	2017-04-25 10:23:37	1.0	2017-04-25 20:30:43	1
2879	Fixed.	2017-04-25 15:03:02	1.0	2017-04-25 20:30:43	0
2880	I saw you created an issue to track it.	2017-04-25 15:03:14	1.0	2017-04-25 20:30:43	0
2881	Right. Done.	2017-04-25 15:03:22	1.0	2017-04-25 20:30:43	0
2882	As mentioned on HipChat, not an option.	2017-04-25 15:03:36	1.0	2017-04-25 20:30:43	0
2883	Looks good to me - just the one javadoc comment. Thanks!	2017-04-07 09:29:01	0.0		0
2884	"@oyvindhorneland in the issue you created, you seem to suggest than just setting the baseURI to a dummy one makes the issue go away. Typically is `../../../my/relative/url.txt` valid with a baseURI of `http://localhost/`? I would have expected to not be valid.

I ask this question because, if it's the case, we might consider having the default baseUri set to `http://localhost/`."	2017-04-13 08:54:06	0.0		0
2885	hi @gsmet, I forgot to change the labels after I've applied the changes. I didn't add an invalid relative URI test as jsoup is not failing for such cases.	2017-04-20 05:43:23	0.0		0
2886	@marko-bekhta I merged the second commit with a few additional (very minor) changes. Thought it was time to merge this one. You will have to rebase your other PR about the protocols.	2017-04-25 15:45:42	0.0		1
2887	Should there be a note here stating that relative URLs will fail validation if baseUri is not set?	2017-04-07 09:26:41	0.0		1
2888	Let's make it for 6.0 for now.	2017-04-13 08:52:17	0.0		0
2889	to specify `the` base URI to be used to resolve relative `URIs`	2017-04-13 08:55:06	0.0		0
2890	I would use `baseURI` to be consistent with `java.net.URI`	2017-04-13 08:56:31	0.0		1
2891	"I suggest something like:
`Base URI used to resolve relative URIs to absolute ones. If not set, validation of HTML containing relative URIs will fail.`"	2017-04-13 08:58:57	0.0		1
2892	It would be nice to also have a test with a real relative URI: `../../some/relative/url/image.png` (one working and one not working if the URI tries to go back too far).	2017-04-13 09:00:11	0.0		0
2893	"@gsmet It seems jsoup does not fail validation if the relative path goes back too far. jsoup's `StringUtil.resolve(URL base, String relUrl)` uses `new java.net.URL(base, relUrl)`, which will resolve `http://localhost/` with `../../../../../test.png` as URL containing `http://localhost/../test.png`. It is not examined further. No active issues with jsoup in this area, so we might consider raising one - what do you think?

If the baseURI default value is set by default, the default behaviour of SafeHtml would change, since it currently does not allow relative paths. "	2017-04-13 10:28:44	0.0		1
2894	"> If the baseURI default value is set by default, the default behaviour of SafeHtml would change, since it currently does not allow relative paths.

Yeah, I'm wondering if we should consider it a feature or a bug. If, in the future, Jsoup checks the relative URL, I suppose it makes sense to keep it this way.

I was mostly wondering if people would really consider providing the baseURI in the annotation definition and if, maybe, we should just pass `http://localhost/` to Jsoup and consider relative links always valid from our POV.

I don't have a strong opinion about it though."	2017-04-13 12:24:01	0.0		0
2895	"While it was a surprise to me that I by default got validation failure for both relative images and inline data images (HV-1302), it's hard to know if someone depend on this behaviour to ensure their definition of _valid_ input. 

From my perspective I'd say it's probably both sensible and expected to support relative paths by default, but changing the default is scary."	2017-04-13 13:15:02	0.0		0
2896	"Yeah, let's be safe.

@marko-bekhta can you address the minor comments I made? Then we will merge it.

As for backporting it, as mentioned by Gunnar, we would only do it if we do a new 5.x release. For now we don't really have a lot of material to justify a new 5.x release and the associated maintenance burden but we'll see in the future. Using the next alpha of HV 6 would be an option if you use JDK 8."	2017-04-13 14:17:38	0.0		1
2897	@gsmet yes, I plan to make changes to both PRs related to `SafeHtml` later today.	2017-04-13 14:31:08	0.0		0
2898	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2017-04-04 08:36:35	0.0		0
2899	Hi Øyvind, thanks a lot for sending this PR. It seems though Marko bet you doing this change, there is already PR #714. I suggest to continue discussion over there, as it's a bit more complete (doc update, fluent DSL update).	2017-04-05 07:21:32	0.0		0
2900	Rebased and merged; thanks, @marko-bekhta!	2017-04-05 07:14:30	1.0	2017-04-05 07:14:18	0
2901	"Cool, thanks!
"	2017-04-06 13:38:22	0.0		0
2902	@marko-bekhta Looks good and really great to see a request for enhancement addressed this fast!	2017-04-07 09:20:05	0.0		0
2903	"@marko-bekhta 

I marked it as Changes suggested as there are a couple of minor changes Gunnar suggested. Once they are fixed, we could merge this one.

As for the programmatic API issue, it should be pursued separately (and then the tests should be updated): I created https://hibernate.atlassian.net/browse/HV-1307. I affected it to you as you seemed to be interested in it."	2017-04-13 08:48:17	0.0		1
2904	@gsmet ok, great. I was thinking that the programmatic API change should go in this one as well, hence the delay on other changes :)	2017-04-13 08:54:05	0.0		0
2905	"@marko-bekhta yeah the bottom rule is whenever you can split a task in separate ones that make sense, do it. Obviously, we want to avoid micro tasks that don't make sense so there's a balance to find.

This way, you get the code in earlier and avoid big PR being postponed again and again."	2017-04-13 09:21:55	0.0		1
2906	@marko-bekhta, should we close this one in the favor of #728?	2017-05-02 08:52:44	0.0		0
2907	@gunnarmorling if it's OK to have those two issues combined in on PR - I'd say we can close this one.	2017-05-02 09:03:18	0.0		0
2908	Yes, that's ok :) Thanks!	2017-05-02 09:08:26	0.0		0
2909	"We already got `additionalTagsWithAttributes()`; did you consider to enhance `@SafeHtml.Tag` instead of adding a new annotation?

`@Tag` accepts multiple attributes, so we'd had to add all protocols for all of them (if more than one attribute is specified), but that should be alright.

@oyvindhorneland, WDYT?"	2017-04-05 07:29:12	0.0		1
2910	"s/whitelists/whitelist/
s/it's/its/"	2017-04-05 07:29:49	0.0		0
2911	Should we decide to go this route with a new annotation, it should be named `attribute()` for the sake of consistency. Also some `@since` tags on the new annotation and on `additionalProtocols()` would be good. 	2017-04-05 07:30:26	0.0		1
2912	@gunnarmorling I agree. The name `additionalTagsWithAttributes` is maybe a bit off if you add `String[] protocols() default { };` to it, but that's probably preferable to adding the `@SafeHtml.Protocol`.	2017-04-05 08:41:38	0.0		1
2913	I'll remove the `Protocol` annotation then and make the corresponding changes. 	2017-04-06 13:34:46	0.0		0
2914	Hum, adding this in a micro is a bit of an issue (micros shouldn't alter the API at all). Also we don't have plans for another (non-bugfix) 5.x reease at this time. I'd prefer to have this in 6 only for now. Should we then do another 5.x release, it'd be a candidate for backporting of course.	2017-04-10 07:53:58	0.0		0
2915	Would be good to have more than one element in the test, so we know that works, too :)	2017-04-10 07:56:19	0.0		1
2916	Oh, I'm just realizing that some unfortunate approach has been chosen for `SafeHtmlDef` in the past. The programmatic API should never require to deal with annotation proxies. Instead there should have been members added on this def class so the properties can be set via the fluent DSL. Can we get this fixed for 6?	2017-04-10 08:00:05	0.0		1
2917	"yes of course :) 
So we should deprecate current `SafeHtmlDef#additionalTagsWithAttributes` and add something like:
```java
public SafeHtmlDef additionalTagWithAttributes(String name, String[] attributes, String[] protocols) {
		// ...
		return this;
	}
```
or
```java
	public SafeHtmlDef additionalTagsWithAttributes(Tag... additionalTagsWithAttributes) {
		// ...
		return this;
	}

	public static class Tag {
		private final String name;

		private final String[] attributes;

		private final String[] protocols;

		public Tag(String name, String[] attributes, String[] protocols) {
			this.name = name;
			this.attributes = attributes;
			this.protocols = protocols;
		}
	}
```
or
```java
public Tag addTag(String tagName){
		return new Tag(tagName); 
	}

	public class Tag {
		private final String name;

		private final Set<String> attributes;

		private final Set<String> protocols;

		private Tag(String name) {
			this.name = name;
			this.attributes = CollectionHelper.newHashSet();
			this.protocols = CollectionHelper.newHashSet();
		}

		public Tag addAttribute(String name) {
			attributes.add( name );
			return this;
		}

		public Tag addProtocol(String name) {
			protocols.add( name );
			return this;
		}
		
		public SafeHtmlDef add(){
			//...
			return SafeHtmlDef.this;
		}
	}
```
instead, right ?

@gunnarmorling which option would you prefer ?"	2017-04-10 08:24:23	0.0		1
2918	"Let's think about it from a user's perspective. That's what I'd like to be able to write:

    new SafeHtmlDef().whitelistType( SafeHtml.WhiteListType.NONE )
        // let me add a tag and configure i all the way
        .additionalTag( ""img"" )
            .attribute( ""src"" )
                .protocols( ""data"", ""snafu"" )
            .attribute( ""ref"" )
                .protocols( ""bla"" )
        .additionalTag( ""a"" )
            .attribute( ""href"" )
                .protocols( ""data"" )
            .attribute( ""bla"" )
            .attribute( ""blub"" )
        // fast path for adding tags without further config
        .additionalTags( ""foo"", ""bar"" )"	2017-04-10 10:49:10	0.0		0
2919	"Hi @marko-bekhta ,

Sorry for being so late to the party. The BV release drained most of our workforce lately. I think there's a logic error here. Gunnar spotted it in his comment here (https://github.com/hibernate/hibernate-validator/pull/714/commits/9b14baa4d03b88789e7be478dbf6e0c80192df85#r110625190) but without underlining it: the protocols should be attached to the attributes and not to the tag.

The issue I can see with this is that we would break the compatibility if we make attribute its own annotation. I suppose we could follow the same logic as for the tags and add an `additionalAttributesWithProtocols` thingy. WDYT?"	2017-04-25 15:16:37	0.0		1
2920	Also just saw https://hibernate.atlassian.net/browse/HV-1300 - I can help with it for Positive/Negative as part of this PR, if the approach used for splitting `Number` and `MonetaryAmount` that I've used is OK (usage of `BasePositiveValidator`/`BaseNegativeValidator` and comparing method)	2017-04-02 17:10:22	1.0	2017-04-03 13:39:40	0
2921	Merged; thanks, @marko-bekhta!	2017-04-03 13:48:40	1.0	2017-04-03 13:39:40	0
2922	"Yes, that'd be great. Also we should discourage using of the existing
@Email, @NotEmpty and @NotBlank. Thanks!
"	2017-04-03 14:22:09	1.0	2017-04-03 13:39:40	1
2923	Ah, good catch with the docs. Thanks!	2017-04-03 09:57:40	1.0	2017-04-03 13:39:40	0
2924	:)	2017-04-03 13:49:44	1.0	2017-04-03 13:39:40	0
2925	@gunnarmorling I think docs are also missing Email and NotEmpty for BV constraints (didn't want to add them in this PR as they are not related to it, I can open another PR for them if needed)	2017-04-03 13:56:01	1.0	2017-04-03 13:39:40	0
2926	Merged; thanks, @marko-bekhta!	2017-04-03 09:56:31	1.0	2017-04-03 09:55:53	0
2927	s/JAVA_TIME_TYPES/JAVA_TYPES/	2017-04-03 09:24:24	1.0	2017-04-03 09:55:53	0
2928	Won't build until https://github.com/hibernate/hibernate-validator/pull/708 is merged.	2017-03-30 12:35:00	1.0	2017-03-30 13:02:11	0
2929	Rebased and applied. It should be backported to 5.4.	2017-03-30 09:49:09	0.0		0
2930	Done.	2017-03-30 09:58:11	0.0		0
2931	Thx!	2017-03-30 09:59:29	0.0		0
2932	Jenkins, retest this please	2017-03-29 13:28:50	1.0	2017-03-30 09:06:32	0
2933	Jenkins, retest this please	2017-03-29 13:56:28	1.0	2017-03-30 09:06:32	0
2934	Jenkins, retest this please	2017-03-29 12:59:05	0.0		0
2935	Rebased and applied. Thanks, @gsmet!	2017-03-30 12:57:53	0.0		0
2936	Where is Xavier's name coming from?	2017-03-30 10:21:56	0.0		0
2937	I reckon you won't like it, but what do you think of having dedicated validators for the individual type instaed of the huge instanceof switch here. I'd prefer that, as validator resolution is done only once, so we won't pay the price for checking the type for each validator invocation again and again.	2017-03-30 10:27:24	0.0		1
2938	Interesting, what's the rationale for not using array.length?	2017-03-30 10:30:01	0.0		1
2939	It's based on DecimalMin/Max validators so I let the name of the original authors.	2017-03-30 11:05:25	0.0		0
2940	I don't have a strong opinion about it. But I think we should keep consistency. I mimicked DecimalMin/Max so if we decide to change it, we should probably do it globally in a later commit.	2017-03-30 11:06:37	0.0		0
2941	Consistency, it's based on the Size validators. But I agree we should use array.length instead. Pushed an additional commit to fix it for Size and NotEmpty.	2017-03-30 11:35:11	0.0		1
2942	Ah, yes. Makes sense.	2017-03-30 12:52:51	0.0		0
2943	+1 for splitting up both. Can be done as a follow-up, though, if you prefer.	2017-03-30 12:53:11	0.0		0
2944	Yes, I prefer getting the release out of the door ASAP. Will create a new JIRA to track this.	2017-03-30 12:55:08	0.0		0
2945	+1	2017-03-30 12:55:36	0.0		0
2946	https://hibernate.atlassian.net/browse/HV-1300	2017-03-30 12:57:30	0.0		0
2947	"> If you agree, I'll open a specific JIRA.

+1 Sounds reasonable. Looks good overall, going to merge it. Let's see what others say on the schema structure when proposing it for BV:"	2017-03-27 10:05:18	1.0	2017-03-27 10:34:34	0
2948	"Hmmmm. So it hurts to say that **again** but Gunnar was probably right from the beginning :).

If we end up having to use a regexp, we probably use the wrong tool (or in this case, I think the tool is not very well designed for its purpose).

Could you take a look at https://github.com/policeman-tools/forbidden-apis ? Looks like the signature file format is simple: https://github.com/policeman-tools/forbidden-apis/blob/master/src/main/resources/de/thetaphi/forbiddenapis/signatures/jdk-deprecated-1.6.txt . You can disable a method or a class. If it makes a better work, we should use it instead. Note that in passing, we might be able to have less checkstyle configuration files as at least one of them is just to enable JUnit for parts where we rely on JUnit. Note that even if we use JUnit, we should disable the `AssertJUnit` class so maybe we need one signature file for generally disabled API (might be handy in the future) and one for JUnit that we enable only for projects relying on TestNG.

I was a bit worried about how we would share the signature files but it looks like we can reference a file in a jar even if not documented (so we could put the necessary signature files in the build-config jar). See the end of the comment here: https://github.com/policeman-tools/forbidden-apis/blob/master/src/main/java/de/thetaphi/forbiddenapis/maven/AbstractCheckMojo.java#L69 ."	2017-03-23 09:34:04	0.0		1
2949	":)
Yes, I'll look into this later today"	2017-03-23 09:42:51	0.0		0
2950	"Sooooooo :) here's what I've done:

- Configured forbidden-api plugin with some bundled signature files (`jdk-unsafe`, `jdk-deprecated`, `jdk-non-portable`)
- Removed checkstyle rule for `System.out` and replaced it with forbidden-api bundled `jdk-system-out`
- Added `SuppressForbidden` annotation, so it can be used to suppress some ""illegal"" classes and methods where it's really needed. Not sure that I've chosen the best place for it though ...
- Removed all different checkstyle configurations and left only one with all the rules
- Removed license header checks from checkstyle configs (so there can be one checkstyle config for all modules) and replaced those checks with `license-maven-plugin`. Also added headers for files that were missing them
- Added `maven-remote-resources-plugin` so that all config related resources from build-config module can be easily used in configurations of other plugins.
- Also did some ""cleaning"" of issues reported by forbidden-apis plugin. Most of them are using something without specifying Locale/TimeZone/Charset "	2017-03-25 21:49:02	0.0		0
2951	"@marko-bekhta very interesting work, kudos! I added a couple of comments inline.

About the class vs list of methods question, **if** we have to provide the list of methods, we would need to document how to generate this list."	2017-03-28 09:14:11	0.0		1
2952	"I've tested the ""class vs method list"" thing - it's enough to just use the class. So I've dropped all methods from the files. 
Also rebased to master and applied a fix for missing headers in new xmls. 

"	2017-03-29 08:48:27	0.0		0
2953	OK, looks good. Waiting for @gunnarmorling 's position on adding the locale and other things everywhere.	2017-03-29 09:02:04	0.0		0
2954	"@marko-bekhta I merged this one. Thanks for your hard work.

I reworked the commits so that they are a bit more atomic. I editorialized a bit the comments and also renamed the annotation to `@IgnoreForbiddenApisErrors` so that its purpose is more clear.

One thing I also fixed is that you can't use the maven-remote-resources plugin to get the license resources in the parent pom as build-config might not be deployed yet (or might not contain the resources if it's an old version). I included this in your commit.

That being said, I chose to go the variable way in a follow-up commit. Not really fond of special casing the parent."	2017-04-13 12:17:44	0.0		1
2955	Oh nice! I missed these configuration files when I used it on the BV TCK.	2017-03-28 08:49:48	0.0		0
2956	Is there a reason why you enable it per project? There are projects where it doesn't make sense?	2017-03-28 08:50:27	0.0		1
2957	I would have expected it to be redefined in each submodule? At least that's what I needed to do for BV TCK. Do you have a clever trick to avoid that?	2017-03-28 08:52:01	0.0		1
2958	Is there a reason not to use `String.format` here?	2017-03-28 08:53:13	0.0		1
2959	"this is removed in later commits with adding of `maven-remote-resources-plugin`
at first I was thinking about adding it to every pom, but I got lazy :) and done it a bit differently in the end. This `maven-remote-resources-plugin` do something similar to `maven-dependency` unpack, and places those configs in target so each module should have all configs available in target folder ..."	2017-03-28 08:56:56	0.0		0
2960	I'm a bit sceptic about this type of changes. @gunnarmorling what's your take on this? I'm not worried about these occurrences but more about how it will be frustrating when we write new tests.	2017-03-28 09:00:08	0.0		1
2961	I though about it ... the reason why I left it as is is because the messages here use `{0}` such things for inserting parameters. And it will require to update messages to use something like `%s` or `%1$s`. And I wasn't sure if that was a _safe_ change to make... if it is, I'd say - let's change it to use String.format	2017-03-28 09:00:17	0.0		1
2962	Mmmh maybe we could use a directory which makes more sense, such as build-config-resources or something similar?	2017-03-28 09:02:38	0.0		1
2963	You can omit the groupId here. Not sure it's done for the existing ones but we try to do it for the new ones.	2017-03-28 09:03:40	0.0		1
2964	Interesting. I didn't know this plugin and it's in fact very useful... Nice trick.	2017-03-28 09:04:37	0.0		0
2965	**not** be used :)	2017-03-28 09:06:22	0.0		0
2966	You need to define all the methods, even if you have defined the types?	2017-03-28 09:07:28	0.0		0
2967	Same question here about class vs list of methods.	2017-03-28 09:08:29	0.0		0
2968	Yeah OK, let it alone, it's safer.	2017-03-28 09:13:02	0.0		0
2969	"@gsmet  +1 
I'm not very happy about them as well. That's why I've done them all in a separate commit so it can be removed if we decide so. These things comes from those `jdk-unsafe`, `jdk-deprecated`, `jdk-non-portable`. They seems to be useful to have in general (judging  by the names)."	2017-03-28 09:31:45	0.0		0
2970	"Not sure about that ... I'll check if it'll work with the class only, and let you know
There's not much about the format of these files (or in other words - I haven't found anything about the format in the documentation of the plugin :) so I just looked at format of provided files, but I haven't checked for such cases ...)"	2017-03-28 09:37:16	0.0		0
2971	"ahh.. just remembered that one of the plugins (either forbidden-apis or check-style illegal imports) wasn't picking up the `java.lang.StringBuffer` as it's from the ""automatically imported package"" ... But not sure about which one it was of these two  ... 
Again - I'll play with different cases and I'll let you what works and what's not :)"	2017-03-28 09:41:35	0.0		0
2972	There's no licenses in documentation module. Only pom file has a header and all others - don't.	2017-03-28 16:46:43	0.0		0
2973	So it actually has to be CLASS retention, SOURCE isn't enough?	2017-03-30 13:14:48	0.0		0
2974	Why is it forbidden to begin with?	2017-03-30 13:15:13	0.0		0
2975	Why is JavaFX forbidden by default?	2017-03-30 13:17:04	0.0		1
2976	I'd personally _not_ forbid something like `now()`. It is legit for our testing here. Generally I'd strongly prefer to not go overboard with this kind of checks; it's not that we had an actual problem here.	2017-03-30 13:18:58	0.0		0
2977	On the headers of these files, we had left them out intentionally; but then there is no harm by having this small (constant) header, so why not.	2017-03-30 13:21:43	0.0		0
2978	I believe it comes from `jdk-non-portable`	2017-03-30 13:32:37	0.0		0
2979	I did add those as their absence was causing the build to fail. But we can just add an exclude rule for them, if it's preferred not to have headers here. Just say how it should be :)	2017-03-30 13:36:43	0.0		0
2980	"Not sure why it cannot be SOURCE, but I've checked here:
https://github.com/policeman-tools/forbidden-apis/blob/master/src/main/java/de/thetaphi/forbiddenapis/SuppressForbidden.java
and it has `RetentionPolicy.CLASS` for it..."	2017-03-30 13:46:22	0.0		0
2981	"I do agree with you. I've looked at those bundled files and these Locale/TimeZone/Charset things comes from `jdk-unsafe`. As there seems to be nothing else (except locals and timezones,charsets) in those unsafe files I'd say it can be _safely_ :) removed.
Link to the signature files if needed: 
https://github.com/policeman-tools/forbidden-apis/tree/master/src/main/resources/de/thetaphi/forbiddenapis/signatures"	2017-03-30 14:04:34	0.0		0
2982	@marko-bekhta Is this still a left-over? I.e. are you planning to revert this change as per our discussion above? Same question for some more places where `Locale.getDefault()` is used now.	2017-04-03 13:51:13	0.0		0
2983	Is there any further action needed here?	2017-04-03 13:53:44	0.0		0
2984	We can still enable it globally if that's simpler.	2017-04-03 13:54:40	0.0		1
2985	ok.	2017-04-03 13:55:06	0.0		0
2986	Can we disable this check then? It seems to do a bit too much.	2017-04-03 13:55:56	0.0		1
2987	+1 for cutting down the number of changes here; let's limit to the actual issue at hand.	2017-04-03 13:56:53	0.0		0
2988	No leave them in, now that they are there :)	2017-04-03 13:57:22	0.0		0
2989	I've checked that mentioning just a class is enough and updated the commit with that change. So nothing else for this one	2017-04-03 14:01:44	0.0		0
2990	yes, I was waiting for your response on this one (I was just 90% sure if to remove them or not :) ) - I'll remove `jdk-unsafe` and `jdk-non-portable` from the config as well as that commit with changes caused by it.	2017-04-03 14:05:53	0.0		0
2991	Rebased.	2017-03-29 13:57:23	0.0		0
2992	Merged, thanks for the review.	2017-03-30 13:18:33	0.0		0
2993	Why is it that `@ExtractedValue` shows up here (same for some other methods in this test)?	2017-03-30 13:06:55	0.0		1
2994	I suppose some Eclipse generation magic used when I wrote the test. Not the first time I notice that. I'll fix it.	2017-03-30 13:11:23	0.0		0
2995	Merged, thanks!	2017-03-20 09:52:38	1.0	2017-03-20 09:52:30	0
2996	"Limit to throughput is a nice change :)
as it was taking ages to run this in All mode."	2017-03-16 17:49:43	1.0	2017-03-17 07:37:57	0
2997	Rebased and applied. Nice improvement, @gsmet!	2017-03-17 07:46:09	0.0		0
2998	Merged; thanks.	2017-03-15 13:18:54	1.0	2017-03-15 13:18:38	0
2999	Pushed to 5.4 and master. Thanks.	2017-03-15 14:10:57	0.0		0
3000	I tested this manually, which I think - while not perfect - is good enough. And even if things went wrong, the impact is low, so I think that's ok.	2017-03-15 10:48:37	0.0		0
3001	"@marko-bekhta I think we should only keep `testMultiLevelPreGeneratedValidation`. I don't think there is a point to measure the case where we don't have any constraint or am I wrong?

I'll review this particular case and will revisit my review if we end up keeping more!"	2017-03-16 10:30:31	0.0		1
3002	"@gsmet Thanks for the review, I'll make the changes later toady.
As for the test without constraints - it was meant to be something to compare the results to. But thinking about it now - it doesn't make much sense :) That's what sometimes happens when writing code late at night :)"	2017-03-16 11:35:40	0.0		0
3003	"@marko-bekhta I pushed an additional commit to your branch, nothing much.

@gunnarmorling we have a major problem with this: it does not compile with BV 1.1 anymore so we can't build the performances tests for the older versions or for BVal anymore.

Maybe we should separate the performance tests in 2 submodules? One for BV 1.x and one for BV 2?"	2017-03-20 10:34:10	0.0		1
3004	"> Maybe we should separate the performance tests in 2 submodules? One for BV 1.x and one for BV 2?

Yes, that or we have a separate source folder for the new ones, e.g. _src/main/java-bv2_. This source folder can be added for the current profile using the build-helper-maven-plugin. The only issue is the reference to the classes from `BenchmarkRunner`, this would have to be changed to deal with names and ignore any benchmarks non present.

Open to both approaches; having everything in one module is nicer from an execution point-of-view, having a single report etc., but the name-based references are a bit more error prone for misses when renaming classes."	2017-03-20 17:10:46	0.0		0
3005	"Maybe name-based references can be ""fixed"" with an annotation on the test
classes and some simple annotation processor which will provide a list of
all found annotated tests (as a return value of some generated by AP
method)?

2017-03-20 18:10 GMT+01:00 Gunnar Morling <notifications@github.com>:

> Maybe we should separate the performance tests in 2 submodules? One for BV
> 1.x and one for BV 2?
>
> Yes, that or we have a separate source folder for the new ones, e.g.
> *src/main/java-bv2*. This source folder can be added for the current
> profile using the build-helper-maven-plugin. The only issue is the
> reference to the classes from BenchmarkRunner, this would have to be
> changed to deal with names and ignore any benchmarks non present.
>
> Open to both approaches; having everything in one module is nicer from an
> execution point-of-view, having a single report etc., but the name-based
> references are a bit more error prone for misses when renaming classes.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/hibernate/hibernate-validator/pull/699#issuecomment-287829442>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AD0b13c8VoGA0u70PLnptE9IQMlee_2dks5rnrMXgaJpZM4Mdhlp>
> .
>
"	2017-03-20 17:54:08	0.0		0
3006	I'd go for Gunnar's approach as a good first step. It's not as if we change these names often.	2017-03-21 09:11:47	0.0		0
3007	Merged, thanks!	2017-03-29 14:02:50	0.0		0
3008	I think you can make this private? Same for the other classes below.	2017-03-16 10:32:33	0.0		1
3009	I think these classes should be outside the generator class. It's weird to include them in the generator class.	2017-03-16 10:34:21	0.0		0
3010	Let's make it final (just a good habit to take).	2017-03-16 10:34:39	0.0		0
3011	private + final (same below).	2017-03-16 10:35:00	0.0		0
3012	Maybe, call it `generate` instead of `get`? It's more to the point I think. Same below for `Visitor`.	2017-03-16 10:36:35	0.0		1
3013	I would say, just keep the `@NotNull` constraint. The point is to exercise the validator code, not to have an expensive constraint checked. I would have used `@NotBlank` for a change but it's not part of the spec either :).	2017-03-16 10:41:05	0.0		1
3014	Same remark about s/get/generate/ for this method and the other one below.	2017-03-16 10:41:25	0.0		0
3015	For all the BV 1 compatible classes, you could use `<Class>.class.getName()` so that we limit the issue with renaming to the BV 2 classes. it's not particularly efficient but it's not that important as it's just a startup cost.	2017-03-23 09:06:31	0.0		1
3016	"Maybe add a comment just before starting the BV 2 classes:
`// Benchmarks specific to Bean Validation 2.0`
It would be even more important to explain why they are not added in the same way as the others."	2017-03-23 09:13:46	0.0		1
3017	@gsmet yes, no problem, just give me a sec :)	2017-03-23 09:18:59	0.0		0
3018	Merged to master, 5.4, 5.3 and pending PR for 5.2 with some follow-up adjustments. Thanks.	2017-03-15 12:42:34	0.0		0
3019	@gsmet Reworked that last commit and force pushed.	2017-03-14 15:55:06	1.0	2017-03-14 18:04:53	0
3020	Rebased and applied.	2017-03-14 18:05:38	1.0	2017-03-14 18:04:53	0
3021	"As discussed on HipChat, it would be nice to have a specific implementation for the common case where we have only one node.

Other than that, it looks good to me."	2017-03-13 09:29:57	1.0	2017-03-14 18:04:53	0
3022	Force pushed an update that addresses all your concerns.	2017-03-10 11:09:34	0.0		1
3023	Rebased and applied. Thanks, @gsmet!	2017-03-10 11:42:51	0.0		0
3024	What's the reasoning for initializing it lazily instead of doing it in the constructor and making the field truly final? Btw. can `rootBeanClass()` ever be null?	2017-03-10 07:53:44	0.0		1
3025	It's not wrong to put it here, but it's not needed as per my original intent for it. I meant it for marking those fields in classes shared across threads whose type doesn't tell whether its mutable or not. So e.g. all the `List` or `Set` fields in `BeanMetaDataImpl` should be marked with it. `ValidationContext` otoh is not shared across threads, so I wouldn't see the need to mark them here. Just to give some insight into the rationale, as said, it's not wrong.	2017-03-10 07:58:17	0.0		1
3026	Should we remove `isConstrained()` altogether then? Not sure why it makes a perf difference, but we can do it if it helps (there is still one usage in `validateValue()` btw.).	2017-03-10 07:59:45	0.0		1
3027	Nice.	2017-03-10 08:00:48	0.0		0
3028	Why is it done lazily? Seems we'll need it in any case?	2017-03-10 08:02:58	0.0		0
3029	Are the null checks really needed?	2017-03-10 08:04:00	0.0		0
3030	Seems it was wise to limit it to the wildcard parameterization in the spec :)	2017-03-10 08:16:11	0.0		0
3031	"The issue is not `isConstrained` by itself, that's why I kept it and there's still a usage of it.

The issue was that we used `beanMetaDataManager.isConstrained` which got the bean metadata from the concurrent map and then we got again the bean metadata from the concurrent map a few lines below (either really a few lines below or hidden in a method call a few lines below). We should get the bean metadata from the concurrent map only once."	2017-03-10 09:39:37	0.0		1
3032	"Yeah right, I used it as a marker to say that this value was not supposed to change during the object lifecycle and it was supposed to be ""final"" as the other ones. I'll remove them."	2017-03-10 09:55:47	0.0		0
3033	So in this case, it's an error. It's just that I started with `ValueContext` and then copied the behavior from `ValueContext` to `ValidationContext`. I'll change it here.	2017-03-10 09:57:00	0.0		1
3034	Not really. I'll remove them.	2017-03-10 09:57:37	0.0		0
3035	"Got it. In OGM we have `@EffectivelyImmutable` for a similar purpose (though it applies to initialization of the field during construction time, e.g. a post-construct callback, not lazy-init as done here). If needed we could add it to HV, too.

We don't need to handle those stereotypes with religious believe, it's just kind of an (open) experiment whether its helpful to us or not."	2017-03-10 10:09:42	0.0		0
3036	"Mmmh, but in fact, we can get rid of these too. I got too conservative and wanted to keep the `ValidationContext` initialization after the `hasConstraints` check but it's a bad idea.

I changed it and got rid of `isConstrained()`."	2017-03-10 10:28:55	0.0		1
3037	Thanks, @johnaohara, @gsmet!	2017-03-09 15:51:53	1.0	2017-03-09 15:50:01	0
3038	Rebased and applied. Pushed one more commit for some clean-up. Thanks, @marko-bekhta!	2017-03-10 09:05:50	0.0		0
3039	Merged, thanks!	2017-03-07 13:05:50	1.0	2017-03-07 13:05:12	0
3040	Looks good, rebased and applied. Added one commit for using the class formatter in the log message. Thanks, @gsmet!	2017-03-06 11:53:34	0.0		0
3041	Ok, thanks!	2017-03-07 10:21:16	0.0		0
3042	"@gsmet, @emmanuelbernard: one thing I've been wondering: should we rename `containerElement()` to `containerElementType()`? It may appear as splitting hair, but the constraints are put to the _type_, not the _element_ itself.

Alternatively, one could split it up into `typeArgument()` (generic containers) and `componentType()` (arrays). The names would be a bit better to comprehend, but both would do the same, so I don't like it too much.

Note my considerations are primarily driven by applying the same concepts/names to the spec XML schema, hence the extensive consideration.

Thoughts?"	2017-03-07 15:18:22	0.0		1
3043	"@gsmet Ready for review (apart from the renaming discussing above, I'd favor `containerElementType()`. Also there is one glitch with the API, there are some illegal state transitions. E.g. you can do:

    .type( FishTank.class )
        .property( ""model"", FIELD )
            .containerElement()
                .parameter( 1 )

Going straight to a method parameter doesn't make sense of course. I'm sure it could be resolved (by having multiple `ContainerElementConstraintMappingContext` interfaces, one for property/parameter/return-value.

But I couldn't make it work impl-wise so I gave up on this eventually (a runtime exception is raised when calling the methods in an unsupported location). Should someone else have the energy to give it a try, I'd be happy to merge it as a follow-up, otherwise I think it's good enough.

"	2017-03-08 16:51:13	0.0		1
3044	Btw. that's another project idea I had ;) Define the states of such an internal DSL and the valid transitions (ie. allowed method calls) in some abstract means (external DSL?) and then have a generator for creating the required interfaces for only exposing the allowed ops in each state and class bodies to be implemented. Just dreaming of this, though :)	2017-03-08 16:53:28	0.0		0
3045	Rebased. Added one more commit more geared towards HV-1245, too, @gsmet.	2017-03-10 14:43:54	0.0		0
3046	"> Alternatively, one could split it up into typeArgument() (generic containers) and componentType() (arrays). The names would be a bit better to comprehend, but both would do the same, so I don't like it too much.

So I tend to agree that splitting it would make the names clearer but as it's the exact same thing, it feels weird to have 2 different names. So I concur with you that keeping one name is better.

> Should someone else have the energy to give it a try, I'd be happy to merge it as a follow-up, otherwise I think it's good enough.

Agreed, it's good enough as is.

I added one commit to reindent a test and removed the last commit. Expect a follow-up on this very subject."	2017-03-13 15:15:02	0.0		0
3047	s/to the select/to select/	2017-03-03 16:09:07	0.0		0
3048	2 spaces -> 1 space after the parenthesis	2017-03-03 16:14:21	0.0		0
3049	"Ha, that's why they call you ""Eagle Eye Guillaume"" :)"	2017-03-07 16:04:59	0.0		0
3050	@gsmet Are you handling this one?	2017-03-06 11:55:57	0.0		0
3051	@gunnarmorling yes I want to make some additional clean up too.	2017-03-06 12:04:30	0.0		0
3052	"Cool, thanks!
"	2017-03-06 12:09:32	0.0		0
3053	"Closing this one, superseded by https://github.com/hibernate/hibernate-validator/pull/694 which integrates your changes.

@johnaohara Thanks"	2017-03-09 15:21:44	0.0		0
3054	"Hi John,

You commented this, is this what you wanted? BTW, the use of the constant looks weird as it's not made to be used here (it is used in the for loops).

But there's definitely something weird with the constants as we don't use them consistently."	2017-03-02 13:06:51	0.0		0
3055	Sorry, my mistake. I intended to remove this test, the for loop is completely optimised away by the JVM, and the test JMH test does not perform any actual work. If a large number of iterations is required as a test, then new Benchmark method with 50 * NUMBER_OF_VALIDATION_ITERATIONS would be appropriate and remove the for loop.  This would allow the JMH framework to manage the number of iterations.	2017-03-02 13:15:41	0.0		0
3056	"OK, will clean it up further and merge.

Thanks!"	2017-03-02 13:28:55	0.0		0
3057	Out of curiousity, how comes that the assertion on the size of `violations` on the line before isn't enough to prevent the optimization you mention?	2017-03-02 13:48:34	0.0		0
3058	In practice, the effect might be the same. However, the purpose of Blackhole is to prevent Dead-code elimination, False sharing and Write wall, which can skew benchmark results.  I am not sure what effect .hasSize() has on the aforementioned JIT optimisations.	2017-03-03 10:54:33	0.0		1
3059	Ok, thanks! Better safe than sorry I guess.	2017-03-06 11:55:46	0.0		0
3060	Rebased and merged, thanks!	2017-03-06 08:24:53	0.0		0
3061	"> So I've looked and java.annotation.Generated was present in java.xml.ws.annotation so I've made this change.

Yes, that was done recently. That area is still in flux, see [our discussion](http://mail.openjdk.java.net/pipermail/jigsaw-dev/2017-February/011320.html) on the jigsaw-dev mailing list.

On the style, thanks a ton for coming up with that stylesheet!

The only issue I see is that the dividers between table column/rows have gone (here are the [current docs](http://docs.jboss.org/hibernate/stable/validator/api/) for a comparison). Any chance to add that? At least vertical ones may look a tad better.

And one super-minor thing: when entering something into the search box in the upper right, the results overlay still has the stock-blue header. Maybe this could get a brownish color so to fit better with the rest of theme?

Otherwise, it's awesome! Thanks again!
"	2017-03-01 09:29:58	0.0		1
3062	"@marko-bekhta Thanks for taking care of that!

Didn't check the stylesheet but I disagree on moving finalName to the build level. It has nothing to do here. There's something weird with your IDE :).

It would be nice if you could:
- move the add-modules stuff to a different commit as I don't think we will commit that for now
- discard the finalName change
- keep the CSS change in one commit

Thanks!"	2017-03-01 09:35:55	0.0		1
3063	"@gunnarmorling I think the vertical ones can be added, as for the horizontal ones - they were causing some problems, I'll see if anything can be done about it, and I'll look once more through the doc to see if any colors should be updated (like that one for the search that you've mentioned).

@gsmet Ok, I'll do that :) as for the `finalName` it's how IDE is reading the pom file and validation it with the xsd schema. I've looked here - https://maven.apache.org/pom.html and <build> has a finalName in it:
```
 <build>
    <directory>${project.basedir}/target</directory>
    <outputDirectory>${project.build.directory}/classes</outputDirectory>
    <finalName>${project.artifactId}-${project.version}</finalName>
``` 
But I'm fine with where it was previously :) "	2017-03-01 09:54:12	0.0		0
3064	@marko-bekhta I don't think they have the same meaning. In `<build>`, `finalName` would be the final name of the main artifact whereas in the assembly configuration, it would be the one of the assembly. At least, that's what I think.	2017-03-01 10:18:41	0.0		0
3065	"I've updated the css a bit more - see the screen below: 
<img width=""600"" alt=""javadoc"" src=""https://cloud.githubusercontent.com/assets/4004823/23480968/22589372-feca-11e6-8d85-bb4db5fd3da6.png"">
There are borders for tables now :) and a search input glow is more Hibernate-looking :)
Also I've split it into two commits first one just with the style related changes and second for the README update.
"	2017-03-01 21:16:12	0.0		0
3066	"Very nice, the screenshot looks good. I'll take a closer look tomorrow.
Other Hibernate projects will benefit from this as well, so kudos to you
for taking up this one!
"	2017-03-01 21:18:21	0.0		0
3067	":) I just saw that other PR - https://github.com/hibernate/hibernate-validator/pull/688, so I've removed that last commit for the README. 

Happy to help. Let me know if any changes will be required."	2017-03-01 21:23:38	0.0		0
3068	@marko-bekhta Looks good, going to merge it. Out of curiousity, how did you create this, did you take the default JDK 9 stylesheet.css and then modified it? Or did you take our existing one and adapted it?	2017-03-02 09:04:07	0.0		0
3069	"@gunnarmorling modified the JDK default one. I was using the current one to get colors and some font related values. 
At first I thought to modify the current one but I didn't want to break something for the current doc so (as some modifications were required)..."	2017-03-02 09:07:46	0.0		0
3070	"Ok, thanks for clarifying. I had compared it to the JDK 9 default one and
was overwhelmed by the huge number of differences. But most of them are
actually formatting related (whitespace after "":"", an empty line between
declarations etc.). I reckon they originate from your editor?
"	2017-03-02 09:12:41	0.0		0
3071	"Yes, that's right .... I reformatted that CSS file, I've probably shouldn't
done that, right?

2017-03-02 10:12 GMT+01:00 Gunnar Morling <notifications@github.com>:

> Ok, thanks for clarifying. I had compared it to the JDK 9 default one and
> was overwhelmed by the huge number of differences. But most of them are
> actually formatting related (whitespace after "":"", an empty line between
> declarations etc.). I reckon they originate from your editor?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/hibernate/hibernate-validator/pull/686#issuecomment-283598332>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AD0b1_-QlVoTKU_2AlyNlLEd7bgdoCFwks5rhogKgaJpZM4MO-om>
> .
>
"	2017-03-02 09:15:22	0.0		0
3072	"Yes, that would have been a bit better :) As it helps to keep the history
comprehensible. But it's no problem. Sorry for all the questions, just
trying to make sure I understand what's going on.

I've found the following to be the best approach for dealing with this kind
of changes:

* Create a first commit with the original file, unaltered (i.e. commit the
default Java 9 stylesheet.css)
* Apply the actual modifications in a separate commit
* Don't apply any re-formatting (or, if you really, really have to, do it
in a separate commit between the initial one and the one with the actual
changes)

This allows to understand the actual changes later on, e.g. allowing it to
re-apply them another time, if the underlying base has changed.

No worries, though. I'll take care of it.
"	2017-03-02 09:22:45	0.0		0
3073	"Applied. As discussed above, I've added the original JDK 9 stylesheet.css in a separate commit before your's and reworked your commit to remove the formatting changes. Also added another commit to change some styling. I'll open up a follow-up issue for ironing out some more glitches.

Thanks a lot @marko-bekhta, that was one of the big missing pieces for building on Java 9!"	2017-03-02 10:29:59	0.0		0
3074	@gsmet I've pushed one commit with some smaller things I noticed during review. My only question is about the usage of default methods (see inline).	2017-03-01 08:49:58	0.0		0
3075	Removed the default methods and pushed to master. Will work on the backport.	2017-03-01 09:30:21	0.0		0
3076	We don't need a copy here anymore because the maps in `constraintViolationCreationContext` are now immutable so we don't allow the side effects that might have existed before and have justified this copy.	2017-02-28 19:08:18	0.0		1
3077	This is from pre 1.1 era. I updated all the occurrences of this pattern.	2017-02-28 19:09:02	0.0		0
3078	I wondered if it could be worth it to create the aggregation earlier. I decided against it because `getMessageParameters()` is preexisting and I'm a bit worried about changing the definition of it.	2017-02-28 19:10:42	0.0		0
3079	Sounds good.	2017-03-01 08:29:53	0.0		0
3080	Why did you decide to make this a default method? The only implementation is our own one.	2017-03-01 08:39:49	0.0		1
3081	:)	2017-03-01 08:46:38	0.0		0
3082	Rebased and merged, thanks!	2017-03-01 10:28:19	0.0		0
3083	@gsmet seems I cannot push to this PR.	2017-03-10 09:28:29	0.0		0
3084	@gunnarmorling it's weird, the `Allow edits from maintainers.` checkbox is checked. I unchecked it then checked it again.	2017-03-10 09:35:56	0.0		0
3085	Ok, still doesn't work. I'll keep my changes locally then for now.	2017-03-10 10:11:51	0.0		0
3086	Wow, seems like quite a lot of work to re-write all these :)	2017-03-10 14:08:00	0.0		0
3087	Merged. Backported an amended version of the first commit. I didn't backport the `TypeFormatter` as `Type.getTypeName()` is new in Java 8.	2017-02-24 10:56:53	0.0		0
3088	@gsmet re-worked/added commits to address your remarks. Hope it's all good now.	2017-02-24 21:27:05	0.0		0
3089	Merged, thanks!	2017-02-27 09:10:59	0.0		0
3090	Very minor but maybe let's make it consistent and initialize the set and map below in the same way? I had to check if there was a specific reason to initialize it this way compared to the others.	2017-02-23 12:42:11	0.0		1
3091	Do we really want an INFO here? You made it a debug elsewhere.	2017-02-23 12:46:21	0.0		1
3092	Wondering if it would be worth it to compute this hashCode only once? I don't think it would be called often though.	2017-02-23 12:57:28	0.0		0
3093	So you don't include `ObservableValueValueExtractor` here? I can understand that it's a tough choice :). 	2017-02-23 13:05:40	0.0		0
3094	"Considering how useful `getDefaultValueExtractors` is, I would have made it a Set of VED instead of VE and reuse it in the constructor. That could avoid forgetting to add one at one place or the other.

And we could stream the result directly in `getDefaultValueExtractors`."	2017-02-23 13:08:20	0.0		1
3095	I would pass the descriptor here. You're forced to unwrap it then rewrap it in 2 places.	2017-02-23 13:34:56	0.0		1
3096	Maybe we could change them to VED here and throw the error early if it's not a valid VE?	2017-02-23 13:37:14	0.0		1
3097	I wonder if it wouldn't be better to add the user defined VE after the default ones, thus providing a way to override the default ones.	2017-02-23 13:44:31	0.0		1
3098	Wondering if it would be better to announce clearly it returns VED, not VE.	2017-02-23 13:46:41	0.0		1
3099	Let's decide what to do about this before merging and implement it. We have added a lot of TODOs lately.	2017-02-23 13:51:57	0.0		0
3100	I'll take a look. It may not work for `Configuration` though as the public method mandates `VE` there.	2017-02-23 14:25:23	0.0		0
3101	Will change it.	2017-02-23 14:25:46	0.0		1
3102	Hum, no it should be part of it.	2017-02-23 14:26:48	0.0		0
3103	Good idea.	2017-02-23 14:27:04	0.0		0
3104	Yes, that's how it should be done eventually. Currently this all relies on the order here.	2017-02-23 14:28:12	0.0		0
3105	Agreed.	2017-02-23 14:28:28	0.0		0
3106	Ok.	2017-02-23 14:31:36	0.0		0
3107	Yes, the public methods would add VEs but we would convert them to VED as early as possible to throw an error as early as possible and use as much as possible VED internally.	2017-02-23 14:36:10	0.0		0
3108	Yes, of course.	2017-02-24 18:18:59	0.0		0
3109	INFO is used in other places in this class (see logging methods 3 - 6).	2017-02-24 18:19:46	0.0		0
3110	Also did it for ValueExtractorDescriptorKey.	2017-02-24 18:22:39	0.0		0
3111	Done.	2017-02-24 20:48:46	0.0		0
3112	Done.	2017-02-24 20:48:50	0.0		0
3113	Done.	2017-02-24 20:49:07	0.0		0
3114	Done.	2017-02-24 20:49:13	0.0		0
3115	Done.	2017-02-24 20:49:19	0.0		0
3116	Added the checks.	2017-02-24 21:18:05	0.0		0
3117	"> I'm a bit annoyed by the fact that you changed the way hasConstraints is determined while it's really totally unrelated. I think it should have its own JIRA and a proper commit.

Ok, I'll create a JIRA and extract it into a separate commit. I had a larger change originally (not creating the descriptor model eagerly any more), and this was part of it. I reverted that largely, but found that specific change worth keeping, being a bit lazy only :)"	2017-02-22 10:38:35	0.0		0
3118	Yeah, I'm a bit cautious about this one because we had a bug in this part not so long ago with `hasConstraints()` returning false instead of true in certain cases. So I prefer to be on the safe side if we have to dig changes in this area again :).	2017-02-22 10:48:45	0.0		0
3119	Extracted https://hibernate.atlassian.net/browse/HV-1259 for hasConstraints and reworked the PR.	2017-02-22 10:48:46	0.0		0
3120	Cool, waiting for CI to go green and I'll merge it.	2017-02-22 10:54:30	0.0		0
3121	Now that's a long CI run ;)	2017-02-23 09:24:32	0.0		0
3122	"Ah, yeah, sorry, I merged it and kept it open for the 5.4 backport which didn't happen!

Closing!"	2017-02-23 09:27:02	0.0		0
3123	This one would have been better in a separate commit and JIRA I think. We can do with it though, I think.	2017-02-22 10:18:07	0.0		1
3124	Not sure I'm really convinced by how we deal with the builder state in the getter here. The pattern is kinda weird. Not that I can think of something better though.	2017-02-22 10:22:09	0.0		1
3125	Who says a builder is write-only ;)	2017-02-22 10:38:58	0.0		1
3126	Rebased and merged. Thanks.	2017-02-20 18:03:34	0.0		0
3127	Good spot!	2017-02-17 18:05:16	1.0	2017-02-17 18:34:09	0
3128	Seems AnimalSniffer has a blind eye when it comes to annotations.	2017-02-17 18:19:09	1.0	2017-02-17 18:34:09	0
3129	Merged; thanks, @gsmet! I've added one tiny commit to remove another stale reference.	2017-02-17 18:34:56	1.0	2017-02-17 18:34:09	0
3130	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2017-02-17 16:34:51	0.0		0
3131	"OK to test
"	2017-02-17 16:46:36	0.0		0
3132	"@ghusta can you sign the CLA for the Hibernate Validator project on https://cla.jboss.org/index.seam and ping me here with your username once done?

Thanks!"	2017-02-17 17:04:32	0.0		0
3133	@ghusta btw, from your comments on JIRA, it looks like you're not far from a fix. Wanna give it a try? If not, I'll fix it.	2017-02-17 17:23:44	0.0		0
3134	"@ghusta Hi! Did you see my message about the CLA (https://github.com/hibernate/hibernate-validator/pull/676#issuecomment-280707413)? We need it to incorporate your code into the code base.

Thanks for your feedback."	2017-02-20 08:20:56	0.0		0
3135	"Hello. I was offline for a while, but I'm back now ;-)
I'll try to have a look at this today, and fix the bug if I can.
Thanks

"	2017-02-20 08:39:30	0.0		0
3136	@gsmet : BTW I signed the CLA, my username is ghusta.	2017-02-20 12:59:58	0.0		0
3137	"@ghusta I squashed all your commits in one and added an additional commit to make things more consistent (they weren't before your patch so it's more a general clean up).

Note that if you plan to contribute further, we generally work on the master branch and then backport the fixes to the 5.4 branch. I did the work to apply your patch to master.

Thanks for your contribution!"	2017-02-21 13:15:01	0.0		0
3138	"OK very well. I think I had some problems while rebasing... 
It will be clearer like that. It's never perfect the first time ;-)
Thank you."	2017-02-21 13:41:14	0.0		0
3139	"@gsmet  BTW did you format the code (code style) with IntelliJ or with Eclipse ?
I did it with IntelliJ and didn't have the same result than with your clean up"	2017-02-21 13:46:35	0.0		0
3140	@ghusta it's a custom formatting for both IDEs. If you'd like to get a style files please check here - https://github.com/hibernate/hibernate-ide-codestyles	2017-02-21 13:52:07	0.0		0
3141	"@ghusta yeah, as the code was not very consistent earlier, it's not always easy to choose how to format your code, that's why I made it consistent.

I use Eclipse. I know @marko-bekhta uses Intellij and he contributed updates to our code styles configuration but I'm not sure they are perfect: https://github.com/hibernate/hibernate-ide-codestyles . Not really easy to configure different IDEs to get the exact same formatting output.

BTW, do you need a release soon or it was just to experiment and you can use the snapshots? If you need something soon, we can plan a 5.4.1 release next week."	2017-02-21 13:54:37	0.0		1
3142	"@gsmet OK it's the code style I imported for the project (hibernate-ide-codestyles).
Maybe next time I'll use this plugin : [Eclipse Code Formatter for IntelliJ IDEA](https://plugins.jetbrains.com/idea/plugin/6546-eclipse-code-formatter).

Concerning the bug, I was just experimenting with 5.4. I'm not in a hurry !
"	2017-02-21 15:50:09	0.0		0
3143	Nice!	2017-02-17 18:41:21	1.0	2017-02-17 18:41:17	0
3144	Merged, thanks!	2017-02-15 13:55:14	0.0		0
3145	@marko-bekhta I've been thinking about it and as you say it's just not possible to find a reasonable size for the cache. And exposing it as option wouldn't be great either; it'd be one of those knobs people don't know what to set to. So I'm inclined currently to leave things as is.	2017-03-10 14:45:55	0.0		0
3146	Oki, closing it. Thanks nevertheless for investigating it, @marko-bekhta!	2017-03-10 22:51:14	0.0		0
3147	Happy to help!	2017-03-10 22:57:09	0.0		0
3148	Applied that last commit. Thanks, @gsmet!	2017-02-15 10:01:00	0.0		0
3149	Merged, thanks!	2017-02-14 15:27:39	0.0		0
3150	@gunnarmorling I added a commit to your PR with the French translation.	2017-02-13 17:14:31	0.0		0
3151	@gunnarmorling done.	2017-02-13 18:23:42	0.0		0
3152	Thanks, @gsmet and @marko-bekhta!	2017-02-14 07:53:25	0.0		0
3153	Rebased and merged, thanks!	2017-02-14 10:36:45	0.0		0
3154	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2017-02-13 10:06:29	0.0		0
3155	ok to test	2017-02-13 10:11:08	0.0		0
3156	Thanks, @shahramgdz! Can you please sign the JBoss contributor license agreement? It's a web app living at https://cla.jboss.org/. It's needed in order to merge your PR. Thanks!	2017-02-13 16:33:50	0.0		0
3157	@gunnarmorling, done.	2017-02-13 17:24:28	0.0		0
3158	"@shahramgdz merged, thanks!

While you're at it, could you take a look at the new strings we added at the bottom of the file for duration validation? See https://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/resources/org/hibernate/validator/ValidationMessages.properties ."	2017-02-14 10:38:19	0.0		0
3159	Jenkins, retest this please	2017-02-10 17:46:55	1.0	2017-02-10 19:58:07	0
3160	Nice, thanks!	2017-02-10 19:58:13	1.0	2017-02-10 19:58:07	0
3161	Hoping that PR isn't jinxed ;)	2017-02-10 20:01:52	1.0	2017-02-10 20:01:05	0
3162	Merged, thanks!	2017-02-13 10:23:07	0.0		0
3163	"Yeah, that sounds reasonable indeed.
"	2017-02-09 10:05:08	0.0		0
3164	"I've read through the discussion - 
I wasn't able to think of anything better for Period than what you've seen as you were saying that there's no way to say what is a larger period 2 month or 60 days (so I can only see that option of allowing users to determine how long is the month). But in general - I would say that if an object itself cannot be compared to another in one way we should not be adding a constraint for it. So +1 for having Duration only.

As for the duration - as you were saying it doesn't seem to be very readable to have just one unit and would be better to be able to put something like `@MinDuration(minutes=5 , seconds=3)`. But in that case we would need to put a parameter for all `ChronoUnit`s (or at least for all smaller ones). I think it'll be not good if for example we have only `hours` `minutes` and `seconds` but no `milliseconds` or `nanoseconds`.
Because what if you have a duration of 1:11:12.123456 ? you wouldn't be able to specify it right ?

So on the one hand - having only one `ChronoUnit` is not very readable, on the other hand we would need to add a lot of annotation parameters. I really don't have a strong opinion on which option is better so I'll just trust your judgment on this one :)"	2017-02-09 10:33:13	0.0		0
3165	"Yes, you would have to add all of them (even if I don't expect the smallest ones to be used). I won't expect someone to require a duration of 4 nanoseconds. As for the names, keep the names used in `Duration` so `nanos`, `millis` to be consistent.

It's a bit more verbose but it's always a pain to specify duration in only one units. I did that a lot in property files and it's really a pain to convert the values in your head."	2017-02-09 10:39:38	0.0		1
3166	"So to summarize:
- support of Duration only
- add all parameters till `years` (don't think that `ERAS` or `MILLENNIA` are that used :) )
- drop the range annotation
- remove support of Duration for `@Min` `@Max`

did I miss anything ?"	2017-02-09 10:52:04	0.0		0
3167	@marko-bekhta sounds great!	2017-02-09 11:52:41	0.0		0
3168	"> add all parameters till years (don't think that ERAS or MILLENNIA are that used :) )

I think for a first version I would stick to what is available in `Duration` (the `plus*` methods basically) and nothing more. You will have the same issue we discussed earlier with months and years.

> did I miss anything ?

 * The bug I reported on the sign of one of the comparisons but you will find it anyway when writing tests.
 * The inclusive option similar to what is done in `DecimalMin`/`DecimalMax`."	2017-02-09 11:57:26	0.0		1
3169	Looks great. I'll just apply some typo-fixes and merge it.	2017-02-13 08:29:53	0.0		0
3170	great, thanks!	2017-02-13 09:07:52	0.0		0
3171	Rebased and applied. Thanks, @marko-bekhta!	2017-02-13 16:34:27	0.0		0
3172	"Do we really need this? Couldn't we build a `Period` from the given years/months/days, subtract the annotated period via `minus()` and test `isNegative()` on the result?

Also an `inclusive()` flag seems useful (similar to `@DecimalMax`)."	2017-02-09 08:05:12	0.0		1
3173	Can you use the `@Incubating` annotation instead?	2017-02-09 08:05:36	0.0		1
3174	I'd just skip that in the favor of two separate `@PeriodMax`/`@PeriodMin` annotations.	2017-02-09 08:06:53	0.0		1
3175	`SECOND` may be a more commonly used value and thus a better default?	2017-02-09 08:08:45	0.0		1
3176	Some for the `DurationRange`.	2017-02-09 08:09:06	0.0		0
3177	"Yeah, I thought it might work yesterday evening and then I read the Javadoc and the code for `minus`:
```java
    public Period minus(TemporalAmount amountToSubtract) {
        Period isoAmount = Period.from(amountToSubtract);
        return create(
                Math.subtractExact(years, isoAmount.years),
                Math.subtractExact(months, isoAmount.months),
                Math.subtractExact(days, isoAmount.days));
    }
```

It simply substract each part of the `Period`, so you could end up with `1 year -2 months 4 days` and this would indeed be considered negative.

I'm wondering if it really makes sense to consider `Period` baring these limitations.

+1 for `inclusive()` on both set of annotations."	2017-02-09 08:51:18	0.0		1
3178	+1 to skip the `*Range` annotations.	2017-02-09 08:51:56	0.0		0
3179	"To be honest, I think I would rather have `days`, `hours`, `minutes` and `seconds` - I don't think nanos would be useful but we can add it for consistency. I think limiting to one single unit is not that good.

@gunnarmorling WDYT about that proposal?"	2017-02-09 08:55:23	0.0		1
3180	I don't think I would add them here. We have a nice dedicated annotation, let's use that.	2017-02-09 08:56:28	0.0		0
3181	`>=`?	2017-02-09 09:00:31	0.0		0
3182	Maybe call them `maxDuration` (and `minDuration` for the `MinValidatorForDuration`). It would be easier to apprehend the comparison below.	2017-02-09 09:01:37	0.0		1
3183	Note: the comments in this class are to be taken into account only if we keep the `Period` validators.	2017-02-09 09:06:02	0.0		1
3184	You don't need that. See `Period.toTotalMonths`.	2017-02-09 09:06:39	0.0		1
3185	I think you'd better transform everything to days. It will be easier.	2017-02-09 09:07:39	0.0		1
3186	"Let's be consistent and use 0 as a reference.

(But as mentioned earlier, I vote for removing these ones)"	2017-02-09 09:10:03	0.0		1
3187	They usually are added by alphabetical order.	2017-02-09 09:11:30	0.0		0
3188	"I thought about it, too.

But then `Duration` itself also only allows creation from the single elements, i.e. there is no method `of(days, hours, minutes, ...)`. So I guess I'd stay consistent with that, but I don't have a strong preference really."	2017-02-09 09:52:17	0.0		0
3189	"> I'm wondering if it really makes sense to consider Period baring these limitations.

Yes, I'm getting doubts as well.

I first thought one could construct something around `normalize()`,  but after all you cannot really tell whether ""2 months"" is longer or shorter than ""60 days"", as you don't know the number of days in a months. So it seems for a good reason that the java.time API doesn't expose a way for comparing periods. We then shouldn't try to invent it.

+1 for supporting `Duration` only."	2017-02-09 09:56:36	0.0		0
3190	"Yeah, looks like you only have the `parse` method for that. Or you have to use the `plus*` methods. That being said, we would do the operation only once at startup so I don't think it's that bad.

@marko-bekhta WDYT?

As for me, I find it more readable to say 4 hours 30 minutes rather than converting everything to minutes but maybe it's just me."	2017-02-09 10:01:48	0.0		1
3191	Nice catch! Merged!	2017-02-08 15:13:19	1.0	2017-02-08 15:13:12	0
3192	Looks good. Merged!	2017-02-08 13:09:07	1.0	2017-02-08 13:09:02	0
3193	"Rebased and merged. Thanks, @gsmet!

Can you add a short note to the [migration guide](https://developer.jboss.org/wiki/HibernateValidatorMigrationGuide) about the changed behavior in the null Optional case? Thanks!"	2017-02-08 10:59:51	1.0	2017-02-08 10:58:55	1
3194	@gunnarmorling done.	2017-02-08 11:58:26	1.0	2017-02-08 10:58:55	0
3195	Merged; thanks, @marko-bekhta!	2017-02-08 08:31:06	1.0	2017-02-08 08:30:46	0
3196	"Ok, cool :)

I'm a bit concerned about adding a list also for those many cases where
it's not needed. We may consider to encapsulate it behind dedicated
`ValueExtractorDescriptor` implementations, e.g. there would be a
NestedValueExtractorDescriptor which deals with the nested case, allowing
to use the plain and simple one for the normal case.

But we can leave that as optimization for following.
"	2017-02-07 14:01:25	0.0		1
3197	@gunnarmorling so I think we are in pretty good shape now. I'll work tomorrow morning on the array support.	2017-02-09 23:14:51	0.0		0
3198	@gunnarmorling it's ready for review, I think I fixed all the pending issues.	2017-02-10 16:22:18	0.0		0
3199	"@gunnarmorling pushed 2 additional commits to address your comments.

Waiting for your feedback on the `List` of `ValueExtractorDescriptor` optimization."	2017-02-14 16:41:02	0.0		0
3200	"> Waiting for your feedback on the List of ValueExtractorDescriptor optimization.

I think it's good, merged it (and added the `@Immutable` stereotype).

My thinking was not only about memory, though, but also about complexity of usage. Now `ValidatorImpl` needs to deal with a list of extractors, whereas I hoped this complexity could be encapsulated within `MetaConstraint`."	2017-02-15 09:49:44	0.0		0
3201	"`Optional<@NotNull ...>` seems not sensible. Also there are some `@Valid` too much I think. This would be more realistic:

    Map<@NotNull Optional<@Valid Cinema>, List<@Valid EmailAddress>> map;

I prefer us to stick to realistic examples so we are sure we are on the right track to solve actual issues (I don't mean to sound harsh I case I do ;)."	2017-02-07 13:25:45	0.0		0
3202	Why does it have two `@Valid`?	2017-02-07 13:26:21	0.0		1
3203	Ah, the usage of square brackets in the toString() methods was confusing me on first look (thought some sort of node nesting was going on). Maybe worth to have some assertions on the actual path nodes (also their types etc.)	2017-02-07 13:36:55	0.0		0
3204	I found that the assertion on the number often is not helpful. Let's say it's 1 actually, you don't know which one is missing. Whereas if you just omit this assertion, you'll see the actual paths in the next statement.	2017-02-07 13:47:30	0.0		1
3205	There is an empty-named node in here (after [1], before email). Is that intentional? Let's assert on the actual paths to have more explicitness of what we expect.	2017-02-07 13:52:41	0.0		1
3206	outter=outer	2017-02-07 13:53:16	0.0		0
3207	Can you add an explantion why this is a list now? I reckon it's to navigate from the outermost container to the innermost?	2017-02-07 13:54:30	0.0		1
3208	Yeah, I had the same thought lately. I added them mostly to be consistent. I'd also prefer to get rid of them.	2017-02-07 13:57:27	0.0		0
3209	Exactly. Seems clear enough then :). I'll add a comment.	2017-02-07 13:58:55	0.0		0
3210	Also I'm wondering about the types of nodes. Should the intermediary ones be of kind `TYPE_ARGUMENT` instead of `PROPERTY` as it's the case now.	2017-02-07 13:58:58	0.0		1
3211	"Well, in the current implementation, we need a full chain of `@Valid`. IIRC, we discussed it the other day and you agreed it was acceptable as a first step.

To not require this `@Valid` chain, we would need to continue the `@Valid` discovery on the whole parameterized type and either add a `isCascading` to `CascadingTypeParameter` or rebuild the necessary tree once we made the discovery."	2017-02-07 14:01:49	0.0		1
3212	To be honest, I don't want to spend too much time in it before we agree on the structure of the path. Let's discuss that.	2017-02-07 14:02:25	0.0		0
3213	"@gsmet if you check out http://staging.beanvalidation.org/latest-draft/spec/#validationapi-constraintviolation, note that key/index/inIterable are only set on the following node. This may be the cause of confusion.

So I think I'd expect these three nodes here (not totally sure about the kind and name of the 2nd node, but that seems sensible):

    node( kind = PROPERTY, name = ""map"", key = null, index = null, inIterable = false )
    node( kind = TYPE_ARGUMENT, name = ""<map value>"", key = ""invalid"", index = null, inIterable = true )
    node( kind = PROPERTY, name = ""email"", key = null, index = 1, inIterable = true )
"	2017-02-07 14:44:10	0.0		0
3214	Removed.	2017-02-09 23:05:19	0.0		0
3215	This is now what we have. Except the second one is a PROPERTY as we don't have the TYPE_ARGUMENT node type (but it's already done as a type argument).	2017-02-09 23:06:06	0.0		0
3216	Changed the toString and added assertions on the structure of the path.	2017-02-09 23:06:32	0.0		0
3217	Done.	2017-02-09 23:06:40	0.0		0
3218	Done.	2017-02-09 23:06:48	0.0		0
3219	Fixed.	2017-02-09 23:13:51	0.0		0
3220	I explained a bit more the purpose of this list.	2017-02-09 23:14:09	0.0		0
3221	"""A type parameter that is marked for cascaded validation and/or has one or more nested type parameters marked for cascaded validation"". Otherwise the `cascading` parameter is confusing."	2017-02-14 10:29:32	0.0		0
3222	Let's use `package-info.java` instead. I know that we have a lot of package.html files, but the class is the recommended way nowadays, so let's begin with it.	2017-02-14 10:31:40	0.0		1
3223	I hope we can encapsulate that behind an interface with two dedicated implementations, so no list is needed for the default case. But we can do that in a follow-up.	2017-02-14 10:32:42	0.0		1
3224	This should be TYPE_USE eventually, right? Better add a TODO marker.	2017-02-14 10:37:04	0.0		1
3225	I noticed that this method (`getParameterConstraintLocation()`) isn't used anymore. Let's remove it?	2017-02-14 10:42:04	0.0		1
3226	Using `@NotNull` within `Optional` is weird. Also it's for the sake of the example only, I'd prefer if we found a more realistic usage.	2017-02-14 11:00:33	0.0		1
3227	That method became quite long. The two cases it handles are good candidates for extracting two methods.	2017-02-14 11:06:48	0.0		0
3228	Done.	2017-02-14 15:46:28	0.0		0
3229	Created a JIRA issue and added a TODO in the code.	2017-02-14 15:46:50	0.0		0
3230	Done.	2017-02-14 15:47:53	0.0		0
3231	Done.	2017-02-14 16:00:15	0.0		0
3232	OK, I went the List route, even if it's not that good either.	2017-02-14 16:07:06	0.0		0
3233	"Yeah, well, I tried to do that and in the end I thought the best solution was to use `Collections.singletonList`. I introduced a new helper called `CollectionHelper.toImmutableList` (same for `Set`) that we should use to make a list immutable and that make some naive optimization. See this commit https://github.com/hibernate/hibernate-validator/pull/659/commits/662003de38b0428a7a13be68b0d30bf50ea0ec21 .

I think it should be generalized to all the immutable list/set in the metadata. Tell me what you think about it."	2017-02-14 16:39:47	0.0		0
3234	Should be backported to 5.4.	2017-02-06 18:26:03	0.0		0
3235	Rebased and merged. Nice work, thanks!	2017-02-08 10:17:41	0.0		0
3236	We shouldn't initialize `constraintValidator` here, it's useless. I'll change that and merge.	2017-02-08 10:11:46	0.0		1
3237	Reworked the commit message a bit and merged! Thanks!	2017-02-06 14:36:53	0.0		0
3238	Rebased and merged.	2017-02-06 11:09:27	0.0		0
3239	"With this, you don't avoid the resizing. Please keep the `newArrayList` call and change only the parameter value, it will take care of it.

Same for the other changes below."	2017-02-06 10:53:23	0.0		1
3240	"That's an array list, not a set with a load factor (assuming that's what you have in mind).

I'd prefer to phase out `newArrayList() ` as it provides no advantage any longer as we can rely on diamond. It's different for `newHashSet() `."	2017-02-06 10:58:04	0.0		1
3241	@gunnarmorling  Hmmm, what's the point of this? We would have to move back to the snapshot as soon as we make a new change to the API.	2017-02-03 14:55:18	0.0		1
3242	"Yes, it'll be changed again soon. But HV 6.0.0.Alpha1 should be built
against it.
"	2017-02-03 14:57:16	0.0		0
3243	Added the JIRA issue number to the commit message and merged. Thanks!	2017-02-03 15:54:08	0.0		0
3244	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2017-02-02 22:38:10	0.0		0
3245	ok to test	2017-02-03 08:06:05	0.0		0
3246	"@michalfotyga good catch! Could you sign the CLA at https://cla.jboss.org/index.seam for the Hibernate Validator project and get back to us with the username you used there?

Thanks!"	2017-02-03 08:07:29	0.0		0
3247	"Thanks @gsmet ! 😉 
Have started the CLA signing process yesterday but am still waiting for the application to be accepted. My user id is **michal.fotyga**"	2017-02-03 08:25:45	0.0		0
3248	Yeah, Emmanuel who validates the CLA is on vacation this week so we'll have to wait until Monday. I'll ping him on Monday.	2017-02-03 08:36:41	0.0		0
3249	"But I'll merge this right away.

Thanks!"	2017-02-03 08:37:33	0.0		0
3250	Thank you, what a nice way to start a day 😄 	2017-02-03 08:40:42	0.0		0
3251	Thanks, that was quick :) Merged to master and 5.4.	2017-02-02 11:27:50	1.0	2017-02-02 11:27:07	0
3252	"Looks good, thanks, @marko-bekhta!

> Another thing that came to my mind is that maybe we should throw an exception (IllegalArgumentException) if a parameterless method is passed for parameter method validation, WDYT?

I don't think we can do this, as the BV spec doesn't forbid passing such method. So we cannot apply stricter rules in the RI."	2017-02-02 08:40:48	0.0		0
3253	Rebased, applied and added one more commit for some clean-up/simplification. Thanks, Marko!	2017-02-02 08:41:48	0.0		0
3254	Great! Happy to help :)	2017-02-02 08:46:31	0.0		0
3255	`parameterNameProvider.getParameterNames( executable )` was called inside of the loop so I thought that extracting it out of it would be a bit faster. 	2017-02-01 20:30:47	0.0		0
3256	"This removed if statement seems to be redundant - this private method is called from two places. And in both cases there's 
```
Contracts.assertNotNull( parameterValues, MESSAGES.validatedParameterArrayMustNotBeNull() );
```
So `null` cannot be passed to this method."	2017-02-01 20:33:29	0.0		1
3257	Rebased and merged, thanks!	2017-02-02 10:15:00	0.0		0
3258	Fixed a few minor issues and merged to master. Will also backport to 5.4.	2017-01-31 15:34:46	0.0		0
3259	Looks good. Thanks, @gsmet!	2017-01-31 15:04:05	0.0		0
3260	"Thanks, @marko-bekhta. I've added another commit, mainly for getting rid of the ""uses"" sub-definition and pulling the actual element description right at the beginning. I'll merge that one as soon as the build has finished. Just let me know in case you see any further issues. Thanks again, it's much better for the PDF now."	2017-01-31 14:58:42	0.0		0
3261	great! Happy to help :)	2017-01-31 15:02:14	0.0		0
3262	Rebased and force pushed a minor change to a property name.	2017-02-09 14:16:24	1.0	2017-02-10 10:51:33	0
3263	Merged, thanks!	2017-01-30 16:20:27	1.0	2017-01-30 16:20:01	0
3264	"@gunnarmorling I pushed another commit with the relocation artifacts. Could you take a look at it?

Thanks."	2017-01-26 12:48:17	0.0		0
3265	@gsmet We also should add it for the Karaf features file.	2017-01-26 12:54:10	0.0		1
3266	Force pushed an update with the karaf-features stuff.	2017-01-26 14:43:56	0.0		0
3267	@gsmet Pushed another commit for making the artifact names more concise.	2017-01-26 14:50:29	0.0		0
3268	Squashed the last 2 commits and merged, thanks!	2017-01-26 15:54:33	0.0		0
3269	"Hi Marko,

Looks nice but I'm not very fond of us maintaining a list of currencies in the long time. I agree it does not change a lot but it does change. i'm also wondering if it may be possible to register other currencies in Moneta, which would make null and void the whole approach.

So, I'm -1 on this.

@gunnarmorling ?"	2017-01-25 08:55:47	0.0		1
3270	"Yes, hard-coding this list of currencies seems not desirable. In fact, javax.money defines an SPI for providing currencies: `CurrencyProviderSpi`. I.e. the set of available currencies really depends on the context of the specific application and registered currency providers.

One thing we could consider is to obtain the list of currencies exposed by the JDK itself (check out `java.util.Currency.getAvailableCurrencies()`, but it still wouldn't accomodate for the case of a custom currency provider implementation.

All in all I think that's not something we should validate."	2017-01-25 09:47:04	0.0		1
3271	Agreed. Let's close it. Thanks for your efforts, Marko!	2017-01-25 10:21:53	0.0		0
3272	"@gunnarmorling looks good and a nice thing to have.

But, if we set up a CI job, shouldn't we set failOnViolations to true?"	2017-01-24 17:06:23	0.0		0
3273	"> But, if we set up a CI job, shouldn't we set failOnViolations to true?

Yes, that's true. I've pushed one more commit for this."	2017-01-25 10:37:04	0.0		0
3274	Rebased, merged and Jenkins job created. Thanks!	2017-01-26 00:25:52	0.0		0
3275	@gsmet  Just fixed the checkstyled issue... Sorry	2017-01-23 19:02:22	1.0	2017-01-24 09:14:04	0
3276	@gunnarmorling Done, I updated the JIRA. Does it seem ok to you?	2017-01-24 08:58:47	1.0	2017-01-24 09:14:04	0
3277	Merged; thanks, @yrodiere!	2017-01-24 09:15:18	1.0	2017-01-24 09:14:04	0
3278	Pushed an update to rename `forExecutable` to `forReturnValue`.	2017-01-20 10:19:59	0.0		0
3279	"Rebased and applied. Thanks for spotting and fixing, @marko-bekhta / @gsmet!

On the backporting, let's apply it to 5.3. No need for an eager release, though; it's a very special case and not user-reported."	2017-01-20 11:35:49	0.0		0
3280	Rebased and applied. Thanks, @gsmet!	2017-01-20 08:58:44	0.0		0
3281	It'd make sense to have this and others in the TCK eventually. But it's good here for now, I've made it a talking point for next week to discuss the TCK.	2017-01-20 08:57:36	0.0		0
3282	Merged, thanks!	2017-01-19 10:17:50	0.0		0
3283	Merged, thanks!	2017-01-19 10:20:02	0.0		0
3284	"Hum, ok. What's the benefit of that, why not always go for HTTPS?
"	2017-01-19 09:06:13	0.0		0
3285	"> The PDF still has some oddities, (e.g. page 15, 98, or on page 45 the first one or two listings may appear before the page break), but I think it's definitely good enough.

Unfortunately, apart from opening an issue, I don't think there's much I can do about fixing it. That being said, as mentioned earlier by Yoann, our current PDF output is far from being perfect either.

> Maybe we can find a ""less styled"" font for listings in the PDF, too? Something more neutral would be nice, but for sure no blocker either.

OK, so you have the same problem I have. I was wondering if maybe I was missing a common font. I agree it's something we should fix.

> The epub version also has some broken image references (e.g. next to the author name at the beginning of each chapter, maybe we can just get rid of this; but also the XML schema). I wouldn't spend much time on tuning epub output. It's nice to have, but not really needed, so I'd rather omit it if it takes to much effort to fix.

I'll check that. Maybe it's too alpha for us."	2017-01-19 09:22:06	0.0		1
3286	Jenkins, retest this please	2017-01-19 10:14:31	0.0		0
3287	"@gunnarmorling I modified the fonts. We now have a specific theme which is mostly the default with a few variables changed. I also put the default in the theme directory so that we can easily compare with the reference if we need to update it one day.

I removed the epub output. It's definitely not in a good shape. I didn't have an epub viewer to test it but now that I did, it's far from being ready for prime time.

I also changed the comments."	2017-01-19 11:42:48	0.0		0
3288	"@gunnarmorling the release scripts are ready and so is the outdated content script on docs.jboss.org.

The only thing left will be to remove the link for the multi page html output on the website."	2017-01-19 14:13:45	0.0		1
3289	Rebased and applied. Thanks, @gsmet! Can you merge it to 5.4, too?	2017-01-20 10:30:29	0.0		0
3290	Merged to 5.4.	2017-01-20 11:07:42	0.0		0
3291	OOI, what's the issue here that's fixed in that new version? A link to the issue in their tracker would be nice.	2017-01-19 08:17:07	0.0		0
3292	That URL looks weird. Should be https://code.jquery.com/jquery-3.1.0.min.js I reckon?	2017-01-19 08:19:50	0.0		0
3293	(though I personally dislike not getting it from our own server to begin with, but arguable there are pros/cons for both approaches)	2017-01-19 08:40:58	0.0		0
3294	It's a protocol relative URL. Meaning the protocol adapts depending on the current protocol of the page.	2017-01-19 09:02:08	0.0		0
3295	"See the commented part with resources. Asciidoctor currently copies all the resources from src/main/asciidoc so you end up with all the images/css/docinfo files, even in the PDF or epub case. 1.6 provides a resources option allowing to filter the elements copied.

I'll make that more clear."	2017-01-19 09:13:34	0.0		0
3296	"> Hum, ok. What's the benefit of that, why not always go for HTTPS?

To be honest, I also use that to be sure the JS is not loaded when the user is browsing it locally. If he has downloaded the doc of a specific version, I'm pretty sure he doesn't want to be notified that it's an old one."	2017-01-19 11:43:41	0.0		0
3297	Can you add a reference to the original source of this (GitHub link). And instead having the two files side by side, how about adding the original one verbatim in one commit and then adapt it as per our needs in a separate commit. That's how we handled other cases where started from a copied resource.	2017-01-20 09:06:42	0.0		1
3298	Seems not needed anymore?	2017-01-20 09:23:05	0.0		1
3299	"Because, if I want to update it and base it on a new default-theme.yml file, it's going to be messy. This way, it's really easy to keep track of the changes.

I did that a lot in ${previous-job} and it's really more practical like that.

I'll add the reference to the GitHub file at the top of our theme but I prefer to keep the original file too to be on the safe side."	2017-01-20 09:24:16	0.0		0
3300	Yeah, it does not do any harm so I let it there as this way, we can enable it quickly to do more tests if we want to.	2017-01-20 09:25:09	0.0		1
3301	Ok, works for me, too.	2017-01-20 09:32:16	0.0		0
3302	Done.	2017-01-20 10:12:02	0.0		0
3303	"@gunnarmorling there is a javadoc generation error on CI:
```
/var/lib/jenkins/workspace/hibernate-validator-PR/distribution/../engine/src/main/java/org/hibernate/validator/internal/metadata/location/ConstraintLocation.java:94: error: reference not found
	 * e.g. a bean would be passed for a {@link PropertyConstraintLocation} but an object array for a
```"	2017-01-18 21:38:23	0.0		1
3304	Thanks, pushed an update.	2017-01-19 08:35:42	0.0		0
3305	Merged, thanks!	2017-01-19 10:40:25	0.0		0
3306	Nice cleanup.	2017-01-19 10:35:13	0.0		0
3307	Rebased and applied. Thanks, @gsmet!	2017-01-18 14:05:19	0.0		0
3308	Merged and backported to 5.4 as well as 5.3. Thanks, @gsmet!	2017-01-18 11:16:11	0.0		0
3309	looks great! and epub too :+1: 	2017-01-17 22:53:16	0.0		0
3310	"Gah. I replied to your email before I saw there was a PR. Copying my comments here:

Overall it looks great, very clean. There are a few really strange issues, though. If the previous PDF wasn't perfect either, I agree we can ship the PDF as is, but otherwise we may want to look at it a bit...

The main issues:
 * Borders for code examples seem to generate strange artifacts when there is a page break just before. See for instance the bottom of pages 55, 62, 97 and 112.
 * Is there any way to tune page breaks? Or to tune the font size for code examples so that they fit better? Sometimes its a bit weird:
   * Pages 18-19, I would have put the page break just before the ""2.1.5"" title
   * Page 97, I think scaling down the font size just a bit would make the code example fit inside the page.

The nitpicking:

 * I find the margins aggressively small, but maybe it's just me
 * Some images seem way too big to fit one page: I noticed page 96, but maybe there are others. 

"	2017-01-18 08:55:39	0.0		1
3311	"""Some images seem way too big to fit one page"". There's a setting to tweak this, see:
  https://github.com/asciidoctor/asciidoctor-pdf#image-scaling
but the default setting shouldn't do this. The weird thing is that in optaplanner-docs, I have plenty of big images that get scaled down to fit nicely, but in another project (same asciidoc versions, some config etc), I couldn't get the big images to scale down to fit, even with playing with that param. This problem entirely eluded me. If you find out how to fix it, let me know pls."	2017-01-18 09:02:21	0.0		0
3312	"@gsmet Actually, I just had the look at the [Docbook output](https://docs.jboss.org/hibernate/validator/5.4/reference/en-US/pdf/hibernate_validator_reference.pdf), and there are really strange things too, such as page breaks right in the middle of code examples (p. 76) or images overflowing out of the page (p. 85).

So yes, you're right, it seems better with asciidoc anyway :) We can always merge as is, and tune it later."	2017-01-18 09:05:25	0.0		1
3313	@gunnarmorling yes, it was my plan to move the pdf + epub generation to a profile as for the docbook output.	2017-01-18 09:40:16	0.0		0
3314	"Ok, cool. You also could add something like <skip>${skip.pdf}</skip> to the
execution configuration block.
"	2017-01-18 09:44:35	0.0		1
3315	Looks like we all agree it's the way to go and the output is good enough. I'll pursue this as a pet project.	2017-01-18 09:47:28	0.0		0
3316	Nice. I'll close it for now so to keep the list of in-flight PRs lower. Looking forward to the final version of it. Would great to have it in Alpha1.	2017-01-18 10:46:55	0.0		0
3317	Is the analytics snippet still contained in the rendered output?	2017-01-18 08:31:13	0.0		0
3318	Emmanuel told me that @ge0ffrey knows how to do it in case we need a pointer.	2017-01-18 08:39:22	0.0		0
3319	"It's easy in asciidoc:
1. Add a docinfo footer file:
  https://github.com/droolsjbpm/optaplanner/blob/master/optaplanner-docs/src/main/asciidoc/index-docinfo-footer.html
2. Set these in the attributes element
  https://github.com/droolsjbpm/optaplanner/blob/master/optaplanner-docs/pom.xml#L50

That docinfo footer file itself currently still gets copied to the target folder, but they merged my PR to fix that for the next version. I think the 1.5.4 release for https://github.com/asciidoctor/asciidoctor-maven-plugin is overdue (I am waiting for it since November)."	2017-01-18 08:53:25	0.0		0
3320	Cool; thanks, @ge0ffrey!	2017-01-18 09:11:48	0.0		0
3321	Merged, thanks!	2017-01-16 22:14:37	1.0	2017-01-16 22:14:28	0
3322	@gunnarmorling surprising the build does not fail.	2017-01-16 13:24:06	1.0	2017-01-16 13:27:37	0
3323	We have AnimalSniffer set up on 5.4, but for a reason that I don't remember it's not run as part of the default build. But it seems it wouldn't even have caught that one, I just tried it out. Maybe it's not working with annotations or something?	2017-01-16 14:21:14	1.0	2017-01-16 13:27:37	0
3324	"@marko-bekhta thanks! Could you create a global JIRA for that with a fixVersion to 5.4-next?

It would be nice if you could add some tests similar to what @gunnarmorling did in #628 to exercise the parameter handling.

"	2017-01-16 09:01:26	0.0		1
3325	@gsmet yes, I'll do that.	2017-01-16 09:56:08	0.0		0
3326	Nice. Thinking of it, would have been a nice example for a small annotation processor to generate the def types based on the actual constraints :)	2017-01-16 10:28:02	0.0		0
3327	@marko-bekhta while we're at it, could you add a package.html in the pl specific constraints package?	2017-01-16 14:47:58	0.0		1
3328	@gunnarmorling, @gsmet  I think this one is not very urgent right ? if that's so I'd like to try the processor approach to cover generation of all these Defs. Otherwise I can finish this one - add a few tests for each Def and add a package file that @gsmet mentioned. And after that look into annotation processor Def generation. WDYT ?	2017-01-18 09:19:45	0.0		1
3329	"Hey, it's not very urgent, but I'm not sure whether an AP really is worth it. It's not that we add new constraints every day. But then, such processor might quickly be implemented. One problem is that we need the defs for the BV types which are not subject to compilation within HV.

I'll leave it to your judgement which route to pursue, but probably the AP will never pay off if it takes more than a few hours to write it."	2017-01-18 09:30:52	0.0		0
3330	Although it's not critical, I would like to have it for our next 5.4 so I think for now the manual approach is good enough (and you already did most of the work). We could pursue the annotation processor approach as a parallel pet project.	2017-01-18 09:36:52	0.0		1
3331	I've added a few tests and missing `package.html`  and squashed everything together. Later I'll look into annotation processor option as well, as for me it'll be an interesting thing to implement  :)	2017-01-19 13:59:59	0.0		0
3332	"@marko-bekhta so I merged it on master but, while backporting it on 5.4, I found a bug that one of your tests reveals.

I'll fix the bug then merge on 5.4."	2017-01-19 18:24:49	0.0		1
3333	@gsmet ok, great! And what was the bug ? 	2017-01-20 08:45:07	0.0		0
3334	@marko-bekhta this one: https://hibernate.atlassian.net/browse/HV-1220	2017-01-20 08:53:40	0.0		0
3335	"@marko-bekhta and here is the corresponding PR: https://github.com/hibernate/hibernate-validator/pull/640/files

It's normal you didn't see it as it was coincidentally fixed in master. Nice you triggered it by accident, very few chances we would have found it otherwise."	2017-01-20 09:18:04	0.0		0
3336	@gsmet Thanks! I was just looking at that PR :)	2017-01-20 09:22:23	0.0		0
3337	Fixed the JIRA issue number in the commit message and merged, thanks.	2017-01-16 08:58:20	0.0		0
3338	@gunnarmorling thanks for the review! I'll make corresponding changes tomorrow. 	2017-01-13 20:29:38	0.0		0
3339	"Let's remove it. We cannot really know whether it's a typo or a ""virtual""
property on purpose.
"	2017-01-13 20:47:12	0.0		1
3340	@gsmet thanks for review! I'll make corresponding changes. 	2017-01-16 09:57:48	0.0		0
3341	@marko-bekhta As you added another commit, is it good to go from your side?	2017-01-18 08:41:57	0.0		0
3342	yes @gunnarmorling , I've made all the changes, and added a test for the ScriptAssertDef as I couldn't find one. So I'd say it's good to go :)	2017-01-18 09:14:34	0.0		0
3343	Ok, cool. I'll take another look and merge.	2017-01-18 09:32:26	0.0		0
3344	Rebased and applied. Added one more commit for some clean-up, most notably using the common assertion methods on `ConstraintViolationAssert`. Thanks, @marko-bekhta!	2017-01-18 10:43:08	0.0		0
3345	@marko-bekhta I've applied it to 5.4, too. It's a bit against the spririt of CRs, as no features should be added after a CR has been put out. But this feature is very insulated, so I don't think there's much risk to it and it's nice to have it out.	2017-01-18 10:59:26	0.0		0
3346	"It's a good consideration to check presence of the field, but actually it's not needed. `getPropertyNode()` in the node builder API doesn't mandate that the given property actually exists, it's intended to pass ""fake fields"", e.g. for map keys. So we shouldn't enforce this here."	2017-01-13 20:15:01	0.0		1
3347	"""field"" = ""property"". In general, BV abstracts from fields/getters and exposes them as properties in a unified manner. Also the default behavior should be mentioned. Something along these lines:

> If given, the resulting constraint violation will be reported on the specified property. If not given, the constraint violation will be reported on the annotated bean.

Ah, and could you add ""@since 5.4""?"	2017-01-13 20:18:32	0.0		1
3348	log=LOG (I know we have it lowercase in many places, but in new code we tend to use the proper casing for constants).	2017-01-13 20:19:40	0.0		0
3349	See my comment above, we shouldn't check for the presence of the field or property getter.	2017-01-13 20:20:10	0.0		1
3350	filed=property. Though you could omit the param tags altogether, they don't provide any further insight.	2017-01-13 20:21:08	0.0		1
3351	So maybe make it as a warning to let users know that they might mistyped a property name? or just remove it ?	2017-01-13 20:34:22	0.0		1
3352	"- s/on which/for which/
- remove the for at the end of the sentence
- the `@since 5.4` should be after the `@return`"	2017-01-16 09:04:15	0.0		1
3353	Please add the `@TestForIssue` annotation. It's less important than for bugs but it's a good habit.	2017-01-16 09:06:29	0.0		1
3354	I think it would be nice to add a sentence about thre `reportOn` option in the description below.	2017-01-16 09:18:19	0.0		1
3355	Is the `ScriptAssertDef` class tested somewhere? If so, it would be nice to also test the `reportOn` option.	2017-01-16 09:19:23	0.0		1
3356	You see, you also start to see typos everywhere ;)	2017-01-18 09:43:35	0.0		0
3357	@gunnarmorling I just pushed a version addressing all your comments.	2017-01-17 18:21:02	1.0	2017-01-18 17:39:58	0
3358	@gunnarmorling updated to use payload and fixed all your comments.	2017-01-18 15:55:10	1.0	2017-01-18 17:39:58	0
3359	I'm wondering whether it shouldn't be on `ConstraintLocation` instead. The latter has all the info/ops related to value retrieval and the configuration of a specific element (field, parameter etc.) `MetaConstraint` refers to this and has the higher-level constraint info.	2017-01-16 12:16:36	1.0	2017-01-18 17:39:58	0
3360	How is it different from `ConstraintLocation#getTypeForValidatorResolution()`? Having all these types with slightly different semantics makes me a bit concerned.	2017-01-16 12:17:18	1.0	2017-01-18 17:39:58	1
3361	Nope. `ConstraintLocation` is the object defining a location, it can be shared by several different constraints, some of them requiring unwrapping, some of them not.	2017-01-16 13:15:23	1.0	2017-01-18 17:39:58	0
3362	"Note that in the MetaConstraint, the extractor is only set if there is some extraction going on.

I think it will be more clear with the next commit coming."	2017-01-16 13:21:41	1.0	2017-01-18 17:39:58	0
3363	"The `typeOfValidatedElement` is the type of the validation object. It might not be the type used for validator resolution as it might be the wrapped type.

Note that it's exactly the same behavior as before. The code has been moved but is exactly identical to the existing logic."	2017-01-16 13:22:59	1.0	2017-01-18 17:39:58	0
3364	Ah, ok, so that's already planning for allowing different validation-applies-to settings for the constraint of one element. Makes sense.	2017-01-16 14:03:56	1.0	2017-01-18 17:39:58	0
3365	No need for these @params if you ask me.	2017-01-17 07:36:15	1.0	2017-01-18 17:39:58	0
3366	`getValueExtractorManager()`	2017-01-17 07:43:13	1.0	2017-01-18 17:39:58	0
3367	The var name should be adjusted, too.	2017-01-17 07:43:45	1.0	2017-01-18 17:39:58	0
3368	Just seeing it, `@IgnoreJava8Requirement` can go away.	2017-01-17 07:45:13	1.0	2017-01-18 17:39:58	1
3369	`isUnwrapByDefault()`, sticking to your change above?	2017-01-17 07:46:14	1.0	2017-01-18 17:39:58	0
3370	Nice!	2017-01-17 07:48:16	1.0	2017-01-18 17:39:58	0
3371	Where has it been before?	2017-01-17 07:49:41	1.0	2017-01-18 17:39:58	0
3372	We should rename `getCascadedValueExtractor` into `getValueExtractor` as it's not used for cascading only anymore.	2017-01-17 07:50:34	1.0	2017-01-18 17:39:58	1
3373	I like that we get rid of things like this :)	2017-01-17 07:53:14	1.0	2017-01-18 17:39:58	0
3374	Should be renamed then, too.	2017-01-17 07:54:03	1.0	2017-01-18 17:39:58	0
3375	Why are these gone?	2017-01-17 07:55:53	1.0	2017-01-18 17:39:58	1
3376	This seems unused now.	2017-01-17 08:12:16	1.0	2017-01-18 17:39:58	1
3377	"No, it can't. I remember trying to remove it but animal-sniffer complains as JavaFX is not part of the Java 8 signatures.

I added a comment explaining that."	2017-01-17 08:32:22	1.0	2017-01-18 17:39:58	0
3378	Done	2017-01-17 12:50:23	1.0	2017-01-18 17:39:58	0
3379	Done.	2017-01-17 12:50:47	1.0	2017-01-18 17:39:58	0
3380	Done.	2017-01-17 12:52:29	1.0	2017-01-18 17:39:58	0
3381	Good catch. Removed.	2017-01-17 12:54:12	1.0	2017-01-18 17:39:58	0
3382	Done.	2017-01-17 12:56:03	1.0	2017-01-18 17:39:58	0
3383	`.unwrapValidatedValue()` is gone and everything is managed in the constraint definitions.	2017-01-17 12:57:35	1.0	2017-01-18 17:39:58	0
3384	Removed.	2017-01-17 18:04:29	1.0	2017-01-18 17:39:58	0
3385	Done.	2017-01-17 18:19:15	1.0	2017-01-18 17:39:58	0
3386	Why not just `getValueExtractor()`? It's used for type parameter constraints and cascaded validation.	2017-01-18 13:22:51	1.0	2017-01-18 17:39:58	1
3387	Nice you could do it :)	2017-01-18 13:26:32	1.0	2017-01-18 17:39:58	1
3388	Why is that actually? As `Optional` has a type parameter, constraints applying to the wrapped value should be given on the type argument, hence no need for default-unwrapping for element-level constraints. Same for the non-legacy extractor.	2017-01-18 13:44:26	1.0	2017-01-18 17:39:58	0
3389	Ok, but shouldn't we have a test for specifying the option (via the API) on the constraint level? Or are there other tests for that?	2017-01-18 13:49:21	1.0	2017-01-18 17:39:58	1
3390	Removed.	2017-01-18 14:32:23	1.0	2017-01-18 17:39:58	0
3391	Renamed.	2017-01-18 14:32:34	1.0	2017-01-18 17:39:58	0
3392	I added some new tests to test the programmatic configuration with payload.	2017-01-18 14:51:57	1.0	2017-01-18 17:39:58	0
3393	Jenkins, retest this please	2017-01-12 12:21:40	1.0	2017-01-12 13:21:27	0
3394	Jenkins, retest this please	2017-01-12 12:45:39	1.0	2017-01-12 13:21:27	0
3395	"Jenkins, retest this please
"	2017-01-12 12:47:05	1.0	2017-01-12 13:21:27	0
3396	I also added the constraint in the ref guide.	2017-01-12 12:55:24	1.0	2017-01-12 13:21:27	0
3397	"Jenkins, retest this please
"	2017-01-12 12:56:10	1.0	2017-01-12 13:21:27	0
3398	"Can you add ""@since 5.4""?"	2017-01-12 11:49:59	1.0	2017-01-12 13:21:27	1
3399	"Maybe add French, too? In German, it would be ""Ung\u00FCltige W\u00E4hrung (erlaubte Werte: {value})""."	2017-01-12 12:02:44	1.0	2017-01-12 13:21:27	1
3400	"also if you'd like - Ukrainian translation would be ""неправильна валюта (повинна бути однією із {value})"" = \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u0430 \u0028\u043f\u043e\u0432\u0438\u043d\u043d\u0430 \u0431\u0443\u0442\u0438 \u043e\u0434\u043d\u0456\u0454\u044e \u0456\u0437 \u007b\u0076\u0061\u006c\u0075\u0065\u007d\u0029"	2017-01-12 12:18:54	1.0	2017-01-12 13:21:27	0
3401	@marko-bekhta thanks but it looks like you also escaped the {value} variable which shouldn't be. Could you post a message with the variable unescaped?	2017-01-12 12:31:24	1.0	2017-01-12 13:21:27	1
3402	@gsmet done:  \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u0430 (\u043f\u043e\u0432\u0438\u043d\u043d\u0430 \u0431\u0443\u0442\u0438 \u043e\u0434\u043d\u0456\u0454\u044e \u0456\u0437 {value})	2017-01-12 12:39:13	1.0	2017-01-12 13:21:27	0
3403	Done. I also added a commit to add it to Poland specific annotations.	2017-01-12 12:44:58	1.0	2017-01-12 13:21:27	1
3404	Added, thanks. Waiting for Yoann's blessing on the French translation and it should be good.	2017-01-12 12:45:25	1.0	2017-01-12 13:21:27	0
3405	Rebased and applied. Thanks, @gsmet!	2017-01-11 09:34:34	0.0		0
3406	I may misremember, but didn't we want to add this optional dependency to the descriptor to begin with? Then a user would only have to drop in the modules (and add the API module in jboss-deployment-structure.xml), but not fiddle with any existing module.xml.	2017-01-10 10:11:35	1.0	2017-01-10 15:12:51	0
3407	Isn't it what it does? This optional dependency is included in our patch file.	2017-01-10 11:13:16	1.0	2017-01-10 15:12:51	0
3408	Ah, of course. Not sure why, but somehow I thought that'd be the setup code within the integration test module.	2017-01-10 11:16:33	1.0	2017-01-10 15:12:51	0
3409	:)	2017-01-10 11:28:31	1.0	2017-01-10 15:12:51	0
3410	"So I've finally made a few more changes :). Now it should catch more invalid cases. I can't see other way than having two methods (one for email another for URLs) to validate domain part, as for the email IPv4 should be in `[]` and for URL it shouldn't (also for IPv6 for email it should be like `[IPv6:SOME_IP_GOES_HERE]`, and for URL - IPv6 is just in `[]`). 

Another question is about dotless domains. Even though they are prohibited (see [here](https://www.icann.org/news/announcement-2013-08-30-en)) for example emails with such domains are considered ""valid"" (see [here](https://en.wikipedia.org/wiki/Email_address)). If we disallow such domains in that case URL validation for files fails. From one of the cases present in tests - for `file://Users/foobar/tmp` the ""host"" part is `Users` and it is dotless. Should we leave it as is? Or should we do something about it ? WDYT?

I also added a simple valid/invalid IPv6 case, as these were missing for the URLs. 
"	2017-01-24 21:36:42	0.0		0
3411	@gsmet, @marko-bekhta, where are we with this one? Does it require any further changes?	2017-01-30 12:21:14	0.0		0
3412	Hi @gunnarmorling , I've replied to @gsmet comments and as I understand he'll make his final review. I don't have any more changes to add from my side.  	2017-01-30 12:50:04	0.0		0
3413	@marko-bekhta merged, thanks!	2017-01-31 14:52:25	0.0		0
3414	"I don't think these ones are an issue: we should support exotic protocols.

Note that the purpose of the regexps presented in https://mathiasbynens.be/demo/url-regex is to create a URL shortener, not to follow the standard, so all the examples presented shouldn't be considered valid."	2017-01-09 09:51:57	0.0		1
3415	"All the ones above are indeed an issue.

If we decide to fix this, we might do it by using the domain validation we apply in EmailValidator to the domain part. I think it should fix most of the issues."	2017-01-09 09:52:20	0.0		1
3416	The four above with dashes might be considered an issue too.	2017-01-09 09:53:58	0.0		0
3417	The ones with malformed IP addresses might also be considered an issue, even if I don't think it's that important to be thorough on IP addresses based URLs.	2017-01-09 09:55:04	0.0		0
3418	I'm surprised the IDN URLs pass with java.net.URI. I used to think that they were not supported (I had to use galimatias to parse URIs with IDN). Did it change recently?	2017-01-09 10:02:02	0.0		0
3419	The ones with valid IP addresses should be considered valid.	2017-01-09 10:04:00	0.0		0
3420	"Why is it the expectation that these are invalid? Is it some illegal IP range or something?

I'd be fine if we just rejected those with a wrong number of octets but don't apply any further validation on the actual ranges (if that's the issue)."	2017-01-11 09:39:32	0.0		0
3421	@gunnarmorling the link from which the URLs were extracted was used to have an URL validator for link shortener. Thus they have very special requirements. That's why we should be careful with the examples given.	2017-01-11 09:45:07	0.0		0
3422	"here's some explanation from the author of that regexp:

> I have added simple network ranges validation, the rules I used are:
> - valid range 1.0.0.0 - 223.255.255.255, network adresses above and including 224.0.0.0 are reserved addresses
> - first and last IP address of each class is excluded since they are used as network broadcast addresses
> since I don't think this is worth implementing completely in a regular expression, a following pass should exclude the Intranet address space:
> 10.0.0.0 - 10.255.255.255
> 172.16.0.0 - 172.31.255.255
> 192.168.0.0 - 192.168.255.255
> the loopback and the automatic configuration address space:
> 127.0.0.0 - 127.255.255.255
> 169.254.0.0 - 169.254.255.255
> while the local, multicast and and the reserved address spaces:
> 0.0.0.0 - 0.255.255.255 (SPECIAL-IPV4-LOCAL-ID-IANA-RESERVED)
> 224.0.0.0 - 239.255.255 (MCAST-NET)
> 240.0.0.0 - 255.255.255.255 (SPECIAL-IPV4-FUTURE-USE-IANA-RESERVED)
> should already be excluded by the above regular expression.

I've extracted the validation used in EmailValidator as @gsmet suggested in a few comments above, and left commented out those cases that still do not pass. "	2017-01-11 21:20:59	0.0		0
3423	I would keep this in the EmailValidator as it's in no way related to the domain validation.	2017-01-12 15:34:34	0.0		0
3424	"Right, I thought that regexps for local part and domain had same subparts so I moved both out - but after closer look - they don't. I'll move the local part back. Also I found out that for the email domain ip addresses are in brackets for example - `jsmith@[192.168.2.1] or jsmith@[IPv6:2001:db8::1]` so the same regexp wouldn't work for domain and email. I'll see what I can do about it and let you know when I have something.
"	2017-01-13 09:59:52	0.0		0
3425	So, the IP domain is now covered by `DOMAIN`?	2017-01-25 10:43:41	0.0		0
3426	"I'm a bit concerned about this change. To validate the domain name with the regexp, I think we should convert to punycode first. At least, that's what I see everywhere.

Or you did change the regexp to also accept the range of characters from IDN?

All in all, I think the commit would merit a longer commit message so that we can understand what you're doing."	2017-01-25 10:46:52	0.0		1
3427	AFAICS, you changed the regexp to make these cases invalid?	2017-01-25 10:47:27	0.0		0
3428	In the regexp, it looks like you put `[]` around the IPv6 IP address but here you just put the address without any wrapper? Did I miss something?	2017-01-25 10:48:53	0.0		0
3429	well as the regexp for the domain is built from chars and digits IPv4 is picked up with it as well, so I thought that as additional `[]` are not needed for IPv4 then we can skip the part` | IP_DOMAIN` 	2017-01-25 10:57:49	0.0		1
3430	"Yes, this part might be a bit confusing ... As you've guessed I've changed the regexp to allow other chars as well (not only ASCII) and moved the regexp check before `IDN.toASCII`.
The only reason for this change was to be able to catch invalid cases that you commented on next:
```
http://a.b--c.de
```
so as I understand these two dashes `--` makes this url invalid. But if we do `IDN.toASCII` first and there were non ASCII symbols it might generate for example `xn--` which would be caught with the regexp as invalid (in case we update regexp to catch `--`), even though it's not. "	2017-01-25 11:16:25	0.0		0
3431	"yes, it's this change:
`DOMAIN_LABEL = ""("" + DOMAIN_CHARS_WITHOUT_DASH + ""-?)*"" + DOMAIN_CHARS_WITHOUT_DASH + ""+""`"	2017-01-25 11:18:52	0.0		0
3432	"right it's an invalid case - so there's `assertFalse`  on this line. there's a valid case at line 332:
`assertTrue( validator.isValid( ""http://[2001:0db8:0a0b:12f0:0000:0000:0000:0001]"", null ) );`
"	2017-01-25 11:20:23	0.0		0
3433	Ah, right, sorry!	2017-01-25 12:11:38	0.0		0
3434	I'll remove this comment in the final version committed as it's useless (private method and method name and parameter very explicit).	2017-01-31 13:36:32	0.0		0
3435	I will include that in the previous comment.	2017-01-31 13:37:51	0.0		0
3436	Note that when we reformat, `@param` and `@return` are not separated by a new line (at least in Eclipse). I'll fix that.	2017-01-31 13:41:32	0.0		0
3437	"In such moments I sometimes think - maybe I should use Eclipse (at least for HV), to not have these formatting differences... But then I understand that I'm to used to IntelliJ :)
need to find and update this to match :) "	2017-01-31 15:06:06	0.0		0
3438	"Hi @gsmet !

Sorry to hear that, hope you feel better now! As for the tests - I've run it with maven -U option and they passed now... so maybe it was some problem with the local libs ? I don't know ... but it works now! so this issue is resolved (at least for now :) ). I'll look into that maven plugin and let you know when I have something ..."	2017-01-08 09:54:48	0.0		0
3439	Also one more thing - I was thinking about this metadata provider - and it is very similar to the annotation based one with similar logic but different types. But as you were saying about the index - that we can only use it up to certain part and then move to reflection, the same apply here - that without some major changes it seems not possible to group the same logic of both providers (annotation and index based ones) in one place ...	2017-01-08 10:01:17	0.0		1
3440	"And then there's also this thought that I had related to HV in general, not related to Jandex, about unwrapping validated values with `UnwrapValidatedValue` annotation. I was thinking that with type argument annotations this `UnwrapValidatedValue` seems to become redundant. And having less things to support, and check for, might make the code run a bit faster ? You probably already thought about this and have some decision about it, otherwise it might be something to think about ... 

I don't know if this would be of any value to you but I was feeling like share this thought with you... :)"	2017-01-08 10:11:49	0.0		0
3441	@marko-bekhta `UnwrapValidatedValue` will be removed in HV 6. It is being replaced by another annotation called `ConstraintsAppyTo` which has a slightly different behavior. Gunnar added it to the spec in the appendix related to value extraction but it has not been implement yet.	2017-01-09 10:07:05	0.0		0
3442	"> Also one more thing - I was thinking about this metadata provider - and it is very similar to the annotation based one with similar logic but different types. But as you were saying about the index - that we can only use it up to certain part and then move to reflection, the same apply here - that without some major changes it seems not possible to group the same logic of both providers (annotation and index based ones) in one place ...

Yes. My current opinion is that we should try to get Jandex to work and see how it behaves. If we see it has some value, we will think about how we have to change HV to better fit this addition. Not relying to much on the reflection API in our internals is one of it I think."	2017-01-09 10:08:35	0.0		1
3443	@gsmet. Looks good. Thanks! Feel free to merge yourself once you've added the adjustments to the iteration style.	2017-01-05 17:08:01	1.0	2017-01-06 11:22:56	0
3444	Merged, thanks!	2017-01-03 08:41:11	0.0		0
3445	"and there is a missing `. I fixed it and merged.

Thanks, good catch!"	2017-01-03 08:41:01	0.0		0
3446	That's merged, right? Closing it. Thanks!	2017-01-03 09:00:55	0.0		0
3447	"Thanks for taking the time to report this and propose a fix. I proposed a slightly different update to point to the html_single documentation which is now our canonical reference (trying to improve SEO here).

Closing this one."	2017-01-02 08:47:43	0.0		0
3448	Note that the build is going to be broken until we merge the java.time PR.	2016-12-23 13:26:22	1.0	2016-12-23 16:49:26	0
3449	Why are you doing it for a list type?	2016-12-23 16:29:52	1.0	2016-12-23 16:49:26	1
3450	Yes, it's currently commented out.	2016-12-23 08:52:20	1.0	2016-12-23 08:52:38	0
3451	Mmmh, ok. Weird that asciidoc still processes the commented out part then.	2016-12-23 08:55:35	1.0	2016-12-23 08:52:38	0
3452	"That's weird. I checked and it wasn't part of the rendered doc.

2016-12-23 9:55 GMT+01:00 Guillaume Smet <notifications@github.com>:

> Mmmh, ok. Weird that asciidoc still processes the commented out part then.
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/hibernate/hibernate-validator/pull/613#issuecomment-268958842>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AABvxDDgnRs6-m8yZGz0xADTAy1M8G18ks5rK4yIgaJpZM4LUp7T>
> .
>
"	2016-12-23 09:13:05	1.0	2016-12-23 08:52:38	0
3453	Thx :)	2016-12-22 15:08:02	1.0	2016-12-22 15:07:58	0
3454	it always amazes me how do you find all those typos and how you are cleaning the javadocs !	2016-12-22 15:14:45	1.0	2016-12-22 15:07:58	0
3455	Jenkins, retest this please	2016-12-21 15:39:44	1.0	2016-12-22 07:49:26	0
3456	Rebased and merged. Thanks, @gsmet!	2016-12-23 16:28:47	0.0		0
3457	Couldn't we even get rid of this altogether and use the new `ELManager`?	2016-12-22 07:57:05	0.0		1
3458	Is it right to return null here?	2016-12-22 07:58:27	0.0		0
3459	Probably we should wrap it into a `ValidationException` (not sure if it ever can occur).	2016-12-22 07:59:57	0.0		1
3460	Or, if we want to avoid `ELManager` due to the classloading issues we discussed a while ago, why is it that we need a custom `ELContext`?	2016-12-22 08:04:23	0.0		0
3461	AFAICS it's not something that should occur. And all the other resolvers throw a `PropertyNotWritableException` so we'd better be consistent.	2016-12-22 08:43:08	0.0		1
3462	Yes. In fact, it was already returning null before simplication as base was null when it was called.	2016-12-22 08:43:46	0.0		0
3463	"There are 2 reasons why I kept our specific context:
- first, we provide a way to inject a specific `ExpressionFactory` and believe it or not, the one we passed to `StandardELContext` is not used, except to initialize the `StreamELResolver` (see the constructor of `StandardELContext`). See ELContext#convertToType to see how it defaults to the static one if it is not found in the context. So if we want to be sure it's used, we need to put it in the context.
- the second reason is that, with a `StandardELContext`, we instantiate new resolvers for each interpolation, while they are stateless and can be shared.

Note that to keep the list of resolvers static, I didn't add the `StreamELResolver` which didn't look as much value to me (and wasn't present before). However, I added the `StaticFieldELResolver`."	2016-12-22 08:53:15	0.0		0
3464	"> So if we want to be sure it's used, we need to put it in the context.

Yes, but couldn't it be done like this:

    ELContext ctx  = new StandardELContext( factory );
    ctx.putContext( ExpressionFactory.clss, factory );

> we instantiate new resolvers for each interpolation

Mh, that sounds bad. Where is it happening?
"	2016-12-22 09:07:14	0.0		0
3465	As discussed on HipChat, we instantiate a new context for each message interpolation (which is the way it should be done). In our implementation, we use a static `CompositeELResolver` which is shared while `StandardELContext` instantiate new resolvers.	2016-12-22 09:35:26	0.0		0
3466	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2016-12-16 13:42:17	0.0		0
3467	"Ok to Test
"	2016-12-16 13:45:11	0.0		0
3468	I also have pull request for the `5.4` branch eagerly waiting in the line :smile: 	2016-12-16 13:52:40	0.0		0
3469	"Hi @mkurz,

Quick question: did you analyze the change you made or did you just change `newHashSet` to `newLinkedHashSet` everywhere? Same for `asSet`.

`LinkedHashSet` consumes slightly more memory so we should evaluate this change for each use case e.g. do it only when we want to maintain the order.

That being said, we are heading towards adding more order to constraints evaluation (see http://beanvalidation.org/proposals/BVAL-248/) so it would make sense to keep the order of `ConstraintViolation`s - even if the annotation order was not guaranteed.

Thanks for your feedback!"	2016-12-17 07:51:03	0.0		0
3470	"Hi @gsmet,

thanks a lot for your feedback. At first I tried to just change `newHashSet`s which do effect the ordering - but I wasn't sure if I wasn't missing some (I am not 100% familiar with the source). I did some testing and found out I did miss some so I just went ahead and changed everything. I thought the impact is so minimal it maybe doesn't matter and maybe we can just completly switch to `LinkedHashSet`. Like make it a policy ""Use `LinkedHashSet` everywere, never use `HashSet`"" so we are sure order is kept everywhere. As in my initial comment I think/thougt about to also change the remaining `HashSet` in the tests to `LinkedHashSet`s as well to make this a consistent policy.

If you don't agree just switching to `LinkedHashSet`s maybe you want to take half an hour and go through my changes and comment which lines you think is ok to stay `HashSet`s. I could have a look at this after the weekend as well.

Also do you have any memory benchmarks on switching to `LinkedHashSet`s? What's the real life impact? Is it that bad?"	2016-12-17 13:26:17	0.0		1
3471	"I asked around a bit:
http://stackoverflow.com/q/41202793/810109

It's **8 bytes** more per entry. We can do the math now. That's 7,8 kB difference per 1000 constraint entries."	2016-12-17 22:19:52	0.0		1
3472	"Hi @mkurz, thanks a lot for your efforts! Keeping an order of the constraints is one of the issues being discussed for BV 2.0 (see the [BVAL-248 proposal](http://beanvalidation.org/proposals/BVAL-248/) for the discussions that happened so far). I think we should first converge on this at the spec level before putting an implementation in place. My concern is that people would rely on the behavior of such ad-hoc implementation, resulting in portability issues, not the least when moving to the BV 2.0 solution proper.

That being said, I'm not fully sure whether the conclusions in the SO answer you linked are correct. There's a lot of implicitness in there :) It'd be great to have confirmation from the JDK team that there indeed is a reliable order (apart from the one for repeatable annotations, which most of the SO discussion relates to) and that they are committing to retain that."	2016-12-19 09:41:49	0.0		1
3473	"Hi @mkurz, after some more consideration I'm going to not merge this change for now.

I think we should first look into a solution on the spec level. Your contribution to this would be very welcome, e.g. join us on the [mailing list](http://lists.jboss.org/pipermail/beanvalidation-dev/) and get a discussion started. Getting an authoritative answer from the JDK team whether there is a guaranteed order of retrieved annotations would be a great thing.

Thanks for your effort around this topic; also if we are not going for the suggested change right now, I think we'll come to a good solution in the BV 2.0 time frame."	2016-12-23 16:34:29	0.0		1
3474	"I will try to get in touch with the JDK team after the holidays. Is there an ETA for BV 2.0? Will it be finished in 2017?
Thank you."	2016-12-23 20:28:56	0.0		0
3475	"> I will try to get in touch with the JDK team after the holidays.

Cool, I'm quite curious about the outcome.

> Is there an ETA for BV 2.0? Will it be finished in 2017?

Yes, we are aiming for a release in 2017. The first preview will be out
very early in the year, and BV 2.0 Final is also planned to be part of Java
EE 8 (scheduled for 2017, too).
"	2016-12-23 20:48:03	0.0		0
3476	Pushed a new version with fixes and more comments.	2016-12-15 14:30:17	1.0	2016-12-17 20:58:16	0
3477	"> On the sharing of locations, it seems not to happen across metadata providers, right? Not a big problem, I'm still wondering though whether we only should switch to accessible members when creating the aggregated model. Then we could do it exactly once. Not sure though whether it's worth the effort. Maybe something for later (also to reduce conflicts with my concurrent work).

Yes, that might be something we want to do in the future but it's orthogonal to this patch."	2016-12-15 14:31:45	1.0	2016-12-17 20:58:16	0
3478	"+1. Maybe only add a comment on where it's from.
"	2016-12-16 09:55:44	1.0	2016-12-17 20:58:16	1
3479	"@gunnarmorling pushed a new version:
- only use Groovy 2.4.8-SNAPSHOT for JDK 9
- upgrade patch-gen-maven-plugin to 2.0.1.Alpha3 that Alexey released

I think it's ready to go now. I'll work on the backports once this is in."	2016-12-17 07:28:15	1.0	2016-12-17 20:58:16	0
3480	Looks reat now! Merged, thanks, @gsmet!	2016-12-17 20:58:31	1.0	2016-12-17 20:58:16	0
3481	Could you add a comment saying which is needed for what? So we can track it more easily and check whether we can remove any after a component or plug-in update.	2016-12-15 11:09:52	1.0	2016-12-17 20:58:16	1
3482	Same here.	2016-12-15 11:09:58	1.0	2016-12-17 20:58:16	0
3483	Is it an optimization to avoid creating a stream instance?	2016-12-15 11:10:50	1.0	2016-12-17 20:58:16	1
3484	Do we even need that any longer?	2016-12-15 11:12:36	1.0	2016-12-17 20:58:16	1
3485	Shouldn't it be a `TypeArgumentConstraintLocation`?	2016-12-15 11:14:00	1.0	2016-12-17 20:58:16	1
3486	No, it's the one which will be wrapped later. It's strictly equivalent to the existing code.	2016-12-15 11:38:49	1.0	2016-12-17 20:58:16	0
3487	Yes. It's the common case so I thought we might as well be as efficient as possible.	2016-12-15 14:06:20	1.0	2016-12-17 20:58:16	0
3488	Yeah right, removed :).	2016-12-15 14:06:31	1.0	2016-12-17 20:58:16	0
3489	Wow, that's a whole lot. They are all required by WildFly?	2016-12-16 09:46:50	1.0	2016-12-17 20:58:16	0
3490	I took them from the WF patch referenced by Tomaz. I think it's better to be in line with their expectations. I didn't play hide and seek for this one.	2016-12-16 09:49:19	1.0	2016-12-17 20:58:16	0
3491	"Hi @marko-bekhta, the entire area of type-level constraints is in flux for BV 2.0 and semantics may change. So I'd suggest to not put effort into this right now. E.g. the `@Valid` annotation will not be needed for `List<@Email String>` in BV 2.0 anymore.

What concerns casting to internal types, we should avoid it as it will render the AP un-usable in Eclipse if not done carefully. We'd have to check the environment and do the right ""hack"" for each. We do it in MapStruct (a side of project of mine), e.g. [here](https://github.com/mapstruct/mapstruct/blob/master/processor/src/main/java/org/mapstruct/ap/internal/util/workarounds/EclipseAsMemberOfWorkaround.java), but also there it's a measure of last resort only.

If you spot any shortcomings or bugs in the compiler API, it'd be better to report them to OpenJDK (if there is no bug for it yet)."	2016-12-15 08:44:15	0.0		1
3492	Hey @marko-bekhta, I think we should close this one for now as type constraints are just too much in flux right now and it'd be sort of a moving target to keep track of it with the AP. Let's revisit once the dust has settled in that area. Thanks for your efforts nevertheless!	2016-12-22 08:10:26	0.0		1
3493	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2016-12-12 19:14:36	0.0		0
3494	"Hi, out of curiosity, which test was giving you that error? Are you planning add the actual JaCoCo config, too? I think it'd make sense to do this together, as otherwise the change in `ConstraintDescriptorImpl` isn't really needed.

Could you also sign the JBoss contributor license agreement? It's a small web app living at http://cla.jboss.org/. We'll need that in order to merge your changes. Thanks!"	2016-12-15 09:04:43	0.0		0
3495	"@jmax01 Hi! Any news on this? We'll be interested in integrating a JaCoCo configuration if you're willing to contribute it.

As mentioned by Gunnar, we'll need a signed CLA to integrate your patches.

Thanks!"	2016-12-20 08:31:16	0.0		0
3496	"Sorry been on vacation.
I will knock it out tomorrow.

On Dec 20, 2016 2:31 AM, ""Guillaume Smet"" <notifications@github.com> wrote:

> @jmax01 <https://github.com/jmax01> Hi! Any news on this? We'll be
> interested in integrating a JaCoCo configuration if you're willing to
> contribute it.
>
> As mentioned by Gunnar, we'll need a signed CLA to integrate your patches.
>
> Thanks!
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/hibernate/hibernate-validator/pull/604#issuecomment-268184456>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAwLmsbKRcJpQ9lP6luYZR7C7MWGUW4Dks5rJ5JVgaJpZM4LK6jN>
> .
>
"	2016-12-21 10:31:24	0.0		0
3497	@jmax01 ok, cool!	2016-12-21 12:45:34	0.0		0
3498	Hey @jmax01, Happy New Year! Do you still plan to follow up on this one?	2017-01-03 09:04:37	0.0		0
3499	"Whoops slipped my mind over the holidays!

~~I do have a minimum example ready.~~
~~It appears it needs to be a class level annotation to trigger the behavior.~~

~~I will post it ASAP.~~
Appears I had a bug in my example. 
It might be a bit longer.
"	2017-01-03 14:23:43	0.0		0
3500	Update on test creation: Still trying to figure out under what exact conditions $jacocoInit is added to a class.	2017-01-10 18:56:35	0.0		0
3501	"Hi @jmax01 ,

Still struggling with your test case?"	2017-01-23 12:04:50	0.0		0
3502	"I am getting closer, things need to be ""just so"" for jacoco to add $jacocoInit to a class.


"	2017-01-25 17:24:39	0.0		0
3503	Hey @jmax01 any further progress with this one?	2017-03-01 10:57:06	0.0		0
3504	"I finally have a working test.

Since the error depends on classloading and initialization order of static fields reproduction is extremely challenging.

For example if the constraint existed in a package that contained the word 'hibernate' the error would not occur thus the package of the test is the issue id.

The test will only run if the jacoco agent is among the InputArguments of the runtime.

```java
package hv1184;

import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.*;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.management.ManagementFactory;

import javax.validation.Constraint;
import javax.validation.Payload;
import javax.validation.ReportAsSingleViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import javax.validation.constraints.Pattern;
import javax.validation.constraintvalidation.SupportedValidationTarget;
import javax.validation.constraintvalidation.ValidationTarget;

import org.hibernate.validator.parameternameprovider.ReflectionParameterNameProvider;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

/**
 * This test will fail with jacoco agent in eclipse
 */
@SuppressWarnings(""javadoc"")
public class Hv1184Test {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    static final ValidatorFactory VALIDATOR_FACTORY = Validation.byDefaultProvider()
        .configure()
        .parameterNameProvider(new ReflectionParameterNameProvider())
        .buildValidatorFactory();

    static final Validator VALIDATOR = VALIDATOR_FACTORY.getValidator();

    @Before
    public void beforeMethod() {

        org.junit.Assume.assumeTrue(startedWithJacoco());

    }

    /**
     * Will return true if there is a javaagent with the string jacoco in the startup arguments.
     *
     * @return true, if successful
     */
    boolean startedWithJacoco() {
        for (String inputArgument : ManagementFactory.getRuntimeMXBean()
            .getInputArguments()) {
            if (inputArgument.startsWith(""-javaagent"") && inputArgument.contains(""jacoco"")) {
                return true;
            }
        }
        return false;
    }

    @Test
    public void jacocoFail() {
        this.thrown.expect(javax.validation.ValidationException.class);
        this.thrown.expectMessage(""HV000083: The specified annotation defines no parameter '$jacocoInit'."");
        try {
            VALIDATOR.validate(new Hv1184Test.Bar(""999""));
        } catch (RuntimeException re) {
            throw re;
        }
    }

    public static class Bar {

        @hv1184.Hv1184Test.Hv1184Constraint
        private final String field;

        public Bar(String field) {
            super();
            this.field = field;
        }

    }

    /**
     * Hv1184Constraint constraint.
     * Tests did work when in org.hibernate package structure.
     */
    @Pattern(regexp = Hv1184Constraint.REGEX)
    @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
    @Retention(RetentionPolicy.RUNTIME)
    @Documented
    @Constraint(validatedBy = {})
    @SupportedValidationTarget(ValidationTarget.ANNOTATED_ELEMENT)
    @ReportAsSingleViolation
    public @interface Hv1184Constraint {

        /** The bar regular expression. */
        static String REGEX = ""[0-9]{3}"";

        /**
         * The bar regular expression pattern.
         * This is required to cause issues with jacococ
         */
        static java.util.regex.Pattern REGEX_PATTERN = java.util.regex.Pattern.compile(REGEX);

        /**
         * Message.
         *
         * @return the string
         *
         */
        String message() default ""A bar.field must be 3 digits, was '${validatedValue}'."";

        /**
         * Groups.
         *
         * @return the class[]
         */
        Class<?>[] groups() default {};

        /**
         * Payload.
         *
         * @return the class extends payload[]
         */
        Class<? extends Payload>[] payload() default {};

        /**
         * Defines several {@link Hv1184Constraint} annotations on the same element.
         *
         * @see Hv1184Constraint
         */
        @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
        @Retention(RUNTIME)
        @Documented
        @interface List {

            /**
             * Value.
             *
             * @return the BreaksJacoco[]
             */
            Hv1184Constraint[] value();
        }
    }
}

```"	2017-03-01 18:50:38	0.0		1
3505	FYI I signed the CLA	2017-03-01 18:57:51	0.0		1
3506	Closing for now. We'll follow up on this with https://hibernate.atlassian.net/browse/BVAL-551.	2016-12-14 15:46:13	0.0		0
3507	The commented out import looks weird.	2016-12-12 10:51:15	0.0		0
3508	@marko-bekhta added one more commit and merged. I also backported it to 5.4.	2016-12-12 10:20:50	0.0		0
3509	"@gsmet Great! :) 
Also please look at Jandex PR when you have time for it :) And in a meantime if there's something else for me to look into - just let me know, thanks!"	2016-12-12 10:26:36	0.0		0
3510	Rebased and applied to master, 5.4 and 5.3	2016-12-08 09:53:09	0.0		0
3511	Applied to master and 5.4.	2016-12-08 09:54:59	1.0	2016-12-08 09:54:10	0
3512	Applied to master and 5.4.	2016-12-08 09:56:12	1.0	2016-12-08 09:55:39	0
3513	It's not clear why javax.annotation is only needed on 5.4 but not master. My guess is that it's brought by the newer Karaf version on master.	2016-12-07 11:46:17	0.0		0
3514	@gsmet Can we close this one? It has been merged to 5.4.	2016-12-07 15:44:03	0.0		0
3515	Merged!	2016-12-07 15:44:31	0.0		0
3516	Jenkins, retest this please	2016-12-05 15:57:19	0.0		0
3517	Rebased and applied. Thanks, @gsmet!	2016-12-07 10:12:30	0.0		0
3518	Jenkins, retest this please	2016-12-05 15:57:02	0.0		0
3519	Replaced service provider with a clean-room implementation and merged. Thanks, @gsmet!	2016-12-07 10:03:27	0.0		0
3520	Force-pushed an update addressing your comments.	2016-12-05 13:12:40	1.0	2016-12-07 12:32:10	0
3521	Regarding backporting, I think HV-1165 and HV-1176 would be worth a 5.3.4?	2016-12-07 10:41:54	1.0	2016-12-07 12:32:10	0
3522	"I'd prefer `isCollection()` or `isCollectionType()`.

""element collection"" reminds too much of the construct with the same name in JPA (`@ElementCollection`). Here I'd refer to any collection-kind type by ""collection"" including maps, i.e. not `java.util.Collection`."	2016-12-05 11:05:15	1.0	2016-12-07 12:32:10	1
3523	getCollectionElementType().	2016-12-05 11:05:41	1.0	2016-12-07 12:32:10	0
3524	Maybe `TypeWithList2`? When looking at the usage above, I first thought the type itself would be a list type.	2016-12-05 11:07:35	1.0	2016-12-07 12:32:10	0
3525	"Ok, if we need to do all that, how about avoiding the conversion to list then alltogether and have explicite iterator types:

    private static class BooleanArrayIterator implements Iterator<Boolean> {

        private boolean[] values;
        private int current = 0;

        public BooleanArrayIterator(boolean[] values) {
            this.values = values;
        }

        @Override
        public boolean hasNext() {
            return current < values.length;
        }

        @Override
        public Boolean next() {
            boolean result = values[current];
            current++;
            return result;
        }
    }"	2016-12-05 11:32:17	1.0	2016-12-07 12:32:10	1
3526	We prefer to use `{@code ...}` over `<code>...</code>`. The reasoning is layed out in the contributor guide.	2016-12-07 10:20:42	1.0	2016-12-07 12:32:10	1
3527	"Do you think `@param` and `@return` add much value here?

I'm all for great documentation, but I think not stating the obvious also is a virtue as it reduces the time to read. Hence I often only put a method comment and omit the others. I'd only add them if there is something specific to say about them. That's what I'd put here:

    /**
     * Whether the given type represents a collection of elements or not (i.e. whether it's an
     * {@code Iterable}, {@code Map} or array type).
     */

I know it's nit-picking, but I thought I'd bring it up so we may converge (I've also changed my style over time, so you may see examples I wrote using the style I'm critizing here ;))."	2016-12-07 10:27:04	1.0	2016-12-07 12:32:10	1
3528	Wow, very thorough testing overall :) 👍 	2016-12-07 10:29:19	1.0	2016-12-07 12:32:10	0
3529	You could use `CollectionHelper#asSet()` instead.	2016-12-07 10:32:42	1.0	2016-12-07 12:32:10	1
3530	Weird. That's what I usually do. I think I copy pasted it from somewhere else. Will fix.	2016-12-07 10:45:21	1.0	2016-12-07 12:32:10	0
3531	"I used to agree with you. What made me change my mind is that it generates Javadoc warnings and I would like to have zero of them in the future as we might miss something important.

I don't have any issue to conform to the opposite if you think it's better."	2016-12-07 10:46:53	1.0	2016-12-07 12:32:10	0
3532	Yeah, it took some time but considering we already missed 2 bugs and a regression in this area, I thought it was in order.	2016-12-07 10:47:54	1.0	2016-12-07 12:32:10	0
3533	I'd prefer more useful docs over making a tool happy. I don't know whether it's possible, but maybe one could have different rules/policies for API/SPI (where I can get behind a 0 warnings policy) and internal parts (where that seems over the top).	2016-12-07 10:50:43	1.0	2016-12-07 12:32:10	1
3534	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2016-11-29 19:20:45	1.0	2016-11-30 07:49:22	0
3535	"ok to test
"	2016-11-29 19:37:34	1.0	2016-11-30 07:49:22	0
3536	Nice catch, @ZoXaL, thanks!	2016-11-30 07:49:37	1.0	2016-11-30 07:49:22	0
3537	Note that this requires https://github.com/beanvalidation/beanvalidation-api/pull/72 (allowing `@Valid` to be used on type parameters).	2016-11-30 09:24:23	1.0	2016-12-21 15:38:01	0
3538	"> I'm wondering if I should extract the unrelated fixes into proper JIRAs and get them committed? It would keep the patch smaller. WDYT?

Yes, that would be nice. The first few commits (in actual order within my branch, the shown order in the PR differs a bit) are un-related."	2016-12-01 11:21:29	1.0	2016-12-21 15:38:01	0
3539	@gunnarmorling it should be rebased now that I extracted the unrelated commits. I also fixed the typos in the test method names and it might have created a conflict here too.	2016-12-01 16:43:51	1.0	2016-12-21 15:38:01	0
3540	Jenkins, retest this please	2016-12-21 14:36:11	1.0	2016-12-21 15:38:01	0
3541	Merged, thanks!	2016-12-21 15:38:25	1.0	2016-12-21 15:38:01	0
3542	That's just a quick hack here; as said, it'd have to be more generic.	2016-11-29 15:17:46	1.0	2016-12-21 15:38:01	0
3543	"Currently it's not needed, but I'm wondering whether we should require `@ExtractedValue` on the actual type itself:

    class LegacyMapValueExtractor implements ValueExtractor<@ExtractedValue Map<?, ?>> { ... }

It seems nice for consistency purposes and makes this extractor's purpose more apparent.
"	2016-11-29 15:19:53	1.0	2016-12-21 15:38:01	1
3544	That thing is nightmare-ish. It works for the general case now, but eventually, the logic would have to be refined. Specifically, it works due to the order of registration of built-in extractors (more specific ones before more general ones). It didn't seem needed to implement it 100% for now.	2016-11-29 15:22:25	1.0	2016-12-21 15:38:01	0
3545	That test is interesting as basis for tinkering around with it.	2016-11-29 15:23:13	1.0	2016-12-21 15:38:01	0
3546	Wondering if `listItem` and `iterableItem` (or `listElement` and `iterableElement`) would be more descriptive? It's just a detail but I was surprised to see an index for `listValue` and then I understood it was only an item, not the list.	2016-12-01 10:30:36	1.0	2016-12-21 15:38:01	1
3547	Nothing related to your code but we have a typo here: s/Paramer/Parameter/	2016-12-01 10:31:43	1.0	2016-12-21 15:38:01	1
3548	Superfluous new line.	2016-12-01 10:37:24	1.0	2016-12-21 15:38:01	1
3549	Maybe make it unmodifiable?	2016-12-01 10:45:25	1.0	2016-12-21 15:38:01	1
3550	"Just to be sure, the order of the extractors is not important?

It should be made unmodifiable."	2016-12-01 10:51:29	1.0	2016-12-21 15:38:01	0
3551	"Yes, ""listItem"" would be better.

That said, the entire contract needs to change anyways, it needs to be more generic. That's one of the next things to look into. But essentially we don't know the ""nature"" of the association navigated into, so we cannot work with a fixed set of pre-defined methods. One idea is to the creation of `Node` instances to that contract, but we'll have to see."	2016-12-01 11:23:48	1.0	2016-12-21 15:38:01	1
3552	+1	2016-12-01 11:24:08	1.0	2016-12-21 15:38:01	0
3553	It currently is important, but eventually it shouldn't be. In the end I think we need to keep the most specific extractor per type parameter, e.g. if we have an extractor for `Iterable<@ExtractedValue E` and one for `List<@ExtractedValue E` and the validated value is an `ArrayList`, only keep the latter. But I didn't get there yet. Currently it will simply keep the first extractor found per type variable, hence the order of insertion in the constructor is relevant. It's a hack to make things work a bit.	2016-12-01 11:26:27	1.0	2016-12-21 15:38:01	0
3554	OK, additional comment (but probably useless if it goes away): as you inversed the order of key and value in `mapValue`, I think you should do the same for `listValue` and have the index as second parameter. It would be more consistent.	2016-12-01 12:11:05	1.0	2016-12-21 15:38:01	1
3555	That's what I thought and with this new implementation with an `HashMap`, you lose the order.	2016-12-01 12:13:05	1.0	2016-12-21 15:38:01	0
3556	It currently works because we only will take the first extractor found per type parameter (see the `containsKey()` call above). What's first per type parameter is determined by the insertion order in the constructor. It's all just a fugly work-around for the time being :)	2016-12-02 11:11:38	1.0	2016-12-21 15:38:01	0
3557	What's the legacyness in this call (not following).	2016-12-15 15:09:04	1.0	2016-12-21 15:38:01	0
3558	And how will the legacy be used over the non legacy extractor?	2016-12-15 15:10:00	1.0	2016-12-21 15:38:01	0
3559	I designed it by requiring the annotation as well but I don't think I have hard arguments for (or against) it.	2016-12-15 15:11:15	1.0	2016-12-21 15:38:01	0
3560	What is this one doing?	2016-12-15 15:13:59	1.0	2016-12-21 15:38:01	0
3561	How can you dare challenge @Sanne and not set the right size from the get to ! :D 	2016-12-15 15:20:40	1.0	2016-12-21 15:38:01	0
3562	So this model does not support the IntegerAndList kind of model, correct? Or is `value(...)` the one we would use?	2016-12-15 16:00:46	1.0	2016-12-21 15:38:01	0
3563	"I think I would have preferred something like

```
""addressByType[key('too short')].value""
```

At least for strings and any type that we don't know and will be `toString`ed.
We make exceptions for numbers, booleans, dates"	2016-12-15 16:19:23	1.0	2016-12-21 15:38:01	1
3564	Twice the same stuff?	2016-12-15 16:35:07	1.0	2016-12-21 15:38:01	0
3565	hum I think I got it.	2016-12-15 16:38:15	1.0	2016-12-21 15:38:01	0
3566	just a minor style issue: shouldn't we call it tmpCascadedValueExtractors to be consistent with the others? Or is it a naming we don't want to keep?	2016-12-20 08:35:34	1.0	2016-12-21 15:38:01	0
3567	s/used for to/used to/	2016-12-20 08:37:27	1.0	2016-12-21 15:38:01	0
3568	Missing new line.	2016-12-20 08:39:14	1.0	2016-12-21 15:38:01	1
3569	Btw I don't think initializing it with `null` is such a good idea, considering `ValueExtractors` constructor will throw a NPE.	2016-12-20 12:43:53	1.0	2016-12-21 15:38:01	1
3570	Any reason why you indented with 2 tabs?	2016-12-20 13:15:47	1.0	2016-12-21 15:38:01	0
3571	AFAICS it's not a case that can happen but I think I would prefer it to be initialized to an empty map in the other case.	2016-12-20 15:55:33	1.0	2016-12-21 15:38:01	1
3572	s/found/found for/ ?	2016-12-20 15:59:51	1.0	2016-12-21 15:38:01	0
3573	Maybe remove the `OrConstrained` here too?	2016-12-20 16:02:55	1.0	2016-12-21 15:38:01	1
3574	Same here.	2016-12-20 16:03:45	1.0	2016-12-21 15:38:01	0
3575	It's used when cascading into a non-collection association (e.g. `@Valid Address address`).	2016-12-20 19:02:35	1.0	2016-12-21 15:38:01	0
3576	No, just an oversight.	2016-12-20 19:03:11	1.0	2016-12-21 15:38:01	0
3577	Yes, that's just a left-over.	2016-12-20 19:03:28	1.0	2016-12-21 15:38:01	0
3578	Care to explain the second part of the condition? Thanks.	2016-12-21 09:09:43	1.0	2016-12-21 15:38:01	0
3579	Ok.	2016-12-21 10:14:57	1.0	2016-12-21 15:38:01	0
3580	It has become obsolete with my latest commit (going to push it asap). It was needed to prevent repeated validation of an object which was part of the graph (e.g. the validated bean) _and_ contained within an array visited during cascaded validation.	2016-12-21 10:16:17	1.0	2016-12-21 15:38:01	0
3581	It's only needed within this if block?	2016-12-21 10:28:27	1.0	2016-12-21 15:38:01	0
3582	Ok.	2016-12-21 10:29:51	1.0	2016-12-21 15:38:01	0
3583	Ok.	2016-12-21 10:29:54	1.0	2016-12-21 15:38:01	0
3584	Ok.	2016-12-21 10:31:52	1.0	2016-12-21 15:38:01	0
3585	You can remove the JFX_UNWRAPPER_CLASS constant at the top of the class.	2016-12-21 12:57:51	1.0	2016-12-21 15:38:01	1
3586	You know it's dangerous to let a parenthesis open!	2016-12-21 13:01:36	1.0	2016-12-21 15:38:01	1
3587	Same here.	2016-12-21 13:02:10	1.0	2016-12-21 15:38:01	0
3588	Sorry for the nitpicking but it's the only thing you let me: looks like you got the new line wrong in the javadoc comment.	2016-12-21 13:04:52	1.0	2016-12-21 15:38:01	1
3589	"If we plan to remove it someday, I think the best is to remove it now.

But if it does not cost us, I think we should probably keep it (or throw an error if we consider it's not a valid pattern anymore)"	2016-12-21 13:05:53	1.0	2016-12-21 15:38:01	0
3590	s/MultipleTypeParameterException/MultipleTypeParameter**s**Exception/	2016-12-21 13:10:14	1.0	2016-12-21 15:38:01	1
3591	This is a bugfix, isn't it? It doesn't look related to the patch.	2016-12-21 13:15:53	1.0	2016-12-21 15:38:01	0
3592	Yes, in that case you'd invoke `indexedValue()` for each list element and `value()` for the single int property.	2016-12-21 13:16:30	1.0	2016-12-21 15:38:01	0
3593	"The legacy one will be used for `@Valid Set<Order> orders`, and the new one will be used for `Set<@Valid Order> orders`. The difference being that the former would validate any property constraints on a custom `Set` implementation, whereas the latter would only validate the actual iterable elements.

Selection is happening via the type parameter to which extractors are bound: the non-legacy one is bound to `<T>` of Iterable, the legacy one is bound to an internal pseudo type parameter `ANNOTATED_ELEMENT`. Depending on where `@Valid` is spotted, one or the other will be used."	2016-12-21 13:36:49	1.0	2016-12-21 15:38:01	0
3594	:)	2016-12-21 13:36:58	1.0	2016-12-21 15:38:01	0
3595	Ok, I've added this to the follow-up issue HV-1190.	2016-12-21 13:37:23	1.0	2016-12-21 15:38:01	0
3596	Thanks, done.	2016-12-21 13:37:38	1.0	2016-12-21 15:38:01	0
3597	"Ha, but you didn't notice the typeo in ""instantation"" :)"	2016-12-21 13:38:32	1.0	2016-12-21 15:38:01	1
3598	I was talking about the `allBindings` map. I don't feel comfortable having it set to null in some cases while we are using it below without a null check. For the time being, I don't think we can be in the case where it is null and we need it in the for loop but I'd better be safe and not have this pattern.	2016-12-21 13:38:56	1.0	2016-12-21 15:38:01	1
3599	Yes, it's a bug fix; it was uncovered in the course of implementing the new mechanism. I wouldn't bother backporting unless a user reports it.	2016-12-21 13:40:09	1.0	2016-12-21 15:38:01	0
3600	you're missing an //end::include[]	2016-12-21 13:40:37	1.0	2016-12-21 15:38:01	1
3601	Ok.	2016-12-21 13:41:27	1.0	2016-12-21 15:38:01	0
3602	Ok.	2016-12-21 13:42:29	1.0	2016-12-21 15:38:01	0
3603	Added it back.	2016-12-21 13:55:54	1.0	2016-12-21 15:38:01	0
3604	Yes, I'd fix it when it actually can happen. I'm expecting this code to be changed quite a fair bit anyways.	2016-12-21 13:57:24	1.0	2016-12-21 15:38:01	0
3605	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")"	2016-11-28 22:00:00	0.0		0
3606	Jenkins, add to whitelist	2016-11-28 22:23:50	0.0		0
3607	OK, perfect! Will squash and merge. Thanks!	2016-11-29 08:40:26	0.0		0
3608	"@bayerls one last thing: could you sign the CLA for the Hibernate Validator project at https://cla.jboss.org/index.seam? It's a one time thing for all your contributions to the project. 

Thanks!"	2016-11-29 09:00:28	0.0		0
3609	@bayerls can you ping me when it's done and give me your username? Thanks!	2016-11-29 19:39:12	0.0		0
3610	"@gsmet I signed and verified with the username bayerls some hours ago. Currently, the status is still ""Awaiting approval by project lead"". Glad I could help!"	2016-11-29 21:55:54	0.0		0
3611	Thanks, @bayerls! The CLA is approved an I've merged your change into master (6.0) and 5.4.	2016-11-30 08:10:43	0.0		0
3612	Also added one more commit for some related clean-up.	2016-11-30 08:11:29	0.0		0
3613	"Looks very good, thanks!

Minor comment: could you remove the `this.` occurrences in front of `dynamicPayload` in the existing code of this method and amend your commit? We should be consistent and I see no reason to keep `this.`.

Additional bonus point for being in line with our checkstyle rules!"	2016-11-28 22:35:25	0.0		1
3614	Pushed a new commit to remove the module files as they are not useful anymore.	2016-11-27 20:37:40	1.0	2016-12-01 07:36:14	0
3615	"Well, they are not useful anymore because we use the ones from the WildFly distribution and we update them.

So we don't have to maintain our own."	2016-11-29 10:57:43	1.0	2016-12-01 07:36:14	0
3616	"Where is this update happening?

It does for the TCK runner, but eventually we should be using the patch
file there, too.
"	2016-11-29 10:59:12	1.0	2016-12-01 07:36:14	0
3617	"I think just the major should be fine (10, 11), and that one would
implicitly target the latest minor of that major.
"	2016-11-29 11:01:03	1.0	2016-12-01 07:36:14	0
3618	"Are you sure it does?

AFAICS, the `setupModules.groovy` script from the TCK runner also updates the files in place."	2016-11-29 11:04:00	1.0	2016-12-01 07:36:14	0
3619	"Just had another look :) You are right that there is a script now that updates the existing descriptors in place (in _modules/target/wildfly-patched_) when creating the patch file. So the copies are not needed any more.

For the TCK runner we have a script (essentially the same one as above) which updates the descriptors of the WF unzipped for testing. Instead, it should use the patch created as described above and apply it in the same way the integration tests are doing it. I should have done it right when moving to the patching mechanism, but then I had forgotten about it."	2016-11-29 11:11:27	1.0	2016-12-01 07:36:14	1
3620	Created https://hibernate.atlassian.net/browse/HV-1167 to track the use of the module file.	2016-11-29 11:23:16	1.0	2016-12-01 07:36:14	0
3621	@gunnarmorling pushed an update addressing both HV-1167 and HV-1168	2016-11-30 16:31:41	1.0	2016-12-01 07:36:14	1
3622	Merged; thanks, @gsmet. Added one more commit for removing the now obsolete Groovy patching script from the TCK runner module.	2016-12-01 07:37:03	1.0	2016-12-01 07:36:14	0
3623	"Cool.

Also make the WF version more flexible?"	2016-11-29 10:44:23	1.0	2016-12-01 07:36:14	0
3624	"Yup, good catch. What do you think we should use for the version? 10, 10.1, 10.1.0.Final? Not sure how we can consider the module files as stable.

We will probably have to provide several patches for each version of WF we want to allow the upgrade for. Typically, when 11 will just be out, we will probably want to support both 10.1 and 11.

WDYT?"	2016-11-29 11:00:06	1.0	2016-12-01 07:36:14	1
3625	Merged and backported.	2016-11-30 07:47:12	1.0	2016-11-30 07:46:15	0
3626	Rebased and merged. Thanks, @gsmet!	2016-11-30 07:48:26	1.0	2016-11-30 07:47:51	0
3627	@gunnarmorling force pushed an update fixing the javax.el commit. It's the only one that has this issue.	2016-11-29 18:04:11	1.0	2016-11-30 07:37:45	0
3628	Pushed all remaining commits. Thanks a lot, @gsmet!	2016-11-30 07:38:08	1.0	2016-11-30 07:37:45	0
3629	Very nice to see this, @marko-bekhta! Could you maybe describe a bit the current status? I.e. what's working, what is not, any larger road blocks you see?	2016-11-30 08:14:38	0.0		0
3630	"Hi @gunnarmorling ! Well so here's how I see this:
1. create a `JandexMetaDataProvider` (some code is already present) which will receive jandex index and go through classes/interfaces and look for constraints.
2. to create `BeanConfiguration`s there will be a set of builders (similar to what is present for `XmlMetaDataProvider`). Currently I've started to work on `ConstrainedFieldJandexBuilder`. It seems to me that these builders will have a few methods in common so most likely there will be one abstract and a few implementations for Type, Field, Method, Constructor
3. with having a way to create `BeanConfiguration` from step 2, create a map with all configurations. 

So right now I'm looking into how to create `ConstraintElement`s from Jandex index. There are a few things left that I'm thinking about at this point. They are marked as TODOs in the code. Here they are:

- is there a way to find out if an annotation is a constraint or not based on `AnnotationInstance` (Jandex class)
- how to convert `AnnotationInstance` to `Annotation` which is used to init `ConstraintDescriptorImpl` (for this one I think I'll try to do something similar to what is present in `MetaConstraintBuilder#buildMetaConstraint` with `AnnotationDescriptor` and `AnnotationFactory.create`

Also I've created a very simple `ConstrainedFieldJandexBuilderTest` that creates a jandex index form a bean to help write/debug all this jandex related code. 

So basically there's not much done for now :( . And I just wanted to have a place to discuss these kind of things. So I that I don't write a lot of code that will be wrong :)  Also one more question - is it ok to use Java 8 here or should we stay with 7 and ignore Streams and lambdas ?"	2016-11-30 10:37:49	0.0		0
3631	@marko-bekhta just a quick answer on the Java 8 side: we won't backport this so feel free to use streams and lambdas and whatever fancy Java 8 features you want!	2016-11-30 16:42:12	0.0		0
3632	"> is there a way to find out if an annotation is a constraint or not based on AnnotationInstance (Jandex class)

You'd have to mimic what's done by `ConstraintHelper#isConstraintAnnotation()`. In the first iteration it should be enough to check for presence of the `Constraint` (meta) annotation. I've [just asked](http://lists.jboss.org/pipermail/wildfly-dev/2016-December/005561.html) on wildfly-dev how to obtain meta-annotations, as it isn't clear from the API to me.

> how to convert AnnotationInstance to Annotation

We'd have to create an annotation proxy ourselve as we do it for XML-based configuration, too. See `org.hibernate.validator.internal.xml.MetaConstraintBuilder.buildMetaConstraint()`. It's not clear to me yet how to get the actual annotation type, but the answer may be provided with my question above on wildfly-dev."	2016-12-01 08:48:52	0.0		0
3633	@marko-bekhta, I think you are on the right track overall. Let's see what comes out of my question on wildfly-dev.	2016-12-01 08:54:40	0.0		0
3634	@gunnarmorling  thanks for the info! I've just pushed a new commit and there's Annotation creation in `ConstrainedFieldJandexBuilder#instanceToAnnotation` method. 	2016-12-01 08:57:37	0.0		0
3635	"hi @gunnarmorling  @gsmet,

I'm looking at the next line:
```
if ( annotationProcessingOptions.areParameterConstraintsIgnoredFor( executable, i ) ) {
   metadata.add(....);
}
```

and I'm wondering if it should be with `!` or not ? it's in `AnnotationMetaDataProvider:455`

----------
nevermind :) "	2016-12-04 11:52:39	0.0		1
3636	"Hi @gunnarmorling and @gsmet 
here's an update on this task - I've finished with the builders for constraints and with the Jandex provider (in general). There are some things left to be done like get the index from somewhere and a few things from TODOs. I'll list them below:

- how the index should be received by provider ?
- change class search (as @gunnarmorling  mentioned `JandexHelper.getClassForName`). I've made a `JandexHelper` and it's methods nonstatic so the inside logic of `getClassForName`can be changed without changes to the method itself. I plan to look into this change next. 
- there seems to be a problem with Jandex index and parameter annotations. Please see test `ConstrainedFieldJandexBuilderTest.validAnnotationIsMissing`. It looks that Jandex is ignoring the `@Valid` annotation on a parameter. As a result - right now jandex metadata provider is throwing an  for cases when there's a type argument constraint for method parameter.
- there are a couple of methods like `isIndexable`, `isMap`, `isIterable` which are reusing `ReflectionHelper` methods, and I cannot see a way to mimic the logic using Jandex classes
- I haven't found any possibility to determine if annotation is a constraint or not based on Jandex classes, and I can see that for now there's no answer on wildfly-dev about it.
- in `GroupSequenceJandexHelper` there are two methods copied from `AnnotationMetaDataProvider` to obtain GroupSequenceProvider. Based on what is done in them - not sure if it'll be possible to do the same with jandex classes.
- don't see a way to filter out synthetic methods. 
- methods and constructors are returned in one collection and they don't have any differences (at least I didn't find any obvious one :) ). Constructor names are in such form `<init>` so I've added a logic to check if method name match this form then it's a constructor and we should look for a constructor rather that for a method in such case, when looking for a class member (reflection class)
- maybe `parameterNameProvider` can be improved to consume not only Method/Constructor ? But as` Executable executable` is already available at the point when `parameterNameProvider` is used - not sure if such change would be of any use.

That seems to summarize it all :) "	2016-12-05 18:44:35	0.0		0
3637	"Hey @marko-bekhta, we still need to follow up in more depth, but one quick answer to the last one:

> maybe parameterNameProvider can be improved to consume not only Method/Constructor ? 

We cannot really change that one as it's part of the BV API, but check out `ExecutableParameterNameProvider`. It does what you want."	2016-12-16 09:42:18	0.0		0
3638	HI @gunnarmorling ! Thanks for the answer. I've used the `ExecutableParameterNameProvider` in the code already - for example you can see at this [line](https://github.com/hibernate/hibernate-validator/pull/585/files#diff-023c77d1e50bc32478c8febc35517603R175). It was just a thought to maybe save some execution time, but as at that point `Executable` is already available it probably will not do any change....	2016-12-16 09:51:59	0.0		0
3639	@marko-bekhta FYI, I'm taking a look at it. I'll probably push some fixes.	2016-12-21 14:46:23	0.0		0
3640	@gsmet Great! thanks for the update. 	2016-12-21 15:09:05	0.0		0
3641	"@marko-bekhta 

> there seems to be a problem with Jandex index and parameter annotations. Please see test ConstrainedFieldJandexBuilderTest.validAnnotationIsMissing. It looks that Jandex is ignoring the @Valid annotation on a parameter. As a result - right now jandex metadata provider is throwing an for cases when there's a type argument constraint for method parameter.

AFAICS, the test is working. Did I miss something?"	2016-12-21 16:18:17	0.0		0
3642	"@gsmet 
for me it gives next:
```
java.lang.AssertionError: 
Expected size:<3> but was:<2> in:
<[""javax.validation.constraints.NotNull"", ""javax.validation.constraints.Size""]>

at org.hibernate.validator.test.internal.metadata.jandex.ConstrainedFieldJandexBuilderTest.validAnnotationIsMissing(ConstrainedFieldJandexBuilderTest.java:94)
```
So it seems that `@Valid` is ignored ..."	2016-12-21 17:10:58	0.0		1
3643	@marko-bekhta it's weird. I don't have this error at all. It's working correctly here.	2016-12-23 16:35:08	0.0		0
3644	"> how the index should be received by provider?

This is something that is still undecided AFAIK. We need to see how we could get the index from WildFly.

I'm also wondering how we could test this Jandex stuff with all our tests (simply replacing the `AnnotationMetaDataProvider` to see how it behaves). It's really not easy considering you have to add the indexed classes one at a time.

If we can find a way to access the Jandex index of WildFly, we could run the TCK in container mode (-Dincontainer) to exercise the Jandex implementation.

> change class search (as @gunnarmorling mentioned JandexHelper.getClassForName). I've made a JandexHelper and it's methods nonstatic so the inside logic of getClassForNamecan be changed without changes to the method itself. I plan to look into this change next.

I haven't taken a look at this. I think it can be left alone for now.

> there seems to be a problem with Jandex index and parameter annotations. Please see test ConstrainedFieldJandexBuilderTest.validAnnotationIsMissing. It looks that Jandex is ignoring the @Valid annotation on a parameter. As a result - right now jandex metadata provider is throwing an for cases when there's a type argument constraint for method parameter.

As mentioned, I don't have this issue at all. The test is passing here (I'm running the test in Eclipse if it matters).

> there are a couple of methods like isIndexable, isMap, isIterable which are reusing ReflectionHelper methods, and I cannot see a way to mimic the logic using Jandex classes

Yeah, they are less used now due to changes Gunnar made recently but we still need them.

I think I'll rebase your patch on top of our recent work and see how it goes from there.

> I haven't found any possibility to determine if annotation is a constraint or not based on Jandex classes, and I can see that for now there's no answer on wildfly-dev about it.

I think I did make it work.

> in GroupSequenceJandexHelper there are two methods copied from AnnotationMetaDataProvider to obtain GroupSequenceProvider. Based on what is done in them - not sure if it'll be possible to do the same with jandex classes.

Let's keep them for now, we'll see if we need a parent class or something once we have a working experiment.

> don't see a way to filter out synthetic methods.

I did it the hard way. We'll need to open a Jandex issue so that they expose a method for it.

> methods and constructors are returned in one collection and they don't have any differences (at least I didn't find any obvious one :) ). Constructor names are in such form <init> so I've added a logic to check if method name match this form then it's a constructor and we should look for a constructor rather that for a method in such case, when looking for a class member (reflection class)

Yeah, I think it's as good as we can do for now. I moved it to its own method to be more clear. We will need to open a Jandex issue.

> maybe parameterNameProvider can be improved to consume not only Method/Constructor ? But asExecutable executable is already available at the point when parameterNameProvider is used - not sure if such change would be of any use.

Haven't taken a look to this yet.

Next comment will be about the changes I made."	2016-12-23 16:45:08	0.0		0
3645	"> it's weird. I don't have this error at all. It's working correctly here.

@gsmet It definitely is... I've just tried to run the test with maven and it fails:

```
Results :

Failed tests: 
  ConstrainedFieldJandexBuilderTest.testGetConstrainedFields:68 » Validation HV0...
  ConstrainedFieldJandexBuilderTest.validAnnotationIsMissing:94 
Expected size:<3> but was:<2> in:
<[""javax.validation.constraints.NotNull"", ""javax.validation.constraints.Size""]>

Tests run: 2, Failures: 2, Errors: 0, Skipped: 0

```

as well as if I run the test through the IDEA ... and it's the behavior that I have on two different computers ..."	2016-12-23 16:59:28	0.0		1
3646	"My current tree is here: https://github.com/gsmet/hibernate-validator/tree/pr/585 .

I fixed a couple of bugs, the provider is now working (I haven't inspected the result yet, just that there's some BeanConfiguration returned).

Note that one important change is that it does not scan all the classes of the index but just the constrained beans. I'm still unsure my implementation is sufficient, especially regarding class hierarchy.

Apart from that, I mainly cleaned up/reorganized the code. Here are a few general comments that might help you:
* always make your methods/fields private by default and make them protected only if needed
* put the methods only required by a subclass in the subclass itself, not in the parent
* no need for commenting everything: we document the API and what might be unclear but, for a private method, if you understand what it does just by reading its name and parameters, there's no need for javadoc

We are on Holiday shutdown starting this evening but I think I'll try to revisit a few things next week. I'd like to rebase this on the current master as I'm not sure it's going to be an easy task. And I still need to understand a few things.

Finally I would really like to find a way to build a usable index."	2016-12-23 17:10:09	0.0		1
3647	"Hi @gsmet, great improvements to the implementation! I'm not sure either about filtering constrained beans, I suppose - we'll be more sure when we have a real index at our hands, right ? And good catch with those stream concatenations :). 

The only thing that I'd probably change is a return type of `JandexMetaDataProvider#findConstrainedBeans` from `Set` to `Stream`. But it's just my personal preference - I try to return `Streams` instead of collections wherever possible to omit returning modifiable collections (to prevent change of state of some bean enclosing that collection) and to prevent calls to `stream()` right after receiving a collection. I don't know if that would be more efficient than what we have right now but I'd probably would done something like this:

```
private static Stream<ClassInfo> findConstrainedBeans(IndexView indexView, List<DotName> constraintAnnotations) {
		// TODO HV-644: not sure this is totally accurate. I'm especially wondering how it will behave with subclasses and such.
		return constraintAnnotations.stream()
				.flatMap( constraintAnnotation -> indexView.getAnnotations( constraintAnnotation ).stream() )
				.map( ai -> ai.target() )
				.map( JandexMetaDataProvider::annotationInstanceToClassInfo )
				.distinct();
	}
```

Also thanks for those points on visibility modifiers and documentation! 

I've tried to run the tests on one more machine - and it's still the same for me - the tests are failing with the same error. (I tried to run the code from your branch as well). 

Thanks again and Happy New Year to you! :)"	2017-01-02 10:22:48	0.0		1
3648	Closing this one. I'll create another one superseding this one to continue the discussion.	2017-01-06 17:37:31	0.0		0
3649	"@marko-bekhta personally I'm all for using streams when you expect to work on the result. But if not, I must admit my preference is to use good old collection types.

It's only an implementation detail anyway. If we get to just having that to discuss, I think we would have come a great way ;)."	2017-01-06 17:39:08	0.0		0
3650	Using this one without passing a classloader may give us trouble due to classes not being visible to the implicitly used loader. You can check out `org.hibernate.validator.internal.util.privilegedactions.LoadClass` and its usage as a starting point.	2016-12-01 08:52:41	0.0		1
3651	"hi @gsmet !

All looks great ! You definitely are much better at naming methods and variables :) and a great improvement to MethodInheritanceTree as well.

Also I can see that it seems like I still need to do some changes to my IDE formatting as there still are some differences :)

As for the delays - it's all fine and I completely understand it. I myself got stuck with my work and wasn't able to spent much time on HV related items :)

Have a nice day,
Marko"	2016-11-22 19:11:43	0.0		0
3652	@marko-bekhta thanks for the review. I pushed a commit fixing your remarks. Is it better now? (I'll probably squash it before merging)	2016-11-23 13:15:27	0.0		0
3653	@gsmet yes ! looks great !	2016-11-23 13:57:19	0.0		0
3654	@marko-bekhta ... and merged! Thanks for your tenacity on this subject, we finally got this in!	2016-11-30 12:57:38	0.0		0
3655	@gsmet Great ! :)	2016-11-30 13:11:57	0.0		0
3656	it looks that `collectOverriddenMethodsInInterfaces` can be moved out of if else as it is called in both cases ? 	2016-11-22 18:47:14	0.0		0
3657	"maybe get enclosing element before the loop ? or this operation is not very expensive ? Something like:
```
TypeElement methodEnclosingType = getEnclosingTypeElement( currentMethod );
for (...){
....
if ( elementUtils.overrides( currentMethod, (ExecutableElement) element, methodEnclosingType ) ) {
```"	2016-11-22 18:53:29	0.0		1
3658	just out of interest - did you changed to Set to be more consistent with the existing checks or is there any other reasons ? I was thinking that if we are not using any Set specific behavior a more general collection interface can be used (that's just an explanation why I used Collection in the first place) 	2016-11-22 19:04:23	0.0		0
3659	"Yes, it's just for the sake of consistency. I must admit I wouldn't have changed it if I didn't have other changes to do.

To be honest, if I had to do it from the ground up, I think I would have used ArrayList everywhere to have the result as predictable as possible. I don't think Sets are of much value here."	2016-11-23 12:50:26	0.0		0
3660	There's a slight difference in the calls: one is using `overriddenMethod` and the other `overridingMethod`. I thought it was clearer this way than to declare another variable. Your question makes me think I might be wrong. WDYT?	2016-11-23 12:52:29	0.0		1
3661	Right! I'll fix it, thanks for noticing.	2016-11-23 13:00:52	0.0		0
3662	OK, I fixed it, it seems to be clearer now.	2016-11-23 13:01:13	0.0		0
3663	ahhaa ! when I was looking at it these two lines looked the same to me :)	2016-11-23 13:55:34	0.0		0
3664	The error will be shown in the context of the method. Do we need to repeat the entire signature? Shouldn't the compiler itself point it out?	2016-11-23 14:14:42	0.0		1
3665	Is there a strong need to check for this? Technically, it doesn't represent any constraint strengthening.	2016-11-23 14:15:36	0.0		1
3666	No biggie, but we can use simple names in JavaDocs (and import them), too. Reads a tad nicer.	2016-11-23 14:42:32	0.0		1
3667	"Well, it does not respect the inheritance rules we defined. The rule is that you cannot define constraints in the method hierarchy if there are already one method defining constraints in the method hierarchy. That's what we implemented here.

And it's definitely easier to throw an error for this than trying to determine what is or what is not a constraint strengthening."	2016-11-23 16:44:54	0.0		1
3668	"At runtime, we'd allow that one. See `OverridingMethodMustNotAlterParameterConstraints` and how it's calling `!method.isEquallyParameterConstrained()`. That's primarily due to the behavior of Weld proxy classes though which would copy the annotations from proxied classes verbatim to the method definition on the proxy.

I'd prefer behavior of the AP to closely mimic the runtime engine, but if it's too cumbersome to do, we can leave as you've proposed it. It's in the sense of the spec for sure."	2016-11-30 09:11:46	0.0		1
3669	Merged! Thanks!	2016-11-22 10:42:42	1.0	2016-11-22 10:42:31	0
3670	Superseded by #583. Thanks, @gsmet, we are almost there :)	2016-11-22 08:28:40	0.0		0
3671	@gsmet looks good, added some minor final comments.	2016-11-21 15:57:40	1.0	2016-11-22 10:48:21	0
3672	"I think that it more was a requirement to use EL at all, it wouldn't have
worked with the default interpolator. I remember that we added that test
now :) (see HV-1039).
"	2016-11-21 16:05:57	1.0	2016-11-22 10:48:21	0
3673	I'll work on trying to put together a test for that.	2016-11-21 16:22:39	1.0	2016-11-22 10:48:21	0
3674	"@gunnarmorling I tried to write a test using our `IgnoringPackageClassLoader` but I didn't succeed. I think the only way to get it working would be to isolate the test in its own JVM.

So for now, I think I would let it like that. It exercises the fact that we can create a specific ExpressionFactory but we can't really test that it is used."	2016-11-21 22:02:09	1.0	2016-11-22 10:48:21	1
3675	@gsmet can you update it with my change from #583? I think then we are good to go. Thanks a ton for fighting through this craziness!	2016-11-22 08:31:50	1.0	2016-11-22 10:48:21	1
3676	Couldn't we even simplify that entire test by simply relying on the default interpolator?	2016-11-21 15:51:51	1.0	2016-11-22 10:48:21	1
3677	I supposed the purpose of this test was to check that passing an external `ExpressionFactory` would work.	2016-11-21 15:53:44	1.0	2016-11-22 10:48:21	0
3678	I'd name it `SetContextClassLoader`.	2016-11-21 15:53:54	1.0	2016-11-22 10:48:21	1
3679	We named these methods `action` in the case where there are not several ones with different semantics.	2016-11-21 15:54:24	1.0	2016-11-22 10:48:21	0
3680	Where is that coming from?	2016-11-21 15:56:21	1.0	2016-11-22 10:48:21	0
3681	Maybe add a comment on what that's needed for?	2016-11-21 15:57:16	1.0	2016-11-22 10:48:21	1
3682	It comes from the fact that we are now using setting the TCCL thus the validation.xml is loaded.	2016-11-21 15:58:48	1.0	2016-11-22 10:48:21	0
3683	Yup, I just made it a symmetry of GetClassLoader. I'll change it.	2016-11-21 15:59:21	1.0	2016-11-22 10:48:21	0
3684	Done.	2016-11-21 16:11:53	1.0	2016-11-22 10:48:21	0
3685	Done.	2016-11-21 16:12:01	1.0	2016-11-22 10:48:21	0
3686	Done.	2016-11-21 16:12:04	1.0	2016-11-22 10:48:21	0
3687	Yes, makes sense. We added this constructor for specifically working around the TCCL usage as I remember now again :) It's not needed really anymore with our changes here, but it makes sense to leave the test in place.	2016-11-22 08:30:48	1.0	2016-11-22 10:48:21	0
3688	Superseded by https://github.com/hibernate/hibernate-validator/pull/581	2016-11-21 15:41:44	0.0		0
3689	"See also https://github.com/hibernate/hibernate-validator/pull/580 and https://hibernate.atlassian.net/browse/HV-1155
"	2016-11-20 19:03:10	0.0		0
3690	Superseded by https://github.com/hibernate/hibernate-validator/pull/581	2016-11-21 15:41:54	0.0		0
3691	"@gsmet , but this dependency on javax.el implementation:
```
<dependency>
    <groupId>org.glassfish.web</groupId>
    <artifactId>javax.el</artifactId>
    <version>2.2.4</version>
</dependency>
```
licensed under 2 OSI approved licenses :
> COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL - Version 1.1)
> GNU General Public License (GPL - Version 2, June 1991) with the Classpath Exception

That means that users of **Hibernate-validator** library should distribute their sourcode. 
How we can use new **Hibernate-validator** versions with our closed-source application?"	2017-01-20 15:34:46	1.0	2016-11-10 15:05:54	0
3692	"Hi @skovtunenko ,

First we didn't really change anything except we are now failing early instead of failing at runtime.

Second, the CDDL allows you to distribute the javax.el dependency in a proprietary software.

Finally, if you really don't need it, you can use another MessageInterpolator:
```
Validator validator = Validation.byDefaultProvider()
				.configure()
				.messageInterpolator( new ParameterMessageInterpolator() )
				.buildValidatorFactory()
				.getValidator();
```

All in all, I don't think it's an issue."	2017-01-20 16:24:12	1.0	2016-11-10 15:05:54	1
3693	"> That means that users of Hibernate-validator library should distribute their sourcode.

No, that's not true. That's exactly what GPL *with the Classpath Exception* prevents. Check out the very last box on https://uel.java.net/license.html."	2017-01-20 16:47:45	1.0	2016-11-10 15:05:54	0
3694	"Hi @gsmet , @gunnarmorling ! 
Thanks for your quick response, will read carefully.
My initial assumptions based on this **CDDL** statement:
> 3.1. Availability of Source Code.
> Any Covered Software that You distribute or otherwise make available in Executable form must also 
> be made available in Source Code form and that Source Code form must be distributed only under 
> the terms of this License."	2017-01-31 10:20:39	1.0	2016-11-10 15:05:54	0
3695	"AFAIU, this clause only affects the files under CDDL themselves, but not any other ""work"" using or integrating the CDDL-licensed files.

But either way, UEL is dual licensed, CDDL *and* GPL with the Classpath Exception which allows you to create an executable under your own terms.

Note that there also is [JUEL](http://juel.sourceforge.net/) which is licensed under the Apache License 2.0. You have plenty of options here :)"	2017-01-31 10:54:15	1.0	2016-11-10 15:05:54	0
3696	"I added a few comments here and there, mostly minor things.

I must admit that I would like an explanation for this commit https://github.com/hibernate/hibernate-validator/pull/577/commits/4f98f83d06a3f0f4100951be61bbdf16c88e8794 which I did not understand fully.
"	2016-11-15 12:57:06	0.0		1
3697	"> I must admit that I would like an explanation for this commit 4f98f83 which I did not understand fully.

Previously, the path would already have contained the node for the property of interest. Now we'll add that node when validating the constraint (via that new single validateMetaConstraint() method). Hence I'm removing it from the path so we don't end up with having it twice.

One could argue that the new approach is a bit less efficient (as we don't pre-select the relevant constraints), but I preferred that for the sake of less redundant code. We can look into optimizing things later on if needed.

Eventually we also should visit the constraints in order of their location. I.e. first all constraints on Foo#bar, then all on Foo#baz etc. Same for method parameters. This will allow us to do less appendNode()/removeNode() calls, i.e. not do it per constraint but per location. It also should help with that BVAL issue about ordered validation of constraints. I think we are getting to a better base for that.
"	2016-11-17 09:58:20	0.0		1
3698	@gsmet, rebased, amended a few commit messages and force pushed.	2016-11-22 10:00:15	0.0		0
3699	Rebased and merged! Nice progress on the clean-up!	2016-11-22 10:59:25	0.0		0
3700	"We should update the javadoc here too.
"	2016-11-14 16:35:15	0.0		1
3701	"You changed the impl from a `Set` to a `List`. This is what you intended to do?
"	2016-11-14 16:36:02	0.0		0
3702	"Do you have an idea on how to secure this?
"	2016-11-15 11:20:55	0.0		0
3703	"Shouldn't we do this sooner? I'm a bit worried we transform them along the way.
"	2016-11-15 11:25:27	0.0		0
3704	"Not sure I understand the rationale of this commit. Maybe a more explicit commit message and a comment around the two `propertyPath.removeLeafNode()` would help understand what is going on?
"	2016-11-15 11:41:40	0.0		1
3705	"Nice, I like this change.
"	2016-11-15 11:44:21	0.0		1
3706	"Typo in the commit message of this particular commit f3a0154406b015961d50b0e6a6ae03a9857b7784: s/implmentation/implementation/
"	2016-11-15 11:45:09	0.0		1
3707	"We should change the name of the method as it's not collecting constraints anymore.
"	2016-11-15 11:50:48	0.0		1
3708	"Same here.
"	2016-11-15 11:50:57	0.0		0
3709	"I like https://github.com/hibernate/hibernate-validator/pull/577/commits/4fe2bfb21d7c40054371c99446cf096bd7aedfe2 but it's a bit unfortunate we have to duplicate this logic several times.
"	2016-11-15 12:54:32	0.0		0
3710	"Withdrawn, you fixed it in a follow-up commit.
"	2016-11-15 12:55:32	0.0		0
3711	"Withdrawn, you fixed it in a follow-up commit.
"	2016-11-15 12:55:37	0.0		0
3712	"I don't think it makes any effective difference at this point. I kinda liked that it keeps the order of the parameters when iterating through the cascaded ones.
"	2016-11-17 09:47:43	0.0		1
3713	"We'd have to invoke `SecurityManager#checkPermission()`.
"	2016-11-17 09:49:00	0.0		0
3714	"I'm not super happy with that special handling of type parameter constraints overall. But I think it's good for now.
"	2016-11-17 09:49:28	0.0		0
3715	"Previously, the path would already have contained the node for the property of interest. Now we'll add that node when validating the constraint (via that new single `validateMetaConstraint()` method). Hence I'm removing it from the path so we don't end up with having it twice.

One could argue that the new approach is a bit less efficient (as we don't pre-select the relevant constraints), but I preferred that for the sake of less redundant code. We can look into optimizing things later on if needed.

Eventually we also should visit the constraints in order of their location. I.e. first all constraints on Foo#bar, then all on Foo#baz etc. Same for method parameters. This will allow us to do less appendNode()/removeNode() calls, i.e. not do it per constraint but per location. It also should help with that BVAL issue about ordered validation of constraints. I think we are getting to a better base for that.
"	2016-11-17 09:55:28	0.0		0
3716	"Yes, I think using List would be beneficial in a lot of places. When I looked at the constraints validation ordering, having Sets everywhere annoyed me. I think it would be nice to have the result of a validation as deterministic as possible.
"	2016-11-17 11:41:18	0.0		0
3717	"OK, we should open a JIRA for that. I don't think I would like us to release something with this.
"	2016-11-17 11:42:50	0.0		1
3718	"My question was more: is this special casing specific to this place or should we move it a bit sooner to get PropertyMetaData return these transformed type parameter constraints?
"	2016-11-17 11:44:59	0.0		0
3719	"OK. Could you add a comment at the end of the `propertyPath.removeLeafNode();` lines so that we remember why we remove this last node?

It wasn't obvious when I read the code so I'm pretty sure it won't be in 2 years when I'll read that code again!
"	2016-11-17 11:49:11	0.0		1
3720	I've filed [HV-1157](https://hibernate.atlassian.net/browse/HV-1157).	2016-11-21 14:48:43	0.0		0
3721	Ideally, we'd get rid of the special handling of type parameter constraints altogether. But my preference is to leave this as is for now and look into it again when implementing the container stuff proper from BV 2.0. The delegate business in `TypeParameterLocation` is kind of a hack, but I think it's good enough for now and allows us to move on.	2016-11-22 09:56:44	0.0		0
3722	"Pushed a rebase.

@gunnarmorling Interesting issues to discuss when you'll get there:
 * https://hibernate.atlassian.net/browse/HV-898
 * https://hibernate.atlassian.net/browse/HV-820"	2016-11-30 17:18:05	1.0	2016-12-23 16:17:15	0
3723	I think I addressed all the comments I found valid. Feel free to insist on the ones I discarded if you feel strongly about it.	2016-12-23 13:08:58	1.0	2016-12-23 16:17:15	0
3724	Merged; thanks, @gsmet!	2016-12-23 16:17:34	1.0	2016-12-23 16:17:15	0
3725	"Why has that one changed? I reckon just for the sake of using the new API (It's good, just trying to figure the reasoning).
"	2016-11-10 16:56:38	1.0	2016-12-23 16:17:15	0
3726	"I think we should leave it in for now (circling back to our discussion about compatability). But deprecate it and remove the documentation.
"	2016-11-10 17:00:34	1.0	2016-12-23 16:17:15	1
3727	"Same here.
"	2016-11-10 17:08:02	1.0	2016-12-23 16:17:15	0
3728	"Ah, I see we marked it as experimental. Then it should be alright to remove.
"	2016-11-10 17:11:44	1.0	2016-12-23 16:17:15	0
3729	"Are we removing the Joda support?
"	2016-11-10 17:12:12	1.0	2016-12-23 16:17:15	0
3730	"I know it's done inconsistently, but I'd prefer to have this named `LOG` (that's how I do it in new code) as it's a constant.
"	2016-11-10 17:13:08	1.0	2016-12-23 16:17:15	0
3731	"I thought it was a good idea for our examples to use the new java.time API. Nothing more.
"	2016-11-10 17:39:28	1.0	2016-12-23 16:17:15	0
3732	"Yes, we discussed about it a few weeks ago on HipChat and we decided to remove it as:
- it was experimental
- having both ClockProvider and TimeProvider would be confusing
"	2016-11-10 17:40:55	1.0	2016-12-23 16:17:15	0
3733	"This is also my preference for the very same reason but I was trying to be consistent with existing code. Happy to change it to LOG from now on.
"	2016-11-10 17:41:45	1.0	2016-12-23 16:17:15	1
3734	"No, we are still supporting it. I moved the class and changed the implementation so git wasn't able to detect it's a move.
"	2016-11-10 17:44:48	1.0	2016-12-23 16:17:15	0
3735	"Pushed a commit to fix it. Probably to squash with the one introducing the classes when merging.
"	2016-11-10 17:50:22	1.0	2016-12-23 16:17:15	0
3736	"I kinda regret we started doing this for sets and maps.

Unfortunately, initializing them with the number of intended elements will cause a resize. The reason being we don't take the load factor into account which is 0.75 by default. So a resize will happen after inserting the 3rd or 4th element. So in order to let it hold 5 elements, we'd have to initialize it with 8 (8 * 0.75 > 5). But it's all such micro optimization, that I think we could go for the default constructor equally well."	2016-12-23 09:04:19	1.0	2016-12-23 16:17:15	1
3737	Technically, wouldn't it be `Class<? extends ClockProvider>`?	2016-12-23 09:05:03	1.0	2016-12-23 16:17:15	0
3738	stable environment=reliable manner	2016-12-23 09:06:11	1.0	2016-12-23 16:17:15	0
3739	"Might make more sense to actually show usage of a fixed date: `ZonedDateTime.of(""2016-..."")`."	2016-12-23 09:08:08	1.0	2016-12-23 16:17:15	1
3740	+1	2016-12-23 09:09:25	1.0	2016-12-23 16:17:15	0
3741	A small comment would be nice.	2016-12-23 09:13:56	1.0	2016-12-23 16:17:15	1
3742	Is there any specific reason for wrapping this exception here?	2016-12-23 09:14:45	1.0	2016-12-23 16:17:15	1
3743	Re-use is desirable, but I'd prefer specific implementations. One if pushed from the execution path to solely validator resolution time.	2016-12-23 09:16:37	1.0	2016-12-23 16:17:15	0
3744	Usually we just make the `INSTANCE` member public. No strong preference, just noticed the slight derivation from the usual pattern.	2016-12-23 09:19:20	1.0	2016-12-23 16:17:15	0
3745	Ah, I guess that stems from the original class.	2016-12-23 09:20:50	1.0	2016-12-23 16:17:15	0
3746	Should it be just DEBUG?	2016-12-23 09:21:27	1.0	2016-12-23 16:17:15	0
3747	The new toShortName() facility could be used here.	2016-12-23 09:21:59	1.0	2016-12-23 16:17:15	0
3748	"ParameterNameProvider=ClockProvider

Or, better yet, let's just move to `getUnableToInstantiateException()`, I don't think there's much value in having the dedicated versions really."	2016-12-23 09:25:07	1.0	2016-12-23 16:17:15	1
3749	Puh, I was wondering whether the test may begin to fail in 2100, but it looks safe :)	2016-12-23 09:26:34	1.0	2016-12-23 16:17:15	0
3750	"You lost your right to make this sort of comment when you voted against my PR to adapt CollectionHelper to avoid the resize :) - see https://github.com/hibernate/hibernate-ogm/pull/683.

I really think we should do it once and for all and be done with it."	2016-12-23 09:38:43	1.0	2016-12-23 16:17:15	0
3751	Ah, didn't remember that we had discussed it before. Personally I'd just use the default constructor in the very most cases or pass a size big enough for the few cases where it seems useful.	2016-12-23 09:54:17	1.0	2016-12-23 16:17:15	0
3752	It's in line with the others. See https://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/java/org/hibernate/validator/internal/util/logging/Log.java#L80 for instance.	2016-12-23 09:55:57	1.0	2016-12-23 16:17:15	0
3753	The usage of getUnableToInstantiateException and the other similar ones is in fact very specific. I changed it to getUnableToInstantiateClockProviderClassException.	2016-12-23 10:01:48	1.0	2016-12-23 16:17:15	0
3754	"Yeah, the issue is that we often do CollectionHelper.newCollection( otherCollection.size() ). And I won't expect people to do the math by themselves.

I'll cherry-pick the OGM commit to fix this once and for all."	2016-12-23 10:06:01	1.0	2016-12-23 16:17:15	0
3755	Yes, as I don't know what the implementor will do, I thought it was better to catch and wrap the exception.	2016-12-23 10:06:45	1.0	2016-12-23 16:17:15	0
3756	Fixed.	2016-12-23 10:12:03	1.0	2016-12-23 16:17:15	0
3757	Yup, coming from `TimeProvider`. Fixed anyway.	2016-12-23 10:12:28	1.0	2016-12-23 16:17:15	0
3758	Used an abstract method instead.	2016-12-23 11:03:32	1.0	2016-12-23 16:17:15	0
3759	Fixed.	2016-12-23 12:52:01	1.0	2016-12-23 16:17:15	0
3760	Done.	2016-12-23 12:52:14	1.0	2016-12-23 16:17:15	0
3761	Done.	2016-12-23 13:03:33	1.0	2016-12-23 16:17:15	0
3762	Not really. We have a String not a Type or a Class. We could implement one to work on String but I don't think it's really worth it in this case.	2016-12-23 13:07:11	1.0	2016-12-23 16:17:15	1
3763	"Pushed another commit which makes the _documentation_ module pass, too. Only remaining issue is in _distribution_ related to JavaDocs.
"	2016-11-07 17:12:31	1.0	2016-11-08 12:39:29	0
3764	"> - amending Surefire arg line with required module exports

I don't see this part in the commit? Did I miss something?

And did you test locally (on a multi-core machine) that removing the 4 threads for the engine tests doesn't slow down the build?
"	2016-11-07 19:59:03	1.0	2016-11-08 12:39:29	0
3765	"> I don't see this part in the commit? Did I miss something?

I happens by virtue of the `surefire.argLine` and `surefire.argLine.extension` properties in the parent POM. There is a ""jdk-9"" profile which does it once for all sub-modules.

> And did you test locally (on a multi-core machine) that removing the 4 threads for the engine tests doesn't slow down the build?

Ah, seems I went a bit too far by trying to centralize the Surefire config. I've added this back.

I've also pushed another commit which makes the distribution build work. JavaDoc can be generated now on 9 without a build failure, but it looks broken. I reckon the style sheet was changed in Java 9 again. I'll leave that for another time (going to open an issue).
"	2016-11-08 10:12:51	1.0	2016-11-08 12:39:29	0
3766	"Merged, thanks!
"	2016-11-08 12:40:11	1.0	2016-11-08 12:39:29	0
3767	"Couldn't you put the exclusion directly on the wildfly-patching artifact?
"	2016-11-07 16:29:49	1.0	2016-11-08 12:39:29	1
3768	"Unfortunately not, the plug-in depends on _wildfly-cli_ directly, too. So the jconsole stull would still be pulled in when excluding it via the _patching_ path.
"	2016-11-07 16:34:26	1.0	2016-11-08 12:39:29	0
3769	"Merged and added one more commit for HV-1144 (remove/update links for included JavaDocs). Thanks, @gsmet.
"	2016-11-07 11:39:18	1.0	2016-11-07 11:37:24	0
3770	"OK, looks good overall apart from my minor comments/questions.

I saw that you fixed the behavior of the type arguments constraints regarding the collection element node? Maybe an additional test would be in order.
"	2016-11-02 15:53:19	1.0	2016-11-08 21:11:58	1
3771	"> I saw that you fixed the behavior of the type arguments constraints regarding the collection element node? 

There should be no change in behavior. Can you elaborate a bit on where you think it has changed?
"	2016-11-04 09:25:02	1.0	2016-11-08 21:11:58	0
3772	"Maybe it's not triggered but I'm thinking about:
https://github.com/hibernate/hibernate-validator/pull/573/files#diff-af7dc46566c31e14b067152de18040d7R785
and
https://github.com/hibernate/hibernate-validator/pull/573/files#diff-e5cd06a63133ca330a97be728cde7d93R74

Before that, we added the collection element node unconditionally. But maybe you can't have a propertyName set if you're dealing with a type argument constraint?
"	2016-11-04 10:26:11	1.0	2016-11-08 21:11:58	1
3773	"> But maybe you can't have a propertyName set if you're dealing with a type argument constraint?

You can have a property name with a type argument constraint (e.g. `private Optional<@Min(1) Integer> myPositiveInteger`). But the code for method validation does its own path appending atm., it doesn't talk to `ConstraintLocation#appendNode()` (as it eventually should). Hence I think everything fits together as of this PR, but for sure it's in an intermediate state I plan to fix in follow-up PRs.
"	2016-11-08 14:44:03	1.0	2016-11-08 21:11:58	0
3774	"@gsmet Pushed one more commit to address your last concern about the proliferation of EPNP instances. It happens only in `ValidatorFactoryImpl` and `ValidatorContextImpl` now (the latter in case a specific PNP is given for a single `Validator`).
"	2016-11-08 18:42:13	1.0	2016-11-08 21:11:58	0
3775	"Cool, merged!
"	2016-11-08 21:12:32	1.0	2016-11-08 21:11:58	0
3776	"Shouldn't we wrap it once and for all in `ValidatorFactoryImpl` instead of doing it this way? I'm especially worried about the fact that we might inadvertently wrap it several times.
"	2016-11-02 14:07:15	1.0	2016-11-08 21:11:58	1
3777	"Any reason why you create a temporary variable?
"	2016-11-02 14:50:00	1.0	2016-11-08 21:11:58	0
3778	"Didn't you introduce a new helper method just for that?
"	2016-11-02 15:39:06	1.0	2016-11-08 21:11:58	0
3779	"Maybe a JIRA would be in order? Or it's part of the container work?
"	2016-11-02 15:39:44	1.0	2016-11-08 21:11:58	0
3780	"It's part of my upcoming work.
"	2016-11-04 09:23:57	1.0	2016-11-08 21:11:58	0
3781	"Good catch, that's a left-over.
"	2016-11-04 09:24:05	1.0	2016-11-08 21:11:58	0
3782	"So, we just have this last question pending.
"	2016-11-08 15:39:53	1.0	2016-11-08 21:11:58	0
3783	"Interesting (and impressive use of Maven hackery). I'm curious though to know how widespread the usage of this patch feature is.

If it is widespread, I agree with you it would be the way to go. And apart from the fact we need to download the tool from GitHub, it's not that bad.
"	2016-10-31 15:13:41	0.0		0
3784	"Jenkins, retest this please
"	2016-10-31 15:14:42	0.0		0
3785	"@gsmet Removed the layer property and a few others.

With that, I consider the actual work done. The only thing missing is a doc update which I'll send tomorrow.
"	2016-11-03 16:00:16	0.0		0
3786	"It may be we need to change the jobs on Jenkins to include settings-example.xml, I'm not 100% sure whether the plug-in is propagated to Maven Central, too.
"	2016-11-03 16:01:12	0.0		0
3787	"@gsmet pushed a commit for the docs.
"	2016-11-04 09:10:27	0.0		0
3788	"Merged, thanks!
"	2016-11-04 10:46:45	0.0		0
3789	"Looks like we can remove `layer.name`. I don't think it's used anymore.
"	2016-10-31 15:06:22	0.0		1
3790	"@gunnarmorling this (very minor) comment still stands. Other than that, it looks good!
"	2016-11-03 15:30:59	0.0		1
3791	"That's the only thing which remains to annoy me: we need to have a separate start-applypatch-stop cycle which should not be needed as _patch_ can run offline, but that's not supported by the Maven plug-in atm. In case we are bored to death, we could write our own version of the `PatchHandler` which only works offline (see `createPatchOperationTarget()`, we only should do the logic in the `else` branch which runs offline).
"	2016-11-03 16:03:54	0.0		1
3792	"Jenkins, retest this please
"	2016-10-28 12:26:38	0.0		0
3793	"+1 for this approach. It is really nice to be able to test HV 6 and BV 2 throughout the whole WildFly stack.

Do you plan to fix the TODO before merging? Or should I create a JIRA issue and merge it?
"	2016-10-28 14:40:17	0.0		0
3794	"I changed the module name as discussed and merged. Thanks!
"	2016-10-31 13:23:28	0.0		0
3795	"This was a bad practice anyways. Custom modules should go directly under _modules_.
"	2016-10-28 17:22:05	0.0		0
3796	"Thanks for the review ! I'll apply the changes and when you respond to the comment on cycles I'll apply the changes based on it and push it all.
"	2016-11-07 14:45:25	0.0		0
3797	"Hi @gunnarmorling I've read all the comments once more with a fresh head :) and found all the answers :)
I've added a warning for a case when interfaces used in group sequences are extending other interfaces. Added a check if the interface was not already used in a given group sequence already. And also done some clean up. It'll be great if you have a look when you have time. Thanks !

Also I was thinking more about these cycles and here's a case when I think we should produce an error, please let me know if I'm right :)

```
public static class Case7 {
        public interface Group1 {
        }

        public interface Group2 {
        }

        @GroupSequence(value = { Group1.class, Group4.class })
        public interface Group3 {
        }

        @GroupSequence(value = Group5.class)
        public interface Group4 {
        }

        @GroupSequence(value = { Group2.class, Group3.class })
        public interface Group5 {
        }
    }
```

In this case it'll be Group3 -> Group4 -> Group5 -> Group3. Is this a valid case ?

If so I'll need to update the code to go through such chains and find all interfaces. Sorry for all these questions but as I said I'm not very familiar with `GroupSequence`s :)
"	2016-11-09 12:25:21	0.0		0
3798	"> In this case it'll be Group3 -> Group4 -> Group5 -> Group3. Is this a valid case ?

it seems not valid indeed. You could try to valid this (using the actual HV engine), it should raise an error."	2016-11-30 08:16:34	0.0		1
3799	@gunnarmorling great, thanks for the answer! I'll do what you suggested with engine and make the changes to `GroupSequenceCheck` to handle such cases as well 	2016-11-30 10:40:10	0.0		0
3800	@gunnarmorling I checked that such case is failing when using an engine, and I've modified code to look for such cases as well. Let me know if anything else should be done for this task.	2016-12-01 14:39:31	0.0		0
3801	"@marko-bekhta so I squashed and merged it with some additional cleanup (see https://github.com/hibernate/hibernate-validator/commit/a4d77518222c6822c2ba27b969e990d8dbaac5ed)

The main issue was that the following is perfectly valid:
```java
	/**
	 * Case 3: Hierarchy of groups
	 */
	public static class Case3 {
		public interface Group1 {
		}

		public interface Group2 extends Group1 {
		}

		public interface Group3 {
		}

		@GroupSequence(value = { Group2.class, Group3.class })
		public interface GroupSequence1 {
		}
	}
```

You can define hierarchy of groups. It's even one of the first examples in the specification: http://beanvalidation.org/latest-draft/spec/#constraintdeclarationvalidationprocess-groupsequence-groupinheritance .

What is not recommended is having a group sequence inheriting another interface so I changed it.

This misunderstanding had another consequence: you do not check that group inheritance creates cyclic definitions. I think you had something along those lines but checking group **sequences** inheritance once in your code and it was removed due to one of Gunnar's comment.

I did not have time to fix it so I would appreciate if you could do it.

I added a test at the bottom of InvalidGroupSequenceParameters which should throw an error (see the XXX).

We will release 5.4.0.Beta1 without this. It would be nice if you could fix it for CR1!

I created a specific issue to track it: https://hibernate.atlassian.net/browse/HV-1180 .

Thanks again!"	2016-12-07 14:26:59	0.0		1
3802	@gsmet Great ! I'll look into HV-1180. 	2016-12-07 14:47:45	0.0		0
3803	"I would have expected it to be attached to an `AnnotationType.GROUP_SEQUENCE_ANNOTATION`.
"	2016-10-31 13:44:39	0.0		0
3804	"Let's call it `GroupSequenceCheck`.
"	2016-10-31 13:45:00	0.0		1
3805	"Do we agree that you don't detect cyclic definitions defined with `@GroupSequence`s on interfaces defining a group sequence? AFAICS, you only check the hierarchy, not the `@GroupSequence`s.

I'm thinking about something like:

``` java
@GroupSequence(Group2.class)
public interface Group1 {
}

@GroupSequence(Group1.class)
public interface Group2 {
}
```

Not sure we can do anything about it but this is probably the most common case of cyclic definition (it can of course be far more complicated to detect than this very simple example).
"	2016-10-31 13:57:25	0.0		1
3806	"There's no such value present so I'll add it in the next commit.
"	2016-10-31 16:41:26	0.0		0
3807	"Ok, I've renamed it as you suggested. I've just named it the same way as other parameter checks were named as I thought that this is sort of parameter check as well
"	2016-10-31 16:42:23	0.0		0
3808	"Correct ! :) I'm not very familiar with the group sequences, and apparently I didn't understood everything about them after reading the doc :) 

I've provided a solution for such problem in the next commit
"	2016-10-31 16:44:36	0.0		0
3809	"The part ""(for default group sequence re-definition)"" could be omitted, it should be clear from the context of the error message.
"	2016-11-07 09:01:00	0.0		1
3810	"Are `Group2`, `Group3` and `YetOtherBean` actually needed for this case? All tests pass if I comment them out, so they could go away it seems?
"	2016-11-07 09:05:51	0.0		1
3811	"What's the difference between this and `SomeOtherBean`? Seems one should be enough for the test?
"	2016-11-07 09:06:42	0.0		0
3812	"I'd say one test for primitive is enough?
"	2016-11-07 09:07:17	0.0		1
3813	"I'm a bit confused by this test :) Couldn't a simple cycle test look like this:

```
@GroupSequence(value = {Group1.class, Group2.class, Group1.class})
public interface MySequence {}
```

I wouldn't consider the case where a group sequence inherits from another interface. It's discouraged by the spec, so if anything, we could raise a warning when detecting it.
"	2016-11-07 09:12:13	0.0		1
3814	"Maybe this one could be slimmed down a bit?
"	2016-11-07 09:14:11	0.0		0
3815	"Remove the ""not""?
"	2016-11-07 09:15:54	0.0		1
3816	"This could be structured a bit nicer with a separate method:

```
AnnotationMirror groupSequence = getGroupSequence( groupElement );
annotationValue = annotationApiHelper.getAnnotationArrayValue( annotationMirror, ""value"" );
```
"	2016-11-07 09:19:06	0.0		0
3817	"Wouldn't you also have to check whether a given element has been specified in the sequence already?
"	2016-11-07 09:20:39	0.0		1
3818	"For `SomeBean` it's a list of valid/invalid values  and for SomeOtherBean it's only one invalid value. It's to ""make sure"" that check goes through all values provided and to cover different combinations of valid invalid values. But in the end one can say that `SomeBean` can be enough :) 
"	2016-11-07 14:01:10	0.0		0
3819	"Same as before :) you are right it's just more to cover different values. Maybe the implementation is just looking for `boolean` :) But again based on the fact that we know that it's determining if the provided class is a primitive or not we can leave just one :)
"	2016-11-07 14:04:10	0.0		1
3820	"As I've responded in this comment - https://github.com/hibernate/hibernate-validator/pull/569#pullrequestreview-6439723 :) my initial understanding of cycles was a bit off :) 

Should I drop the code that checks the hierarchies and instead add another check to existing one to produce warning when provided interface is extending some other ?
"	2016-11-07 14:09:28	0.0		0
3821	"This method is receiving an annotated element (`typeElement`) with one of its values from `GroupSequence` annotation, so `groupElement` is already a part of one GroupSequence and we are checking if there's a GroupSequence annotation on it and if so then there shouldn't be an annotated element (`typeElement`) present within its values ... 

Or did you mean the case like this:

```
        @GroupSequence({Group2.class, Group2.class, Group3.class,Group2.class})
        public interface Group1 {
        }
```

where a group (Group2) is present multiple times ?
"	2016-11-07 15:11:38	0.0		1
3822	"Looks good apart from my minor comments. Not a big fan of wrapping the ParameterNameProvider though...
"	2016-10-25 10:49:37	0.0		1
3823	"> Not a big fan of wrapping the ParameterNameProvider though...

I'm open for all suggestions :) It helps to avoid ""if instanceof then"" switches at several places.
"	2016-10-25 11:35:46	0.0		0
3824	"@gsmet Pushed two more commits for addressing your remarks and for benefiting a bit more from Java8 goodness.
"	2016-10-25 12:04:49	0.0		0
3825	"Looks good. Waiting for CI to validate it and I will merge it.
"	2016-10-25 12:23:08	0.0		0
3826	"Rebased and merged! Thanks!
"	2016-10-25 12:35:02	0.0		0
3827	"I've pushed one more commit related to the removal of the previous grouping functionality right to master: https://github.com/hibernate/hibernate-validator/commit/576ceb8891f6bb4121741bd7011e90e5f264454e. After being to the fresh air I've realized that the previous approach was les than ideal ;)
"	2016-10-25 21:00:15	0.0		0
3828	"Any reason why you remove this test?
"	2016-10-25 10:31:12	0.0		1
3829	"Maybe add a final attribute for this?
"	2016-10-25 10:36:00	0.0		1
3830	"Surprised you're not using some Java 8 magic?
"	2016-10-25 10:37:20	0.0		0
3831	"It would have been nice to change the `ParameterNameProvider` contract but I suppose we cannot do it taking into account the discussion we had yesterday.
"	2016-10-25 10:40:15	0.0		1
3832	"I know it will probably be harder to test but I would have expected a `getExecutableAsString(Executable executable)` method.
"	2016-10-25 10:42:41	0.0		1
3833	"Yes, it wasn't needed really. The only invocation path not originating from tests already makes sure that the given parameter values match the length of the validated executable (see `ValidatorImpl#validateParametersForGroup()`). Hence this check never triggered anyways.
"	2016-10-25 10:45:17	0.0		0
3834	"+1, will do.
"	2016-10-25 10:45:28	0.0		0
3835	"It is just copied/moved code, but I'll look into using the new joiner facility.
"	2016-10-25 10:46:03	0.0		0
3836	"Yes, would be nice. But `ParameterNameProvider` even is a BV-defined contract. So we cannot alter it.
"	2016-10-25 10:46:35	0.0		0
3837	"Withdrawn, looks like we more often have them in the name, parameterTypes form.
"	2016-10-25 10:46:40	0.0		0
3838	"There are cases were we don't have an actual `Executable`, e.g. when configuring a method using the fluent API. Then this one is used to report a non-existing method. But see `ExecutableFormatter` which is doing what you say for cases where we have an executable (and makes invocations of `Log` a bit simpler).
"	2016-10-25 10:48:34	0.0		0
3839	"OK.
"	2016-10-25 10:51:14	0.0		0
3840	"Well, we are writing the new BV 2 specification :).
"	2016-10-25 10:51:53	0.0		0
3841	"Yes, but do you have a good idea how it could look like without breaking existing implementations? We cannot remove the existing methods from PNP (as that'd break existing implementations) so we only could add `getParameterNames(Executable e)`, but I think that'd only obfuscate the contract more than it helps.
"	2016-10-25 11:34:20	0.0		1
3842	"Fixed a typo I missed when reviewing and merged! Thanks!
"	2016-10-25 12:33:02	0.0		0
3843	"We prefer using the short version for links now: `http://your.link/[your text]`. We fix them when we see them so you might as well clean up the line above about NIP. Thanks! (No need to fix all the links in the file, we do it when we update specific parts)
"	2016-10-24 10:59:12	0.0		1
3844	"Good catch!
"	2016-10-24 10:59:22	0.0		0
3845	"Thanks for the info ! Pushed a fix for those links. Also I've checked the link on that TituloEleitoral and it seems to be broken... should we replace it to point somewhere else ? maybe wiki page ? 
"	2016-10-24 11:53:57	0.0		0
3846	"The best (and only) interesting piece of information I found is this one: http://www.exceldoseujeito.com.br/2008/12/19/validar-cpf-cnpj-e-titulo-de-eleitor-parte-ii/ . Btw, I only see one commit for the typo, did you push the other one or were you waiting for my answer?
"	2016-10-24 13:23:27	0.0		0
3847	"You can ignore my question :). I misread your commit message.
"	2016-10-24 13:24:23	0.0		1
3848	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")
"	2016-10-21 07:05:37	0.0		0
3849	"ok to test.
"	2016-10-21 07:19:52	0.0		0
3850	"@mulderbaba Good catch! It's weird nobody got the problem before.

Apart from my comments inline:
- could you fix the formatting issues? Our code style requires space padding for method arguments (run mvn checkstyle:check to verify everything is OK - we have IDE code styles here https://github.com/hibernate/hibernate-ide-codestyles/ if you're interested in contributing on a regular basis)
- could you prefix your commit message with the JIRA number?
- could you add the `@TestForIssue` annotation with the JIRA number to your test?
- and last but not least, could you sign the CLA for the Hibernate Validator project here: https://cla.jboss.org/ and get back to me with the user name you used? It's a very simple form to fill once you have a JBoss account.

Thanks for your contribution!
"	2016-10-21 08:52:17	0.0		1
3851	"@gsmet all set I guess
username for CLA is: mulderbaba
Thanks.
"	2016-10-21 09:39:09	0.0		0
3852	"@gsmet good call, done.
"	2016-10-21 11:50:39	0.0		0
3853	"@mulderbaba OK, perfect. I'm waiting for the CLA approval and I'll merge it. It will be included in 5.3.1 we should release very soon.
"	2016-10-21 12:20:51	0.0		1
3854	"great @gsmet. do you think it'd be possible to cherry-pick this into 5.2 branch also? I need this to be used by hk2 project in order get Payara working properly. looks like hk2 guys tend to stay on 5.2.4 atm.
"	2016-10-21 12:24:16	0.0		0
3855	"Hi @mulderbaba, thanks for your fix! We don't have plans for another 5.2 release at this point, but we can push it to 5.3. We've planned the release of 5.3.1 early next week, and there shouldn't be any issue with upgrading to that from 5.2.4.
"	2016-10-21 12:58:25	0.0		0
3856	"Merged in master and backported to the 5.3 branch. Thanks!
"	2016-10-21 13:28:21	0.0		0
3857	"Good catch!
"	2016-10-21 08:45:47	0.0		0
3858	"Could you get the default locale before changing it and restore it after the test? It would be cleaner to let the state consistent after the test.
"	2016-10-21 08:46:45	0.0		1
3859	"After giving it some thoughts, could you change it to use Locale.ROOT? I think it emphasizes better what we want to do.

After that, we're good to go!

Thanks!
"	2016-10-21 11:37:07	0.0		1
3860	"Thanks, @gsmet!
"	2016-10-21 07:21:30	0.0		0
3861	"See my comments inline.

I have mixed feeling about this. It does not really simplify the logic and we lose an information (which is admittedly useless at the time). No strong opinion though so if you prefer it like that, let's go for it.
"	2016-10-20 11:11:37	0.0		1
3862	"Reworked the commit to address your remark and merged. Thanks for reviewing, @gsmet!
"	2016-10-21 07:25:55	0.0		0
3863	"Couldn't this statement be outside of the loop?
"	2016-10-20 11:01:07	0.0		1
3864	"Same here.
"	2016-10-20 11:03:44	0.0		0
3865	"@marko-bekhta isn't the language code for Ukrainian `uk`?
"	2016-10-20 12:31:58	1.0	2016-10-20 15:50:27	1
3866	"@gsmet correct !

```
Language - uk
Country - UA
```

And I was thinking why the property file was showing as out of resource bundle ...
Thanks !
"	2016-10-20 13:21:48	1.0	2016-10-20 15:50:27	0
3867	"Thanks for fixing the issue! Merged!
"	2016-10-20 15:50:39	1.0	2016-10-20 15:50:27	0
3868	"Rebased and applied to master + 5.3. Thanks, @gsmet!
"	2016-10-20 07:22:35	0.0		0
3869	"> I'm a bit concerned about ValidatorImpl growing more and more, it's becoming very tough to grok.

Agreed. It's becoming unmanageable.
"	2016-10-19 08:40:59	0.0		0
3870	"I fixed your comments, rebased and force pushed.
"	2016-10-19 08:46:29	0.0		0
3871	"Rebased and applied to master. I tried to cherry-pick to 5.3 but it doesn't cleanly apply. Could you do it as you've done the original change?
"	2016-10-19 12:37:25	0.0		0
3872	"@gunnarmorling of course, will do.
"	2016-10-19 12:51:09	0.0		0
3873	"Seems these assertions are never reached due to the (expected) exception before?
"	2016-10-19 07:08:32	0.0		1
3874	"Same here.
"	2016-10-19 07:09:45	0.0		0
3875	"Merged; thanks!
"	2016-10-19 06:52:44	1.0	2016-10-19 06:37:06	0
3876	"It should be `containsOnly()`; `containsExactly()` expects the specific order again ;) I'll change it.
"	2016-10-19 06:30:46	1.0	2016-10-19 06:37:06	1
3877	"Rebased and applied. Thanks, @gsmet!
"	2016-10-19 07:00:28	0.0		0
3878	"> I've also rewritten the test so it doesn't need reflection in the actual test routine.

Nice!
"	2016-10-17 12:11:33	1.0	2016-10-18 07:22:27	0
3879	"@gsmet Pushed an update.
"	2016-10-18 06:53:53	1.0	2016-10-18 07:22:27	0
3880	"Ok, I see. FWIW, I don't think that the JavaBeans spec mandates that a
getter always returns the same value. But it's changed as per your request
now.
"	2016-10-18 07:22:32	1.0	2016-10-18 07:22:27	0
3881	"Merged, thanks!
"	2016-10-18 07:22:44	1.0	2016-10-18 07:22:27	0
3882	"I thought about this approach but I must admit I really disliked the fact that we instantiate a new `ResourceBundleMessageInterpolator` each time we call this method (and `getMessageInterpolator`). I would expect us to return the same object for each call.

Thinking about it and as I noticed `Configuration` is not supposed to be thread safe, couldn't we store the interpolators the first time the methods are called? That would solve this issue.
"	2016-10-17 12:10:53	1.0	2016-10-18 07:22:27	0
3883	"I'm not really concerned about it (these methods are not expected to be invoked gazillion of times). Is there anything specific you base your expectation for the same instance to be returned upon?

Storing them as you say should work; `ConfigurationState` (unlike `Configuration`) doesn't explicitly state that it's not thread-safe, but I think it's a reasonable assumption then that it isn't.
"	2016-10-17 14:12:27	1.0	2016-10-18 07:22:27	0
3884	"Just to be clear on my worries: it's named like a getter and it used to work like a getter so I didn't think it was such a trivial change to make it return a different instance for each call. I don't think it's an inappropriate expectation to have it behave like a getter.
"	2016-10-18 07:20:34	1.0	2016-10-18 07:22:27	1
3885	"Can one of the admins add this person to the trusted builders? (reply with: ""add to whitelist"" or ""ok to test"")
"	2016-10-17 08:09:25	0.0		0
3886	"Created jiras:
[HV-1132](https://hibernate.atlassian.net/browse/HV-1132) force language
[HV-1133](https://hibernate.atlassian.net/browse/HV-1133) document group inheritance
"	2016-10-17 09:51:00	0.0		0
3887	"@zbbfufu do you plan to fix the issues I mentioned or should I do it? Thanks!
"	2016-10-17 12:18:32	0.0		0
3888	"@gsmet I'll fix it. I would like to refactor my commits to have one for each Jira.
"	2016-10-17 12:25:05	0.0		0
3889	"I pushed a rewrite of commits, one for each issue. It takes you comments into account.
"	2016-10-17 18:49:38	0.0		0
3890	"@zbbfufu I added one more commit for some minor wording improvements and merged!

Thanks!
"	2016-10-18 14:02:16	0.0		0
3891	"@zbbfufu btw, could you sign the CLA for the Hibernate Validator project? It's a simple form to fill at https://cla.jboss.org . Thanks!
"	2016-10-19 08:34:32	0.0		0
3892	"@gsmet I signed the license agreement. I created my JBoss Developer account
as jfurgerot.
"	2016-10-19 09:16:06	0.0		0
3893	"Could you name the tag `testGroupInheritance`?
"	2016-10-17 08:51:45	0.0		1
3894	"Please remove the empty line.
"	2016-10-17 08:52:04	0.0		1
3895	"I know it is a bit cumbersome but we try to keep the code included in the documentation very simple and with as little magic as possible. Could you stick to the iterator approach (see `carIsRented`)?
"	2016-10-17 08:55:32	0.0		1
3896	"Could you add backticks around the classnames (groups included)?
"	2016-10-17 08:59:54	0.0		1
3897	"from **the** `Default` group
"	2016-10-17 09:00:25	0.0		0
3898	"from **the** `RaceCarChecks` group
"	2016-10-17 09:00:51	0.0		0
3899	"Only one empty line is enough.
"	2016-10-17 09:01:08	0.0		1
3900	"Only one empty line is enough.
"	2016-10-17 09:01:28	0.0		1
3901	"Rebased and applied. Many thanks, @marko-bekhta!
"	2016-10-19 12:30:45	0.0		0
3902	"Wouldn't `!( value.getValue() instanceof DeclaredType ) || ...` be a better test?
"	2016-10-17 08:45:32	0.0		1
3903	"Unnecessary whitespace.
"	2016-10-17 08:46:14	0.0		1
3904	"Unnecessary whitespace.
"	2016-10-17 08:46:23	0.0		1
3905	"hmm... this `instanceof` is more for safety of next conversion. I've added it more for the cases when the annotation is of some different kind and groups parameter is present but contains something else ... But if it's only for constraint annotations it can be probably be removed completely. WDYT ?
"	2016-10-17 11:52:35	0.0		0
3906	"The current check implementation would miss if e.g. `int.class` was given as a group. I think the following would be right:
- Safely assume a `TypeMirror` is given as a value (`groups` only expects class objects, so the user couldn't provide a String or long or so)
- If `getKind()` is not DECLARED, flag it as error (preventing something like `int.class` to be given)
- If kind is DECLARED but the type is not an interface, flag it as error (as you already do)
"	2016-10-19 08:37:23	0.0		1
3907	"@gsmet I'm going to close this one, as I've found a solution without the need for synchronization: https://github.com/hibernate/hibernate-validator/pull/556. Thanks!
"	2016-10-17 10:43:34	0.0		0
3908	"I've removed that custom weights parameter and cleaned up JavaDocs. Also I've updated the JIRA ticket. As for the translations - I'll need to create separate JIRA tickets for those, right ?
"	2016-10-20 07:55:47	0.0		0
3909	"Yes, separate tickets for those changes would be great.
"	2016-10-20 08:03:16	0.0		0
3910	"Rebased and applied. Thanks, @marko-bekhta! Could you send in another PR for adding the new constraints to the docs as well (see [here](https://github.com/hibernate/hibernate-validator/blob/master/documentation/src/main/asciidoc/ch02.asciidoc#additional-constraints))? Thanks again!
"	2016-10-24 07:50:55	0.0		0
3911	"@gunnarmorling https://github.com/hibernate/hibernate-validator/pull/567 here's a PR for doc. Is that what you had in mind ? Or should there be more information ? :)
"	2016-10-24 09:09:32	0.0		0
3912	"Could you add an (English) description of ""Rejestr Gospodarki Narodowej""?
"	2016-10-17 11:02:37	0.0		1
3913	"""Validator for @NIP"", it's apparent that it is a class :)
"	2016-10-17 11:03:54	0.0		0
3914	"Better to omit it.
"	2016-10-17 11:04:55	0.0		0
3915	"How about that: ""By default a weight of 1 will be used for each digit"".
"	2016-10-17 11:06:49	0.0		0
3916	"Seems we don't have a Polish translations file yet. Maybe - as a separate issue -you could create one (assuming you speak the language based on the fact that you created these constraints :) )?
"	2016-10-17 11:09:22	0.0		1
3917	"Thinking more about it, is this actually used for the new constraints? If not, I don't think we should add it.
"	2016-10-17 11:12:04	0.0		1
3918	"if needed I can provide a Ukrainian translation - as it's my native language :) as for Polish - I'll look into it. I'll do it if the messages would be easy for me to translate, or maybe I'll ask a friend :)
"	2016-10-17 15:16:21	0.0		0
3919	"I've put a comment in JIRA about it. Initially I thought to use this annotation for those numbers. But after investigation I've found out that the algorithm differs not only in weights but in final calculation - so that's why I've added those new validators. 

If this weights parameter wouldn't be useful for any other reasons than I agree with you that it should be removed than. But I'd leave the weights in `Mod11CheckValidator` so we do not write the same code for these new validators.

So should I remove this parameter from annotation ? :)
"	2016-10-17 15:32:31	0.0		0
3920	"Ah, sorry, wrong thinking on my side :) Ukrainian would be nice, too :)
"	2016-10-20 07:24:19	0.0		0
3921	"If these new constraints cannot be written based on top of the existing ones, I wouldn't bother to add these weights then (and let's change the title of the issue to reflect that it is about adding these three Polish constraints).
"	2016-10-20 07:27:00	0.0		0
3922	"@Sanne As you asked me: you may try the same in HSEARCH. Just make sure to use a recent JDK 9 (ideally, the latest, b139). Earlier ones expose a bug in conjunction with Weld.
"	2016-10-12 16:44:20	1.0	2016-10-13 13:06:29	0
3923	"@gunnarmorling ah, nice! I was aware of the Weld issue, didn't know it was fixed in the JDK. Thanks!
"	2016-10-12 17:08:06	1.0	2016-10-13 13:06:29	0
3924	"Merged! Thanks!
"	2016-10-13 13:06:39	1.0	2016-10-13 13:06:29	0
3925	"Wouldn't it make more sense to add back the module to the global list?
"	2016-10-13 08:32:03	1.0	2016-10-13 13:06:29	1
3926	"@gsmet Yeah, good point. Force-pushed an update.
"	2016-10-13 11:18:39	1.0	2016-10-13 13:06:29	0
3927	"I'm starting to become skeptical about the entire thing. The spec clearly says ""@Valid is not honored by this method"" for `validateValue()` and `validateProperty()`. It seems we violating this paradigm by supporting nested paths? In hindsight I think it should not have been done, or rather via some explicit option to opt-in.
"	2016-10-14 08:37:15	0.0		0
3928	"Closing as I will push another one.
"	2016-10-18 16:02:47	0.0		0
3929	"HI, it's more of a question :) - I've noticed that there's this `CollectionHelper` util class and sometimes in the code it is used to create different collections with for example `CollectionHelper#newHashMap` and some times jus simple instantiation is used like here. Is there any preferences/recommendations when to use what, or is it more of style thing ?
"	2016-10-13 08:03:21	0.0		1
3930	"CollectionHelper was created at the time where the diamond didn't exist so it was a convenient method to initialize a generic collection. It also has helpers to create sized collection. It has a little less sense now that we have the diamond but we still use it as the primary way to initialize collection.

In this case, I must admit that I like to keep it simple for this sort of test but it's a matter of preference. And I didn't use the diamond operator as I plan to backport this on 5.3/5.4.
"	2016-10-13 08:36:41	0.0		0
3931	"Thanks for the explanation ! 

Everything else looks good to me, but I'm not as familiar with this part of code as any of you are :) so I'm probably not the one who should merge it in :)
"	2016-10-13 11:34:35	0.0		0
3932	"Instead of `property.getType()` the actual value type should be used (in the case of `validateProperty()`, as BV dicates to use runtime type rather than static type for constraint retrieval. 
"	2016-10-14 08:53:20	0.0		1
3933	"`getValue()` is called once before already (a few lines up). It may do the right thing, but I'm struggling to grasp what this method is doing. There are so many conditionals, partly checking repeatedly on the same conditions. I feel some more thorough clean-up is due should we decide to keep this functionality. Also it's not so nice that it's implemented recursively instead of purely iterative.
"	2016-10-14 08:58:41	0.0		1
3934	"Good catch!
"	2016-10-11 11:25:05	1.0	2016-10-11 11:24:57	0
3935	"OK, so, after giving it some thoughts, I think I prefer the NumberPattern approach. I wouldn't make both available and would limit the patch to adding NumberPattern.

As adding a new constraint is something big, I would like to have @gunnarmorling 's feedback on this approach before going further.
"	2016-10-13 08:39:43	0.0		0
3936	"@gsmet I've cleaned everything so only NumberPattern related code was left and force pushed a clean commit with all of your comments applied. 
"	2016-10-13 11:25:31	0.0		0
3937	"As discussed on the JIRA issue, I'm going to close it as we don't see the use case really. Thanks for your efforts either way, @marko-bekhta!
"	2016-10-17 14:16:11	0.0		0
3938	"I wouldn't tie the 2 annotations together, I don't think reusing Flag from Pattern is such a good idea. Especially with Pattern being part of javax.validation.
"	2016-10-13 09:12:59	0.0		1
3939	"I would go for:

```
@return format used to format the number. If left blank, toString() will be used to create a String representation of a number, except for {@link BigDecimal} where {@link BigDecimal#toPlainString()} is used
```

(a Number might override toString so I don't think it's a good idea to link to Number#toString)
"	2016-10-13 09:16:34	0.0		1
3940	"Once you have removed the dependency to Pattern.Flag, you'll be able to remove the fqcn.
"	2016-10-13 09:17:42	0.0		1
3941	"You can't do that as `DecimalFormat` is not thread safe and `ConstraintValidator`s are shared.

What you should do is check if the format is valid and initialize a string if it is and use this string to instantiate a new `DecimalFormat` on validation (I don't think using a `ThreadLocal` would be a good idea).
"	2016-10-13 09:31:56	0.0		1
3942	"See `StringHelper#isNullOrEmptyString`
"	2016-10-13 09:32:12	0.0		0
3943	"Mmmmh, I can't see the difference here, what did you change?
"	2016-10-13 09:33:39	0.0		0
3944	"there was a typo : `ExpeCtion` -> `ExCeption`
"	2016-10-13 10:28:59	0.0		1
3945	"looks like there is a missing ""value"" here
"	2016-10-13 11:47:00	0.0		1
3946	"Raaah, I spent 2 minutes trying to find it :).
"	2016-10-13 11:47:36	0.0		0
3947	"Wondering if we should find a way to include the format here. WDYT?
"	2016-10-13 11:52:40	0.0		1
3948	"so it'll be like :
`@param value value which is validated.`
maybe it'll be better to change the parameter `value` -> `number` and then it'll be 
`@param number value which is validated.`
?
"	2016-10-13 11:56:14	0.0		1
3949	"it'll be a longer message than, as that format parameter is optional and we would need to somehow mention that right ? So for example it might be something like:
`String representation of a number, formatted with {numberFormat} (if one was provided)  must match ""{regexp}""`

But I don't know ...
"	2016-10-13 12:08:10	0.0		1
3950	"Yes, you can do it, it will be clearer. That being said, keep in mind it's formatted ""value - value which is validated"" in the resulting javadoc.
"	2016-10-13 13:12:12	0.0		1
3951	"See javax.validation.constraints.DecimalMax.message for a conditional usage. I'm not sure either about this. Let it alone for now, we can improve that later if users complain.
"	2016-10-13 13:17:18	0.0		1
3952	"We usually keep the empty line at the end of the file.
"	2016-10-13 13:18:22	0.0		0
3953	"I added a commit to fix the indentation and add a comment. I merged it as is in 6.0, will update the base version once 5.3.0.Final is released.
"	2016-10-10 12:42:23	1.0	2016-10-10 12:36:57	0
3954	"> But all in all, I think it's the responsibility of the user to test his regexp and make sure it's working with the given type

Yes, that was my thought as well. Another thought was to make a different annotation for numbers something like `@NumberPattern` and add a parameter to that annotation which will provide a number format, which will be used to convert the annotated number to string and then tested by regexp. 
"	2016-10-10 09:45:45	0.0		0
3955	"@marko-bekhta could you experiment with your numberFormat idea? I think it might be a better fit, especially for BigDecimal. The number format could be optional and we would use toString() (and maybe toPlainString() for BigDecimal?) if not provided.

I think the best is to keep this PR as is and open another PR with the result of your experimentation if it ends well.
"	2016-10-10 10:49:53	0.0		0
3956	"@gsmet I've updated a JavaDoc of `BasePatternValidator` a bit to reflect the move of isValid method. And yes, I'll try to implement this numberFormat approach and create another PR for it. 
"	2016-10-10 12:14:30	0.0		0
3957	"As discussed on the JIRA issue, I'm going to close it as we don't see the use case really. Thanks for your efforts either way, @marko-bekhta!
"	2016-10-17 14:15:55	0.0		0
3958	"Maybe you could even keep this method here (well a generified version of it) and have a `CharSequence getCharSequenceRepresentation(T value)` method to override?
"	2016-10-10 08:37:19	0.0		1
3959	"yes, I'll do that. 
"	2016-10-10 09:42:51	0.0		0
3960	"Merged and backported to 5.3.
"	2016-10-10 13:30:25	0.0		0
3961	"When do we clone it?
"	2016-10-07 14:47:33	0.0		0
3962	"No actual change here besides the method extraction, right?
"	2016-10-07 14:48:14	0.0		0
3963	"Oops, we don't. It's a leftover of some investigation. 
"	2016-10-07 16:18:07	0.0		0
3964	"Yes, no change but I needed to use the exact same code a few lines above so I extracted it. 
"	2016-10-07 16:18:56	0.0		0
3965	"Fixed. I rebased and force pushed. It should be OK now.
"	2016-10-10 07:30:19	0.0		0
3966	"> I kinda like how it optimizes for the simplest case (no initialize() needed as the constraint has no parameters; no access to constraint validator context needed)

+1

> Should we provide an alternative for where these things are needed (or leave that to implementing an actual class)?

I don't think so. Let's keep it simple for the simple case and implement a class for further needs.

> I think it can be implemented without bytecode generation

Yes, it would be nice to avoid it if we can.

> I think it'd make sense to have this as some sort of prototype API first in HV 6 (Alpha/Beta) and then add it to the spec.

+1, I think people needs to play with it in real life cases so that we can have useful feedback.
"	2016-10-10 12:49:57	0.0		0
3967	"So what's the idea really, provide an alternative/new constraint mapping API? I guess from that perspective it might be ok, but it in the end BV has always been about declarative constraint mapping. Also, I find it odd that this is just working for simple cases. I would expect something which works for all cases. If not, I'd rather stick to what we have. Lambadas are the new generics and will get overused as generics did.
"	2016-10-11 18:06:15	0.0		0
3968	"Hey Hardy,

> So what's the idea really, provide an alternative/new constraint mapping API?

No, not a mapping API really. Rather a simplified way to implement a constraint's logic. It means to address user requests about making constraint implementation more light-weight.

> BV has always been about declarative constraint mapping. 

That wouldn't change, you'd still put your constraints in a declarative fashion.

> I would expect something which works for all cases

Yes, that's a question I have, too. I can see how we could have two overloaded methods or so. But it'd violate the ""provide one way to do a thing"" paradigm. In that light I kinda like to provide just a more light-weight approach for the most common case.

> Lambadas are the new generics and will get overused as generics did.

Hah, don't be that pessimistic. I believe in the good in people :)

I think we should add it in one way or another as experimental in HV 6 Alpha1 and look for feedback.
"	2016-10-11 19:47:06	0.0		1
3969	"> That wouldn't change, you'd still put your constraints in a declarative fashion.

Ok

> Yes, that's a question I have, too. I can see how we could have two overloaded methods or so. But it'd violate the ""provide one way to do a thing"" paradigm. In that light I kinda like to provide just a more light-weight approach for the most common case.

As said, I am not a big fan, especially if it just addresses one case.

> I think we should add it in one way or another as experimental in HV 6 Alpha1 and look for feedback.

I guess I could also see it as some experimental feature to explore it, but I don't think it is ready for BV.
"	2016-10-12 08:06:42	0.0		0
3970	"Hey @gsmet I've pushed an update, it's not using ByteBuddy anymore now. Let me know what you think. From my side it's good (apart from doc update).
"	2016-10-18 17:12:07	0.0		0
3971	"@gsmet Can we merge it?
"	2016-10-24 07:12:07	0.0		0
3972	"@gsmet Thanks for reviewing. I've pushed some more commits for
- Addressing your remarks about the naming (in a way ""type"" could be applied to the descriptors, too, but I agree that ""class"" was too far off. Should be fixed everywhere now
- Adding a new annotation `@Incubating` (see [HV-1141](https://hibernate.atlassian.net/projects/HV/issues/HV-1141)) and putting it to the new API members
- Adding docs
"	2016-10-24 12:18:37	0.0		0
3973	"Taking a step back, there are two loose ends remaining:
- currently `validateType` only takes a `Class` object, but I think we should have one for `Type`, too. Because a user may wish to define an expression for `List<String>` instead of raw `List` (e.g. an equivalent to `SizeValidatorForCollection`)
- currently there is no way to declare a cross-parameter constraint using a Lambda expression (as the supported validation target(s) is controlled via an annotation on `ConstraintValidator` implementations)

I think we can do these two separately as there always is the current way of doing things.
"	2016-10-24 12:27:29	0.0		1
3974	"> I think we can do these two separately as there always is the current way of doing things.

Could you create JIRA issues for them?
"	2016-10-24 13:15:08	0.0		0
3975	"@gunnarmorling I added a few more comments on your changes. I can fix them on merging if you prefer!
"	2016-10-24 13:29:27	0.0		0
3976	"Sweet, thanks! I'll rework my last commits to address your final remarks and then do the push.
"	2016-10-24 14:17:38	0.0		0
3977	"> Could you create JIRA issues for them?

Done: [HV-1142](https://hibernate.atlassian.net/browse/HV-1142).
"	2016-10-24 14:19:25	0.0		0
3978	"Merged it, yippie :)
"	2016-10-24 14:24:04	0.0		0
3979	"Declare constraint with method reference...
"	2016-10-07 11:06:37	0.0		0
3980	"...or a Lambda.
"	2016-10-07 11:06:49	0.0		0
3981	"""{@code null} is never passed"" would be better?
"	2016-10-24 08:05:52	0.0		0
3982	"I don't think `validatorTypes` is accurate as the descriptor also contains the lambda in the lambda case. Why not `validatorDescriptors`?
"	2016-10-24 08:24:04	0.0		1
3983	"Same here.
"	2016-10-24 08:24:32	0.0		0
3984	"Wouldn't it be better to do this in the constructor and have a final variable with it?
"	2016-10-24 08:25:23	0.0		1
3985	"Same here?
"	2016-10-24 08:25:37	0.0		0
3986	"Not sure the Javadoc is accurate (see my remark about `validatorTypes` earlier).
"	2016-10-24 08:27:03	0.0		1
3987	"Maybe a little more formatting and javadoc love is in order?
"	2016-10-24 08:27:27	0.0		1
3988	"`validatorDescriptor` would be nice to be consistent with the naming a few lines below.
"	2016-10-24 08:28:54	0.0		1
3989	"Good to have something more type safe now.
"	2016-10-24 08:30:49	0.0		0
3990	"Same remark about validator types.
"	2016-10-24 08:31:27	0.0		0
3991	"Shouldn't we change the name to be clear it return descriptors?
"	2016-10-24 08:32:45	0.0		1
3992	"Same remark about validator types not being accurate.
"	2016-10-24 08:33:16	0.0		0
3993	"Btw, just thinking out loud, but any chance we could use ClassMate instead of exposing a new `TypeHelper` method?
"	2016-10-24 10:55:10	0.0		0
3994	"Yes, that'd be nice. But I'd say let's handle it separately. It isn't a fully trivial change, when I tried it a while ago I got two test failures around some corner cases.
"	2016-10-24 12:21:07	0.0		0
3995	"incompatibly?
"	2016-10-24 13:03:31	0.0		0
3996	"incompatibly?
"	2016-10-24 13:05:01	0.0		0
3997	"Missing new line just above.
"	2016-10-24 13:07:04	0.0		1
3998	"Looks like you missed this one.
"	2016-10-24 13:10:58	0.0		1
3999	"Did you see my comment about avoiding exposing a new TypeHelper method and use ClassMate instead? Maybe it does not make sense here and has a risk of not being consistent with the rest but I thought I might as well ask.
"	2016-10-24 13:12:52	0.0		1
4000	"Yep, saw it, and replied :) I'd definitely like it, but I think it'll need some tinkering. As this change here essentially ""just"" is existing code relocated I didn't want to touch this one, too. There's a separate issue for it.
"	2016-10-24 14:17:07	0.0		0
